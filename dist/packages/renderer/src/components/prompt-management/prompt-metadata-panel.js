"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptMetadataPanel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * TanukiMCP Atlas - Prompt Metadata Panel
 * Displays prompt information, variables, and guidance
 */
const react_1 = require("react");
const prompt_store_1 = require("../../stores/prompt-store");
const PromptMetadataPanel = () => {
    const { selectedPrompt } = (0, prompt_store_1.usePromptStore)();
    const [activeTab, setActiveTab] = (0, react_1.useState)('info');
    if (!selectedPrompt) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "h-full flex items-center justify-center text-gray-500 dark:text-gray-400", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-2xl mb-2", children: "\uD83D\uDCCB" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm", children: "Select a prompt to view metadata" })] }) }));
    }
    const tabs = [
        { id: 'info', label: 'Info', icon: 'ℹ️' },
        { id: 'variables', label: 'Variables', icon: '🔧' },
        { id: 'guidance', label: 'Guidance', icon: '📖' },
        { id: 'default', label: 'Default', icon: '🔄' }
    ];
    return ((0, jsx_runtime_1.jsxs)("div", { className: "h-full flex flex-col bg-white dark:bg-gray-900", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-shrink-0 border-b border-gray-200 dark:border-gray-700", children: [(0, jsx_runtime_1.jsx)("div", { className: "p-4", children: (0, jsx_runtime_1.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-white", children: "Prompt Metadata" }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex border-b border-gray-200 dark:border-gray-700", children: tabs.map(tab => ((0, jsx_runtime_1.jsxs)("button", { onClick: () => setActiveTab(tab.id), className: `flex items-center space-x-1 px-3 py-2 text-sm font-medium border-b-2 transition-colors ${activeTab === tab.id
                                ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                                : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'}`, children: [(0, jsx_runtime_1.jsx)("span", { children: tab.icon }), (0, jsx_runtime_1.jsx)("span", { children: tab.label })] }, tab.id))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 overflow-y-auto p-4", children: [activeTab === 'info' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Prompt ID" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-900 dark:text-white font-mono bg-gray-50 dark:bg-gray-800 p-2 rounded", children: selectedPrompt.id })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Description" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-900 dark:text-white", children: selectedPrompt.description })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Agent Module" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-900 dark:text-white", children: selectedPrompt.agentModule })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Purpose" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-900 dark:text-white", children: selectedPrompt.purpose })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Complexity" }), (0, jsx_runtime_1.jsx)("div", { className: `inline-flex px-2 py-1 rounded text-xs font-medium ${selectedPrompt.complexity === 'low' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
                                                    selectedPrompt.complexity === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
                                                        'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'}`, children: selectedPrompt.complexity })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Version" }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-900 dark:text-white", children: selectedPrompt.version })] })] }), "            ", (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Tags" }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-1", children: selectedPrompt.tags.map(tag => ((0, jsx_runtime_1.jsx)("span", { className: "inline-flex px-2 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400 text-xs rounded", children: tag }, tag))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4 text-xs text-gray-600 dark:text-gray-400", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block font-medium mb-1", children: "Created" }), (0, jsx_runtime_1.jsx)("div", { children: selectedPrompt.created.toLocaleDateString() })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block font-medium mb-1", children: "Last Modified" }), (0, jsx_runtime_1.jsx)("div", { children: selectedPrompt.lastModified.toLocaleDateString() })] })] })] })), activeTab === 'variables' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-600 dark:text-gray-400 mb-4", children: "Variables that can be used in this prompt template." }), selectedPrompt.variables.length > 0 ? ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: selectedPrompt.variables.map((variable, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "border border-gray-200 dark:border-gray-700 rounded-lg p-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [(0, jsx_runtime_1.jsx)("span", { className: "font-mono text-sm text-blue-600 dark:text-blue-400", children: `{{${variable.name}}}` }), (0, jsx_runtime_1.jsx)("span", { className: `px-2 py-1 text-xs rounded ${variable.required
                                                        ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
                                                        : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-400'}`, children: variable.required ? 'Required' : 'Optional' }), (0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 text-xs bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 rounded", children: variable.type })] }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-700 dark:text-gray-300 mb-2", children: variable.description }), variable.example && ((0, jsx_runtime_1.jsxs)("div", { className: "text-xs text-gray-600 dark:text-gray-400", children: [(0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "Example:" }), (0, jsx_runtime_1.jsx)("code", { className: "ml-1 bg-gray-100 dark:bg-gray-800 px-1 rounded", children: typeof variable.example === 'string'
                                                        ? variable.example
                                                        : JSON.stringify(variable.example) })] }))] }, index))) })) : ((0, jsx_runtime_1.jsxs)("div", { className: "text-center text-gray-500 dark:text-gray-400 py-8", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-2xl mb-2", children: "\uD83D\uDCC4" }), (0, jsx_runtime_1.jsx)("div", { children: "No variables defined for this prompt" })] }))] })), "        ", activeTab === 'guidance' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-600 dark:text-gray-400 mb-4", children: "Guidelines and best practices for editing this prompt." }), (0, jsx_runtime_1.jsx)("div", { className: "prose prose-sm dark:prose-invert max-w-none", children: (0, jsx_runtime_1.jsx)("div", { className: "whitespace-pre-wrap text-sm text-gray-900 dark:text-white", children: selectedPrompt.guidance }) }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-blue-900 dark:text-blue-300 mb-2", children: "\uD83D\uDCA1 General Editing Tips" }), (0, jsx_runtime_1.jsxs)("ul", { className: "text-sm text-blue-800 dark:text-blue-400 space-y-1", children: [(0, jsx_runtime_1.jsx)("li", { children: "\u2022 Test changes with the validation tool before saving" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Keep prompts focused and specific to their purpose" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Use clear, unambiguous language" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Consider token limits for performance" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Document any custom variables you add" })] })] })] })), activeTab === 'default' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Original default prompt for comparison." }), selectedPrompt.isModified && ((0, jsx_runtime_1.jsx)("div", { className: "text-xs text-yellow-600 dark:text-yellow-400", children: "Currently using modified version" }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 dark:bg-gray-800 rounded-lg", children: [(0, jsx_runtime_1.jsx)("div", { className: "p-3 border-b border-gray-200 dark:border-gray-700", children: (0, jsx_runtime_1.jsx)("div", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: "Default Content" }) }), (0, jsx_runtime_1.jsx)("div", { className: "p-4", children: (0, jsx_runtime_1.jsx)("pre", { className: "text-sm text-gray-900 dark:text-white whitespace-pre-wrap font-mono leading-relaxed", children: selectedPrompt.defaultContent }) })] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: "This is the original prompt content as shipped with TanukiMCP Atlas. Your modifications are stored separately and can be reset at any time." })] }))] })] }));
};
exports.PromptMetadataPanel = PromptMetadataPanel;
//# sourceMappingURL=prompt-metadata-panel.js.map