"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextualToolbar = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const dropdown_menu_1 = require("@/components/ui/dropdown-menu");
const ContextualToolbar = ({ currentView, isProcessing = false, agentMode = false, onAgentModeToggle, onStopProcessing, onToolSelect, onQuickSettings }) => {
    const renderChatToolbar = () => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 p-1 bg-muted rounded-md", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: agentMode ? "default" : "ghost", size: "sm", onClick: onAgentModeToggle, className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bot, { className: "w-4 h-4" }), "Agent"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: !agentMode ? "default" : "ghost", size: "sm", onClick: onAgentModeToggle, className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MessageSquare, { className: "w-4 h-4" }), "Chat"] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "destructive", size: "sm", onClick: onStopProcessing, disabled: !isProcessing, className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Square, { className: "w-4 h-4" }), "Stop"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: onToolSelect, className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Wrench, { className: "w-4 h-4" }), "@Tools"] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "secondary", className: "gap-1", children: [agentMode ? (0, jsx_runtime_1.jsx)(lucide_react_1.Bot, { className: "w-3 h-3" }) : (0, jsx_runtime_1.jsx)(lucide_react_1.MessageSquare, { className: "w-3 h-3" }), agentMode ? 'Agent Mode' : 'Chat Mode'] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", size: "sm", className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Brain, { className: "w-4 h-4" }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", children: "Tier 2" })] }) }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuContent, { children: (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuItem, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-1", children: [(0, jsx_runtime_1.jsx)("div", { className: "font-medium", children: "Processing Tier: Moderate" }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-muted-foreground", children: "Model: llama3.2:3b" }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-muted-foreground", children: "Tokens: 2,048 / 4,096" })] }) }) })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", size: "sm", className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Wrench, { className: "w-4 h-4" }), "Tools"] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: onQuickSettings, children: (0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", children: (0, jsx_runtime_1.jsx)(lucide_react_1.BarChart3, { className: "w-4 h-4" }) })] })] }));
    const renderWorkflowToolbar = () => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", children: "Start" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", children: "Action" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", children: "Condition" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", children: "Loop" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", children: "End" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "default", size: "sm", className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: "w-4 h-4" }), "Save"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", className: "gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.TestTube, { className: "w-4 h-4" }), "Test"] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", children: (0, jsx_runtime_1.jsx)(lucide_react_1.ZoomOut, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", children: (0, jsx_runtime_1.jsx)(lucide_react_1.ZoomIn, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", children: (0, jsx_runtime_1.jsx)(lucide_react_1.AlignCenter, { className: "w-4 h-4" }) })] })] }));
    const renderDefaultToolbar = () => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between w-full", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center gap-2", children: (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-muted-foreground", children: currentView.charAt(0).toUpperCase() + currentView.slice(1).replace('-', ' ') }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center gap-1", children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: onQuickSettings, children: (0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: "w-4 h-4" }) }) })] }));
    const renderToolbar = () => {
        switch (currentView) {
            case 'chat':
                return renderChatToolbar();
            case 'workflow-manager':
                return renderWorkflowToolbar();
            default:
                return renderDefaultToolbar();
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: "h-10 bg-background border-b border-border px-4 flex items-center", children: renderToolbar() }));
};
exports.ContextualToolbar = ContextualToolbar;
//# sourceMappingURL=ContextualToolbar.js.map