import { EventEmitter } from 'events';
import { IMCPHubService, MCPServerConfig, ToolCall, ToolResult, ToolCatalog, ToolConflict, HealthReport, ServerHealth, ExecutionContext } from './types';
export declare class MCPClientHub extends EventEmitter implements IMCPHubService {
    private connections;
    private configs;
    private healthMonitor;
    private toolCache;
    private conflictResolutions;
    private pendingRequests;
    private isInitialized;
    constructor();
    initialize(): Promise<void>;
    addServer(config: MCPServerConfig): Promise<void>;
    removeServer(serverId: string): Promise<void>;
    connectServer(serverId: string): Promise<void>;
    disconnectServer(serverId: string): Promise<void>;
    reconnectServer(serverId: string): Promise<void>;
    executeToolCall(toolCall: ToolCall, context: ExecutionContext): Promise<ToolResult>;
    getAllAvailableTools(): Promise<ToolCatalog>;
    resolveToolConflicts(): Promise<ToolConflict[]>;
    getHealthReport(): Promise<HealthReport>;
    getServerStatus(serverId: string): Promise<ServerHealth | null>;
    testServer(serverId: string): Promise<boolean>;
    updateServerConfig(serverId: string, updates: Partial<MCPServerConfig>): Promise<void>;
    getServerConfig(serverId: string): Promise<MCPServerConfig | null>;
    listServers(): Promise<MCPServerConfig[]>;
    exportConfiguration(): Promise<string>;
    importConfiguration(configJson: string): Promise<void>;
    shutdown(): Promise<void>;
    private setupTransportHandlers;
    private initializeMCPSession;
    private syncServerTools;
    private sendRequestAndWaitForResponse;
    private handleIncomingMessage;
    private findToolProvider;
    private handleToolExecutionError;
    private formatToolResult;
    private setupHealthMonitorListeners;
    private getBuiltinTools;
    private categorizeToolName;
    private extractToolTags;
    private updateToolMetrics;
    private loadSavedConfigurations;
    private saveConfiguration;
    private removeStoredConfiguration;
    private autoConnectServers;
}
