{
  "version": 3,
  "sources": ["../src/preload.ts"],
  "sourcesContent": ["import { contextBridge, ipcRenderer } from 'electron';\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  onTrayAction: (callback: (data: any) => void) => {\n    ipcRenderer.on('tray-action', (event, data) => callback(data));\n  },\n  \n  onMenuAction: (callback: (data: any) => void) => {\n    ipcRenderer.on('menu-action', (event, data) => callback(data));\n  },\n  \n  onUpdaterAction: (callback: (data: any) => void) => {\n    ipcRenderer.on('updater-action', (event, data) => callback(data));\n  },\n  \n  onProtocolAction: (callback: (data: any) => void) => {\n    ipcRenderer.on('protocol-action', (event, data) => callback(data));\n  },\n  \n  sendAction: (channel: string, data: any) => {\n    ipcRenderer.send(channel, data);\n  },\n  \n  invoke: (channel: string, ...args: any[]) => {\n    return ipcRenderer.invoke(channel, ...args);\n  },\n  \n  removeAllListeners: (channel: string) => {\n    ipcRenderer.removeAllListeners(channel);\n  },\n  \n  getAppVersion: () => {\n    return ipcRenderer.invoke('get-app-version');\n  },\n  \n  minimizeWindow: () => {\n    ipcRenderer.send('minimize-window');\n  },\n  \n  maximizeWindow: () => {\n    ipcRenderer.send('maximize-window');\n  },\n  \n  closeWindow: () => {\n    ipcRenderer.send('close-window');\n  },\n  \n  // New window functions\n  onWindowMaximized: (callback: (event: any, isMaximized: boolean) => void) => {\n    ipcRenderer.on('window-maximized-change', callback);\n  },\n  \n  toggleFullScreen: () => {\n    ipcRenderer.send('toggle-fullscreen');\n  },\n  \n  isFullScreen: () => {\n    return ipcRenderer.invoke('window:isFullScreen');\n  },\n  \n  isMaximized: () => {\n    return ipcRenderer.invoke('window:isMaximized');\n  },\n  \n  // Mobile proxy management\n  startProxyServer: () => ipcRenderer.invoke('start-proxy-server'),\n  stopProxyServer: () => ipcRenderer.invoke('stop-proxy-server'),\n  getProxyStatus: () => ipcRenderer.invoke('get-proxy-status'),\n  generatePairingQRCode: () => ipcRenderer.invoke('generate-pairing-qrcode'),\n  showProxyStatusWindow: () => ipcRenderer.invoke('show-proxy-status-window'),\n  sendProxyChatResponse: (clientId: string, message: string, messageId: string) => \n    ipcRenderer.invoke('send-proxy-chat-response', { clientId, message, messageId }),\n  \n  // Proxy event listeners\n  onProxyStatusChanged: (callback: (status: any) => void) => \n    ipcRenderer.on('proxy-status-changed', (_, status) => callback(status)),\n  onProxyClientConnected: (callback: (data: any) => void) => \n    ipcRenderer.on('proxy-client-connected', (_, data) => callback(data)),\n  onProxyClientDisconnected: (callback: (data: any) => void) => \n    ipcRenderer.on('proxy-client-disconnected', (_, data) => callback(data)),\n  onProxyChatMessage: (callback: (data: any) => void) => \n    ipcRenderer.on('proxy-chat-message', (_, data) => callback(data)),\n  onProxyMediaProcessed: (callback: (data: any) => void) => \n    ipcRenderer.on('proxy-media-processed', (_, data) => callback(data)),\n  \n  // Remove event listeners\n  removeProxyStatusListener: () => ipcRenderer.removeAllListeners('proxy-status-changed'),\n  removeProxyClientConnectedListener: () => ipcRenderer.removeAllListeners('proxy-client-connected'),\n  removeProxyClientDisconnectedListener: () => ipcRenderer.removeAllListeners('proxy-client-disconnected'),\n  removeProxyChatMessageListener: () => ipcRenderer.removeAllListeners('proxy-chat-message'),\n  removeProxyMediaProcessedListener: () => ipcRenderer.removeAllListeners('proxy-media-processed'),\n  \n  // OpenRouter integration\n  storeOpenRouterKey: (key: string) => ipcRenderer.invoke('store-openrouter-key', key),\n  getOpenRouterKey: () => ipcRenderer.invoke('get-openrouter-key')\n});"],
  "mappings": "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",
  "names": []
}
