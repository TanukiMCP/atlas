{
  "version": 3,
  "sources": ["../src/main.ts", "../src/window.ts", "../src/ipc/handlers.ts", "../src/database/connection.ts", "../src/database/schema.ts", "../../../node_modules/uuid/dist/esm-node/rng.js", "../../../node_modules/uuid/dist/esm-node/stringify.js", "../../../node_modules/uuid/dist/esm-node/native.js", "../../../node_modules/uuid/dist/esm-node/v4.js", "../src/services/openrouter-service.ts", "../src/services/system-monitor.ts", "../src/services/system-tray.ts", "../src/services/native-menu.ts", "../src/services/auto-updater.ts", "../src/services/notification-service.ts", "../src/services/crash-reporter.ts", "../src/services/protocol-handler.ts"],
  "sourcesContent": ["import { app, BrowserWindow } from 'electron';\r\nimport path from 'path';\r\nimport { createWindow } from './window';\r\nimport { setupIPC } from './ipc/handlers';\r\nimport { initializeDatabase } from './database/connection';\r\nimport { OpenRouterService } from './services/openrouter-service';\r\nimport { SystemMonitor } from './services/system-monitor';\r\nimport { SystemTrayService } from './services/system-tray';\r\nimport { NativeMenuService } from './services/native-menu';\r\nimport { AutoUpdaterService } from './services/auto-updater';\r\nimport { NotificationService } from './services/notification-service';\r\nimport { CrashReporterService } from './services/crash-reporter';\r\nimport { ProtocolHandlerService } from './services/protocol-handler';\r\n\r\nclass TanukiMCPApp {\r\n  private mainWindow: BrowserWindow | null = null;\r\n  private trayService!: SystemTrayService;\r\n  private menuService!: NativeMenuService;\r\n  private autoUpdaterService!: AutoUpdaterService;\r\n  private notificationService!: NotificationService;\r\n  private crashReporterService!: CrashReporterService;\r\n  private protocolHandlerService!: ProtocolHandlerService;\r\n\r\n  // Services that might be initialized later or conditionally\r\n  private openrouterService!: OpenRouterService;\r\n  private systemMonitor!: SystemMonitor;\r\n  private isQuitting = false;\r\n\r\n  constructor() {\r\n    this.setupEventHandlers();\r\n  }\r\n  \r\n  private async initializeServices(): Promise<void> {\r\n    console.log('\uD83D\uDD27 Initializing services...');\r\n    \r\n    // Initialize core services - keep only what's needed for OpenRouter\r\n    this.openrouterService = new OpenRouterService();\r\n    this.systemMonitor = new SystemMonitor();\r\n    \r\n    // Skip hardware-specific services since we're using OpenRouter free models only\r\n    \r\n    console.log('\u2705 Core services initialized');\r\n    \r\n    // Initialize Enhanced LLM and MCP Hub\r\n    console.log('\uD83D\uDD27 Initializing desktop integration...');\r\n    \r\n    // Initialize crash reporter first\r\n    if (this.mainWindow) {\r\n      this.crashReporterService = new CrashReporterService(this.mainWindow);\r\n      \r\n      // Initialize notification service\r\n      this.notificationService = new NotificationService(this.mainWindow);\r\n      \r\n      // Initialize system tray\r\n      this.trayService = new SystemTrayService(this.mainWindow);\r\n      \r\n      // Initialize native menu\r\n      this.menuService = new NativeMenuService(this.mainWindow);\r\n      \r\n      // Initialize protocol handler\r\n      this.protocolHandlerService = new ProtocolHandlerService(this.mainWindow);\r\n      \r\n      // Initialize auto-updater (only in production)\r\n      if (process.env.NODE_ENV === 'production') {\r\n        this.autoUpdaterService = new AutoUpdaterService(this.mainWindow);\r\n        // Check for updates on startup (after a delay)\r\n        setTimeout(() => {\r\n          this.autoUpdaterService?.checkForUpdates();\r\n        }, 5000);\r\n      }\r\n    }\r\n    \r\n    console.log('\u2705 Desktop integration services initialized');\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    // Set up app event handlers\r\n    app.whenReady().then(() => this.onReady());\r\n    app.on('window-all-closed', this.onWindowAllClosed.bind(this));\r\n    app.on('activate', this.onActivate.bind(this));\r\n    app.on('before-quit', this.onBeforeQuit.bind(this));\r\n    \r\n    // Handle certificate errors (for local development)\r\n    app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\r\n      if (url.startsWith('http://localhost')) {\r\n        // Ignore certificate errors for localhost\r\n        event.preventDefault();\r\n        callback(true);\r\n      } else {\r\n        // Use default behavior for other URLs\r\n        callback(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async onReady(): Promise<void> {\r\n    try {\r\n      console.log('\uD83D\uDE80 TanukiMCP Atlas starting...');\r\n      \r\n      // Initialize services\r\n      await this.initializeServices();\r\n      \r\n      // Initialize database\r\n      console.log('\uD83D\uDCCA Initializing database...');\r\n      await initializeDatabase();\r\n      console.log('\u2705 Database initialized');\r\n      \r\n      // Connect to OpenRouter service\r\n      console.log('\uD83D\uDD0C Connecting to OpenRouter...');\r\n      await this.loadStoredApiKey();\r\n      const status = await this.openrouterService.checkHealth();\r\n      if (status.isConnected) {\r\n        console.log('\u2705 Connected to OpenRouter service');\r\n      } else {\r\n        console.log('\u26A0\uFE0F Not connected to OpenRouter - free models will still be available');\r\n      }\r\n      \r\n      // Create main window\r\n      console.log('\uD83E\uDE9F Creating main window...');\r\n      this.mainWindow = createWindow();\r\n      \r\n      // Initialize desktop integration services\r\n      await this.initializeDesktopServices();\r\n      \r\n      // Setup IPC handlers\r\n      console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n      setupIPC();\r\n      console.log('\u2705 IPC handlers ready');\r\n      \r\n      // Load the application\r\n      await this.loadApplication();\r\n      \r\n      console.log('\uD83C\uDF89 TanukiMCP Atlas ready!');\r\n    } catch (error) {\r\n      console.error('\u274C Failed to initialize TanukiMCP Atlas:', error);\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private async loadApplication(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n\r\n    // Determine URL based on environment\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Development mode - load from Vite dev server\r\n      const devServerUrl = 'http://localhost:5173';\r\n      console.log(`\uD83D\uDD27 Loading from dev server: ${devServerUrl}`);\r\n      \r\n      try {\r\n        await this.mainWindow.loadURL(devServerUrl);\r\n        this.mainWindow.webContents.openDevTools();\r\n      } catch (error) {\r\n        console.error('Failed to load dev server, falling back to file:', error);\r\n        await this.loadProductionFile();\r\n      }\r\n    } else {\r\n      // Production mode - load from built files\r\n      await this.loadProductionFile();\r\n    }\r\n  }\r\n\r\n  private async loadProductionFile(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n    \r\n    // __dirname is packages/main/dist\r\n    // ../../../ should resolve to the project root (e.g., tanukimcp-atlas)\r\n    const projectRoot = path.resolve(__dirname, '../../../');\r\n    const indexPath = path.join(projectRoot, 'packages/renderer/dist/index.html');\r\n    console.log(`\uD83D\uDCC1 Loading from file: ${indexPath} (using projectRoot: ${projectRoot}, __dirname: ${__dirname})`);\r\n    await this.mainWindow.loadFile(indexPath);\r\n  }\r\n\r\n  private onWindowAllClosed(): void {\r\n    // On macOS, keep app running even when all windows are closed\r\n    if (process.platform !== 'darwin') {\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private onActivate(): void {\r\n    // On macOS, re-create window when dock icon is clicked\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      this.mainWindow = createWindow();\r\n      this.loadApplication();\r\n    }\r\n  }\r\n\r\n  private onBeforeQuit(): void {\r\n    this.isQuitting = true;\r\n  }\r\n\r\n  private async initializeDesktopServices(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n\r\n    try {\r\n      // Initialize crash reporter first\r\n      this.crashReporterService = new CrashReporterService(this.mainWindow);\r\n      \r\n      // Initialize notification service\r\n      this.notificationService = new NotificationService(this.mainWindow);\r\n      \r\n      // Initialize system tray\r\n      this.trayService = new SystemTrayService(this.mainWindow);\r\n      \r\n      // Initialize native menu\r\n      this.menuService = new NativeMenuService(this.mainWindow);\r\n      \r\n      // Initialize protocol handler\r\n      this.protocolHandlerService = new ProtocolHandlerService(this.mainWindow);\r\n      \r\n      // Initialize auto-updater (only in production)\r\n      if (process.env.NODE_ENV === 'production') {\r\n        this.autoUpdaterService = new AutoUpdaterService(this.mainWindow);\r\n        // Check for updates on startup (after a delay)\r\n        setTimeout(() => {\r\n          this.autoUpdaterService?.checkForUpdates();\r\n        }, 5000);\r\n      }\r\n      \r\n      console.log('\u2705 Desktop integration services initialized');\r\n    } catch (error) {\r\n      console.error('\u274C Failed to initialize desktop services:', error);\r\n      this.crashReporterService?.logCrash(error as Error, 'Desktop Services Initialization');\r\n    }\r\n  }\r\n\r\n  private async loadStoredApiKey(): Promise<void> {\r\n    try {\r\n      const { app } = require('electron');\r\n      const path = require('path');\r\n      const fs = require('fs').promises;\r\n      \r\n      const userDataPath = app.getPath('userData');\r\n      const storageFile = path.join(userDataPath, 'secure-storage.json');\r\n      \r\n      try {\r\n        const data = await fs.readFile(storageFile, 'utf8');\r\n        const storage = JSON.parse(data);\r\n        const apiKey = storage['openrouter_api_key'];\r\n        \r\n        if (apiKey && this.openrouterService) {\r\n          this.openrouterService.setApiKey(apiKey);\r\n          console.log('\uD83D\uDD11 Loaded stored OpenRouter API key');\r\n        }\r\n      } catch (error) {\r\n        // File doesn't exist or is invalid, no stored API key\r\n        console.log('\u2139\uFE0F  No stored OpenRouter API key found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load stored API key:', error);\r\n    }\r\n  }\r\n\r\n  public getMainWindow(): BrowserWindow | null {\r\n    return this.mainWindow;\r\n  }\r\n  \r\n  // Expose services for IPC handlers\r\n  public getServices() {\r\n    return {\r\n      openrouter: this.openrouterService,\r\n      systemMonitor: this.systemMonitor,\r\n      systemTray: this.trayService,\r\n      nativeMenu: this.menuService,\r\n      autoUpdater: this.autoUpdaterService,\r\n      notification: this.notificationService,\r\n      crashReporter: this.crashReporterService,\r\n      protocolHandler: this.protocolHandlerService\r\n    };\r\n  }\r\n}\r\n\r\n// Create and initialize the application\r\nconst tanukiApp = new TanukiMCPApp();\r\n\r\n// Export for potential external access\r\nexport { tanukiApp };\r\n\r\n// Handle uncaught exceptions gracefully\r\nprocess.on('uncaughtException', (error) => {\r\n  console.error('Uncaught Exception:', error);\r\n  tanukiApp.getServices().crashReporter?.logCrash(error, 'Uncaught Exception');\r\n  tanukiApp.getServices().crashReporter?.showCrashDialog(error);\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n  const error = reason instanceof Error ? reason : new Error(String(reason));\r\n  tanukiApp.getServices().crashReporter?.logCrash(error, 'Unhandled Rejection');\r\n}); ", "import { BrowserWindow, screen, app } from 'electron';\r\nimport path from 'path';\r\n\r\nexport function createWindow(): BrowserWindow {\r\n  // Get display information\r\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize;\r\n  \r\n  // Calculate optimal window size\r\n  const windowWidth = Math.min(1400, Math.floor(width * 0.9));\r\n  const windowHeight = Math.min(900, Math.floor(height * 0.9));\r\n  \r\n  // Create the browser window\r\n  const window = new BrowserWindow({\r\n    width: windowWidth,\r\n    height: windowHeight,\r\n    minWidth: 1024,\r\n    minHeight: 768,\r\n    center: true,\r\n    \r\n    // Window appearance\r\n    titleBarStyle: 'hidden', // Use hidden for all platforms to show custom frame\r\n    frame: false, // Hide default window frame\r\n    transparent: false,\r\n    backgroundColor: '#1a1a1a', // Dark theme background\r\n    vibrancy: process.platform === 'darwin' ? 'under-window' : undefined,\r\n    \r\n    // Security settings\r\n    webPreferences: {\r\n      nodeIntegration: false,           // Disable node integration in renderer\r\n      contextIsolation: true,           // Enable context isolation\r\n      sandbox: false,                   // Disable sandbox for better performance\r\n      preload: path.join(__dirname, 'preload.js'),\r\n      webSecurity: true,                // Enable web security\r\n      allowRunningInsecureContent: false,\r\n      experimentalFeatures: false,\r\n      \r\n      // Additional security\r\n      enableRemoteModule: false,\r\n      worldSafeExecuteJavaScript: true,\r\n      disableBlinkFeatures: 'Auxclick',\r\n    },\r\n    \r\n    // Performance settings\r\n    show: true, // Show immediately for debugging\r\n    paintWhenInitiallyHidden: false,\r\n    backgroundThrottling: false, // Keep app responsive when in background\r\n    \r\n    // Window behavior\r\n    autoHideMenuBar: false, // Keep menu bar visible for IDE functionality\r\n    fullscreenable: true,\r\n    maximizable: true,\r\n    minimizable: true,\r\n    resizable: true,\r\n    \r\n    // Icon (will be added later)\r\n    // icon: path.join(__dirname, '../assets/icon.png'),\r\n    \r\n    // Development\r\n    ...(process.env.NODE_ENV === 'development' && {\r\n      webPreferences: {\r\n        ...BrowserWindow.prototype.webPreferences,\r\n        devTools: true,\r\n      }\r\n    })\r\n  });\r\n\r\n  // Window event handlers\r\n  window.once('ready-to-show', () => {\r\n    console.log('\uD83E\uDE9F Window ready to show');\r\n    window.show();\r\n    \r\n    // Focus the window\r\n    if (process.env.NODE_ENV === 'development') {\r\n      window.focus();\r\n    }\r\n  });\r\n\r\n  // Handle window closed\r\n  window.on('closed', () => {\r\n    console.log('\uD83E\uDE9F Window closed');\r\n  });\r\n\r\n  // Handle window state changes\r\n  window.on('maximize', () => {\r\n    console.log('\uD83E\uDE9F Window maximized');\r\n  });\r\n\r\n  window.on('unmaximize', () => {\r\n    console.log('\uD83E\uDE9F Window unmaximized');\r\n  });\r\n\r\n  window.on('minimize', () => {\r\n    console.log('\uD83E\uDE9F Window minimized');\r\n  });\r\n\r\n  window.on('restore', () => {\r\n    console.log('\uD83E\uDE9F Window restored');\r\n  });\r\n\r\n  // Handle window focus\r\n  window.on('focus', () => {\r\n    // Window gained focus\r\n  });\r\n\r\n  window.on('blur', () => {\r\n    // Window lost focus\r\n  });\r\n\r\n  // Prevent navigation to external URLs\r\n  window.webContents.on('will-navigate', (event: any, navigationUrl: string) => {\r\n    const parsedUrl = new URL(navigationUrl);\r\n    \r\n    // Allow localhost navigation for development\r\n    if (parsedUrl.protocol === 'http:' && parsedUrl.hostname === 'localhost') {\r\n      return; // Allow localhost development server\r\n    }\r\n    \r\n    // Allow file protocol for loading local app files\r\n    if (parsedUrl.protocol === 'file:') {\r\n      // Only allow navigation to files within our app directory\r\n      const projectRoot = path.resolve(__dirname, '../../../');\r\n      const normalizedNavUrl = path.normalize(navigationUrl.replace('file:///', '').replace(/\\//g, path.sep));\r\n      const normalizedProjectRoot = path.normalize(projectRoot);\r\n      \r\n      if (normalizedNavUrl.startsWith(normalizedProjectRoot)) {\r\n        return; // Allow navigation to files within project\r\n      }\r\n    }\r\n    \r\n    // Block all other navigation attempts\r\n    console.warn('\uD83D\uDEAB Blocked navigation to external URL:', navigationUrl);\r\n    event.preventDefault();\r\n  });\r\n\r\n  // Prevent new window creation\r\n  window.webContents.setWindowOpenHandler(({ url }: { url: string }) => {\r\n    console.warn('\uD83D\uDEAB Blocked attempt to open new window:', url);\r\n    return { action: 'deny' };\r\n  });\r\n\r\n  // Handle console messages from renderer\r\n  window.webContents.on('console-message', (event: any, level: string, message: string, line: number, sourceId: string) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`Renderer [${level}]:`, message);\r\n    }\r\n  });\r\n\r\n  // Handle crashes\r\n  window.webContents.on('crashed', (event: any, killed: boolean) => {\r\n    console.error('\uD83D\uDCA5 Renderer process crashed:', { killed });\r\n    \r\n    // Optionally reload the window\r\n    if (!killed) {\r\n      window.reload();\r\n    }\r\n  });\r\n\r\n  // Handle unresponsive renderer\r\n  window.webContents.on('unresponsive', () => {\r\n    console.warn('\u26A0\uFE0F Renderer process became unresponsive');\r\n  });\r\n\r\n  window.webContents.on('responsive', () => {\r\n    console.log('\u2705 Renderer process became responsive again');\r\n  });\r\n\r\n  // Save window state for restoration\r\n  window.on('resize', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  window.on('move', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  // Restore previous window state if available\r\n  restoreWindowState(window);\r\n\r\n  return window;\r\n}\r\n\r\n// Helper functions for window state management\r\nfunction saveWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const bounds = window.getBounds();\r\n    const state = {\r\n      x: bounds.x,\r\n      y: bounds.y,\r\n      width: bounds.width,\r\n      height: bounds.height,\r\n      isMaximized: window.isMaximized(),\r\n      isFullScreen: window.isFullScreen(),\r\n    };\r\n    \r\n    // Save to user data (will be implemented with proper storage later)\r\n    // For now, just store in memory\r\n    (global as any).windowState = state;\r\n  } catch (error) {\r\n    console.error('Failed to save window state:', error);\r\n  }\r\n}\r\n\r\nfunction restoreWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const state = (global as any).windowState;\r\n    if (state) {\r\n      // Validate state bounds are within current screen\r\n      const { workArea } = screen.getPrimaryDisplay();\r\n      \r\n      if (state.x >= workArea.x && state.x < workArea.x + workArea.width &&\r\n          state.y >= workArea.y && state.y < workArea.y + workArea.height) {\r\n        window.setBounds({\r\n          x: state.x,\r\n          y: state.y,\r\n          width: Math.min(state.width, workArea.width),\r\n          height: Math.min(state.height, workArea.height)\r\n        });\r\n      }\r\n      \r\n      if (state.isMaximized) {\r\n        window.maximize();\r\n      }\r\n      \r\n      if (state.isFullScreen) {\r\n        window.setFullScreen(true);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to restore window state:', error);\r\n  }\r\n} ", "import { ipcMain, IpcMainInvokeEvent } from 'electron';\r\nimport { getDatabase, getRawDatabase, checkDatabaseHealth } from '../database/connection';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { tanukiApp } from '../main';\r\n\r\n// Define IPC channel types for type safety\r\nexport interface IPCChannels {\r\n  // Database operations\r\n  'db:query': { params: [string, any[]?]; result: any };\r\n  'db:health': { params: []; result: { isHealthy: boolean; details: any } };\r\n  \r\n  // Application state\r\n  'app:getVersion': { params: []; result: string };\r\n  'app:getPath': { params: [string]; result: string };\r\n  \r\n  // Settings management\r\n  'settings:get': { params: [string]; result: any };\r\n  'settings:set': { params: [string, any]; result: void };\r\n  'settings:getAll': { params: []; result: any[] };\r\n  \r\n  // Chat session management\r\n  'chat:createSession': { params: [any]; result: any };\r\n  'chat:getSession': { params: [string]; result: any };\r\n  'chat:updateSession': { params: [string, any]; result: any };\r\n  'chat:deleteSession': { params: [string]; result: void };\r\n  'chat:listSessions': { params: []; result: any[] };\r\n  \r\n  // File system operations (placeholder for Phase 3)\r\n  'fs:readFile': { params: [string]; result: string | null };\r\n  'fs:writeFile': { params: [string, string]; result: void };\r\n  'fs:exists': { params: [string]; result: boolean };\r\n  \r\n  // Phase 2: LLM and Model Management (OpenRouter only)\r\n  'openrouter:listModels': { params: []; result: any[] };\r\n  'openrouter:generate': { params: [any]; result: any };\r\n  'openrouter:checkHealth': { params: []; result: boolean };\r\n  \r\n  'system:getCapabilities': { params: []; result: any };\r\n  'system:getCurrentMetrics': { params: []; result: any };\r\n  \r\n  'models:getRecommendations': { params: []; result: any[] };\r\n  'models:getInstallationStatus': { params: [string]; result: any };\r\n  \r\n  'optimization:getProfiles': { params: []; result: any[] };\r\n  'optimization:getActiveProfile': { params: []; result: any };\r\n  'optimization:setProfile': { params: [string]; result: void };\r\n  \r\n  // Enhanced LLM operations\r\n  'enhancedLLM:processRequest': { params: [any]; result: any };\r\n  'enhancedLLM:getStatus': { params: []; result: any };\r\n  'enhancedLLM:testTier': { params: [number]; result: any };\r\n  \r\n  // MCP Hub operations\r\n  'mcpHub:listServers': { params: []; result: any[] };\r\n  'mcpHub:connectServer': { params: [string]; result: void };\r\n  'mcpHub:disconnectServer': { params: [string]; result: void };\r\n  'mcpHub:executeCommand': { params: [string, string, any]; result: any };\r\n  'optimization:optimizeForHardware': { params: [any]; result: any };\r\n  \r\n  'parameters:getPreset': { params: [string]; result: any };\r\n  'parameters:getAllPresets': { params: []; result: any };\r\n  'parameters:optimizeForTask': { params: [string, string]; result: any };\r\n  \r\n  'context:store': { params: [string, string, string, string, number?]; result: void };\r\n  'context:retrieve': { params: [string, string, number?]; result: any[] };\r\n  'context:optimize': { params: [string]; result: void };\r\n}\r\n\r\nexport function setupIPC(): void {\r\n  console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n  \r\n  // Phase 1: Essential handlers\r\n  setupDatabaseHandlers();\r\n  setupAppHandlers(); \r\n  setupSettingsHandlers();\r\n  \r\n  // Chat session handlers\r\n  setupChatHandlers();\r\n  \r\n  // File system handlers (basic implementation for Phase 1)\r\n  setupFileSystemHandlers();\r\n  \r\n  // Phase 2: LLM and Model Management handlers\r\n  setupLLMHandlers();\r\n  \r\n  // Window control handlers\r\n  setupWindowControlHandlers();\r\n  \r\n  console.log('\u2705 IPC handlers registered');\r\n}\r\n\r\nfunction setupDatabaseHandlers(): void {\r\n  // Generic database query handler (with caution)\r\n  ipcMain.handle('db:query', async (event: IpcMainInvokeEvent, query: string, params?: any[]) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Basic safety check - only allow SELECT, INSERT, UPDATE for now\r\n      const queryType = query.trim().toUpperCase().split(' ')[0];\r\n      if (!['SELECT', 'INSERT', 'UPDATE', 'DELETE'].includes(queryType)) {\r\n        throw new Error(`Query type ${queryType} not allowed`);\r\n      }\r\n      \r\n      if (params) {\r\n        return db.prepare(query).all(params);\r\n      } else {\r\n        return db.prepare(query).all();\r\n      }\r\n    } catch (error) {\r\n      console.error('Database query failed:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Database health check\r\n  ipcMain.handle('db:health', async () => {\r\n    return checkDatabaseHealth();\r\n  });\r\n}\r\n\r\nfunction setupAppHandlers(): void {\r\n  // Get application version\r\n  ipcMain.handle('app:getVersion', () => {\r\n    return process.env.npm_package_version || '1.0.0';\r\n  });\r\n  \r\n  // Get application paths\r\n  ipcMain.handle('app:getPath', async (event: IpcMainInvokeEvent, name: string) => {\r\n    const { app } = require('electron');\r\n    \r\n    try {\r\n      return app.getPath(name as any);\r\n    } catch (error) {\r\n      console.error(`Failed to get path for ${name}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupSettingsHandlers(): void {\r\n  // Get setting value\r\n  ipcMain.handle('settings:get', async (event: IpcMainInvokeEvent, key: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const result = db.prepare('SELECT value FROM settings WHERE key = ?').get(key) as { value: string } | undefined;\r\n      \r\n      if (result) {\r\n        return JSON.parse(result.value);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Failed to get setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Set setting value\r\n  ipcMain.handle('settings:set', async (event: IpcMainInvokeEvent, key: string, value: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const stmt = db.prepare(`\r\n        INSERT OR REPLACE INTO settings (key, value, updated)\r\n        VALUES (?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(key, JSON.stringify(value), Date.now());\r\n    } catch (error) {\r\n      console.error(`Failed to set setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get all settings\r\n  ipcMain.handle('settings:getAll', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const results = db.prepare('SELECT * FROM settings').all() as any[];\r\n      \r\n      return results.map(row => ({\r\n        ...row,\r\n        value: JSON.parse(row.value)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to get all settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupChatHandlers(): void {\r\n  // Create new chat session\r\n  ipcMain.handle('chat:createSession', async (event: IpcMainInvokeEvent, sessionData: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const id = uuidv4();\r\n      const now = Date.now();\r\n      \r\n      const stmt = db.prepare(`\r\n        INSERT INTO chat_sessions (\r\n          id, title, description, created, updated, subject_mode\r\n        ) VALUES (?, ?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(\r\n        id,\r\n        sessionData.title || 'New Chat',\r\n        sessionData.description || null,\r\n        now,\r\n        now,\r\n        sessionData.subjectMode || 'general'\r\n      );\r\n      \r\n      return {\r\n        id,\r\n        title: sessionData.title || 'New Chat',\r\n        description: sessionData.description || null,\r\n        created: now,\r\n        updated: now,\r\n        subjectMode: sessionData.subjectMode || 'general',\r\n        messageCount: 0,\r\n        isArchived: false,\r\n        isFavorite: false\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to create chat session:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get chat session\r\n  ipcMain.handle('chat:getSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const session = db.prepare('SELECT * FROM chat_sessions WHERE id = ?').get(sessionId);\r\n      \r\n      if (!session) {\r\n        throw new Error(`Chat session ${sessionId} not found`);\r\n      }\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error(`Failed to get chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Update chat session\r\n  ipcMain.handle('chat:updateSession', async (event: IpcMainInvokeEvent, sessionId: string, updates: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const updateFields: string[] = [];\r\n      const updateValues: any[] = [];\r\n      \r\n      // Build dynamic update query\r\n      if (updates.title !== undefined) {\r\n        updateFields.push('title = ?');\r\n        updateValues.push(updates.title);\r\n      }\r\n      if (updates.description !== undefined) {\r\n        updateFields.push('description = ?');\r\n        updateValues.push(updates.description);\r\n      }\r\n      if (updates.isArchived !== undefined) {\r\n        updateFields.push('is_archived = ?');\r\n        updateValues.push(updates.isArchived ? 1 : 0);\r\n      }\r\n      if (updates.isFavorite !== undefined) {\r\n        updateFields.push('is_favorite = ?');\r\n        updateValues.push(updates.isFavorite ? 1 : 0);\r\n      }\r\n      \r\n      if (updateFields.length > 0) {\r\n        updateFields.push('updated = ?');\r\n        updateValues.push(Date.now());\r\n        updateValues.push(sessionId);\r\n        \r\n        const query = `UPDATE chat_sessions SET ${updateFields.join(', ')} WHERE id = ?`;\r\n        const stmt = db.prepare(query);\r\n        stmt.run(...updateValues);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to update chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Delete chat session\r\n  ipcMain.handle('chat:deleteSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Delete session and all related data (cascading deletes handled by foreign keys)\r\n      db.prepare('DELETE FROM chat_sessions WHERE id = ?').run(sessionId);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to delete chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // List chat sessions\r\n  ipcMain.handle('chat:listSessions', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const sessions = db.prepare(`\r\n        SELECT * FROM chat_sessions \r\n        ORDER BY updated DESC\r\n      `).all();\r\n      \r\n      return sessions;\r\n    } catch (error) {\r\n      console.error('Failed to list chat sessions:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupFileSystemHandlers(): void {\r\n  // Get workspace files\r\n  ipcMain.handle('filesystem:getWorkspaceFiles', async (event: IpcMainInvokeEvent, rootPath?: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      // Use provided rootPath or default to the current working directory\r\n      const workspacePath = rootPath || process.cwd();\r\n      \r\n      async function getFiles(dirPath: string, basePath: string = workspacePath): Promise<any[]> {\r\n        const items: any[] = [];\r\n        \r\n        try {\r\n          const entries = await fs.readdir(dirPath, { withFileTypes: true });\r\n          \r\n          for (const entry of entries) {\r\n            // Skip hidden files and node_modules\r\n            if (entry.name.startsWith('.') || entry.name === 'node_modules') {\r\n              continue;\r\n            }\r\n            \r\n            const fullPath = path.join(dirPath, entry.name);\r\n            const relativePath = path.relative(basePath, fullPath);\r\n            \r\n            const item = {\r\n              name: entry.name,\r\n              path: fullPath,\r\n              relativePath: relativePath || entry.name,\r\n              type: entry.isDirectory() ? 'directory' : 'file',\r\n              children: undefined as any[] | undefined\r\n            };\r\n            \r\n            // For directories, recursively get children (limit depth to avoid performance issues)\r\n            if (entry.isDirectory() && relativePath.split(path.sep).length < 3) {\r\n              try {\r\n                item.children = await getFiles(fullPath, basePath);\r\n              } catch (error) {\r\n                // Skip directories we can't read\r\n                console.warn(`Cannot read directory ${fullPath}:`, error);\r\n                item.children = [];\r\n              }\r\n            }\r\n            \r\n            items.push(item);\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error reading directory ${dirPath}:`, error);\r\n        }\r\n        \r\n        return items.sort((a, b) => {\r\n          // Directories first, then files, both alphabetically\r\n          if (a.type === 'directory' && b.type === 'file') return -1;\r\n          if (a.type === 'file' && b.type === 'directory') return 1;\r\n          return a.name.localeCompare(b.name);\r\n        });\r\n      }\r\n      \r\n      const files = await getFiles(workspacePath);\r\n      console.log(`\uD83D\uDCC1 Retrieved ${files.length} workspace files from ${workspacePath}`);\r\n      return files;\r\n      \r\n    } catch (error) {\r\n      console.error('Error getting workspace files:', error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Read file with content\r\n  ipcMain.handle('fs:readFileContent', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      // Security: resolve path relative to current working directory\r\n      const fullPath = path.resolve(process.cwd(), filePath);\r\n      \r\n      // Security: ensure file is within the workspace\r\n      if (!fullPath.startsWith(process.cwd())) {\r\n        throw new Error('Access denied: file outside workspace');\r\n      }\r\n      \r\n      const content = await fs.readFile(fullPath, 'utf8');\r\n      console.log(`\uD83D\uDCC1 Read file: ${filePath}`);\r\n      return content;\r\n    } catch (error) {\r\n      console.error(`Failed to read file ${filePath}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Write file with content\r\n  ipcMain.handle('fs:writeFileContent', async (event: IpcMainInvokeEvent, filePath: string, content: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      const fullPath = path.resolve(process.cwd(), filePath);\r\n      \r\n      // Security check\r\n      if (!fullPath.startsWith(process.cwd())) {\r\n        throw new Error('Access denied: file outside workspace');\r\n      }\r\n      \r\n      // Ensure directory exists\r\n      await fs.mkdir(path.dirname(fullPath), { recursive: true });\r\n      await fs.writeFile(fullPath, content, 'utf8');\r\n      console.log(`\uD83D\uDCC1 Wrote file: ${filePath}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to write file ${filePath}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Create directory\r\n  ipcMain.handle('fs:createDirectory', async (event: IpcMainInvokeEvent, dirPath: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      const fullPath = path.resolve(process.cwd(), dirPath);\r\n      \r\n      if (!fullPath.startsWith(process.cwd())) {\r\n        throw new Error('Access denied: directory outside workspace');\r\n      }\r\n      \r\n      await fs.mkdir(fullPath, { recursive: true });\r\n      console.log(`\uD83D\uDCC1 Created directory: ${dirPath}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to create directory ${dirPath}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Delete file\r\n  ipcMain.handle('fs:deleteFile', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      const fullPath = path.resolve(process.cwd(), filePath);\r\n      \r\n      if (!fullPath.startsWith(process.cwd())) {\r\n        throw new Error('Access denied: file outside workspace');\r\n      }\r\n      \r\n      await fs.unlink(fullPath);\r\n      console.log(`\uD83D\uDCC1 Deleted file: ${filePath}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to delete file ${filePath}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Delete directory\r\n  ipcMain.handle('fs:deleteDirectory', async (event: IpcMainInvokeEvent, dirPath: string) => {\r\n    try {\r\n      const fs = require('fs').promises;\r\n      const path = require('path');\r\n      \r\n      const fullPath = path.resolve(process.cwd(), dirPath);\r\n      \r\n      if (!fullPath.startsWith(process.cwd())) {\r\n        throw new Error('Access denied: directory outside workspace');\r\n      }\r\n      \r\n      await fs.rmdir(fullPath, { recursive: true });\r\n      console.log(`\uD83D\uDCC1 Deleted directory: ${dirPath}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to delete directory ${dirPath}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  // Basic file system operations (placeholder for Phase 3)\r\n  \r\n  // Read file (placeholder)\r\n  ipcMain.handle('fs:readFile', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Read file: ${filePath}`);\r\n    return null;\r\n  });\r\n  \r\n  // Write file (placeholder)\r\n  ipcMain.handle('fs:writeFile', async (event: IpcMainInvokeEvent, filePath: string, content: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Write file: ${filePath}`);\r\n    return true;\r\n  });\r\n  \r\n  // Check if file exists (placeholder)\r\n  ipcMain.handle('fs:exists', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Check file exists: ${filePath}`);\r\n    return false;\r\n  });\r\n}\r\n\r\n// Error handling wrapper for IPC handlers\r\nfunction handleIPC<T extends keyof IPCChannels>(\r\n  channel: T,\r\n  handler: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<IPCChannels[T]['result']>\r\n): void {\r\n  ipcMain.handle(channel, async (event: IpcMainInvokeEvent, ...args: any[]) => {\r\n    try {\r\n      return await handler(event, ...args);\r\n    } catch (error) {\r\n      console.error(`IPC Error in ${channel}:`, error);\r\n      \r\n      // Return structured error for renderer to handle\r\n      return {\r\n        error: true,\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupLLMHandlers(): void {\r\n  // OpenRouter service handlers (free models only)\r\n  ipcMain.handle('openrouter:checkHealth', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.checkHealth();\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:getAvailableModels', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getAvailableFreeModels();\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:generate', async (event: IpcMainInvokeEvent, request: any) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.generate(request);\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:getRecommendations', async (event: IpcMainInvokeEvent, taskType: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getModelRecommendations(taskType as any);\r\n  });\r\n\r\n  ipcMain.handle('openrouter:getBestModel', async (event: IpcMainInvokeEvent, taskType: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getBestFreeModelForTask(taskType as any);\r\n  });\r\n\r\n  ipcMain.handle('openrouter:getModelInfo', async (event: IpcMainInvokeEvent, modelId: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return services.openrouter.getModelInfo(modelId);\r\n  });\r\n\r\n  // OpenRouter API key management\r\n  ipcMain.handle('openrouter:updateApiKey', async (event: IpcMainInvokeEvent, apiKey: string) => {\r\n    const services = tanukiApp.getServices();\r\n    // Update the API key in the service\r\n    services.openrouter.setApiKey(apiKey);\r\n    return { success: true };\r\n  });\r\n\r\n  // Storage handlers for secure API key storage\r\n  ipcMain.handle('storage:get', async (event: IpcMainInvokeEvent, key: string) => {\r\n    try {\r\n      const { app } = require('electron');\r\n      const path = require('path');\r\n      const fs = require('fs').promises;\r\n      \r\n      const userDataPath = app.getPath('userData');\r\n      const storageFile = path.join(userDataPath, 'secure-storage.json');\r\n      \r\n      try {\r\n        const data = await fs.readFile(storageFile, 'utf8');\r\n        const storage = JSON.parse(data);\r\n        return storage[key] || null;\r\n      } catch (error) {\r\n        // File doesn't exist or is invalid\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Storage get error:', error);\r\n      return null;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('storage:set', async (event: IpcMainInvokeEvent, key: string, value: any) => {\r\n    try {\r\n      const { app } = require('electron');\r\n      const path = require('path');\r\n      const fs = require('fs').promises;\r\n      \r\n      const userDataPath = app.getPath('userData');\r\n      const storageFile = path.join(userDataPath, 'secure-storage.json');\r\n      \r\n      let storage: Record<string, any> = {};\r\n      try {\r\n        const data = await fs.readFile(storageFile, 'utf8');\r\n        storage = JSON.parse(data);\r\n      } catch (error) {\r\n        // File doesn't exist, start with empty object\r\n      }\r\n      \r\n      storage[key] = value;\r\n      await fs.writeFile(storageFile, JSON.stringify(storage, null, 2));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Storage set error:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('storage:remove', async (event: IpcMainInvokeEvent, key: string) => {\r\n    try {\r\n      const { app } = require('electron');\r\n      const path = require('path');\r\n      const fs = require('fs').promises;\r\n      \r\n      const userDataPath = app.getPath('userData');\r\n      const storageFile = path.join(userDataPath, 'secure-storage.json');\r\n      \r\n      try {\r\n        const data = await fs.readFile(storageFile, 'utf8');\r\n        const storage = JSON.parse(data);\r\n        delete storage[key];\r\n        await fs.writeFile(storageFile, JSON.stringify(storage, null, 2));\r\n      } catch (error) {\r\n        // File doesn't exist, nothing to remove\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Storage remove error:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  // OpenRouter handlers\r\n  ipcMain.handle('openrouter:listModels', async () => {\r\n    try {\r\n      // Implementation for OpenRouter model listing\r\n      return [];\r\n    } catch (error) {\r\n      console.error('OpenRouter list models error:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupWindowControlHandlers(): void {\r\n  const { BrowserWindow, ipcMain } = require('electron');\r\n  \r\n  // Minimize window\r\n  ipcMain.on('minimize-window', (event: Electron.IpcMainEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    if (win) {\r\n      win.minimize();\r\n    }\r\n  });\r\n  \r\n  // Maximize window\r\n  ipcMain.on('maximize-window', (event: Electron.IpcMainEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    if (win) {\r\n      if (win.isMaximized()) {\r\n        win.unmaximize();\r\n      } else {\r\n        win.maximize();\r\n      }\r\n      // Notify the renderer of the maximized state change\r\n      event.sender.send('window-maximized-change', win.isMaximized());\r\n    }\r\n  });\r\n  \r\n  // Close window\r\n  ipcMain.on('close-window', (event: Electron.IpcMainEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    if (win) {\r\n      win.close();\r\n    }\r\n  });\r\n  \r\n  // Toggle fullscreen\r\n  ipcMain.on('toggle-fullscreen', (event: Electron.IpcMainEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    if (win) {\r\n      win.setFullScreen(!win.isFullScreen());\r\n    }\r\n  });\r\n  \r\n  // Check if window is maximized\r\n  ipcMain.handle('window:isMaximized', (event: Electron.IpcMainInvokeEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    return win ? win.isMaximized() : false;\r\n  });\r\n  \r\n  // Check if window is in fullscreen\r\n  ipcMain.handle('window:isFullScreen', (event: Electron.IpcMainInvokeEvent) => {\r\n    const win = BrowserWindow.fromWebContents(event.sender);\r\n    return win ? win.isFullScreen() : false;\r\n  });\r\n  \r\n  // Set up event listeners for window state changes\r\n  const allWindows = BrowserWindow.getAllWindows();\r\n  allWindows.forEach((win: Electron.BrowserWindow) => {\r\n    win.on('maximize', () => {\r\n      win.webContents.send('window-maximized-change', true);\r\n    });\r\n    \r\n    win.on('unmaximize', () => {\r\n      win.webContents.send('window-maximized-change', false);\r\n    });\r\n    \r\n    win.on('enter-full-screen', () => {\r\n      win.webContents.send('window-fullscreen-change', true);\r\n    });\r\n    \r\n    win.on('leave-full-screen', () => {\r\n      win.webContents.send('window-fullscreen-change', false);\r\n    });\r\n  });\r\n}\r\n\r\n// Clean up IPC handlers on app shutdown\r\nexport function cleanupIPC(): void {\r\n  // Remove all IPC handlers\r\n  ipcMain.removeAllListeners();\r\n  console.log('\uD83D\uDD0C IPC handlers cleaned up');\r\n} ", "import Database from 'better-sqlite3';\r\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\r\nimport { migrate } from 'drizzle-orm/better-sqlite3/migrator';\r\nimport path from 'path';\r\nimport { app } from 'electron';\r\nimport * as schema from './schema';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nlet db: ReturnType<typeof drizzle>;\r\nlet sqlite: Database.Database;\r\n\r\nexport async function initializeDatabase(): Promise<void> {\r\n  try {\r\n    // Get database path in user data directory\r\n    const userDataPath = app.getPath('userData');\r\n    const dbPath = path.join(userDataPath, 'tanukimcp.db');\r\n    \r\n    console.log(`\uD83D\uDCCA Database path: ${dbPath}`);\r\n    \r\n    // Create SQLite connection\r\n    sqlite = new Database(dbPath);\r\n    \r\n    // Configure SQLite for optimal performance\r\n    configureDatabase(sqlite);\r\n    \r\n    // Create Drizzle instance\r\n    db = drizzle(sqlite, { schema });\r\n    \r\n    // Run migrations\r\n    console.log('\uD83D\uDD04 Running database migrations...');\r\n    await runMigrations();\r\n    \r\n    // Initialize default data\r\n    await initializeDefaultData();\r\n    \r\n    console.log('\u2705 Database initialized successfully');\r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction configureDatabase(sqlite: Database.Database): void {\r\n  // Enable WAL mode for better concurrency\r\n  sqlite.pragma('journal_mode = WAL');\r\n  \r\n  // Set synchronous mode for better performance while maintaining safety\r\n  sqlite.pragma('synchronous = NORMAL');\r\n  \r\n  // Increase cache size (1000 pages = ~4MB for default page size)\r\n  sqlite.pragma('cache_size = 1000000');\r\n  \r\n  // Enable foreign key constraints\r\n  sqlite.pragma('foreign_keys = ON');\r\n  \r\n  // Store temporary tables in memory for better performance\r\n  sqlite.pragma('temp_store = MEMORY');\r\n  \r\n  // Set busy timeout for concurrent access\r\n  sqlite.pragma('busy_timeout = 5000');\r\n  \r\n  // Optimize for performance\r\n  sqlite.pragma('optimize');\r\n  \r\n  console.log('\u2699\uFE0F Database configured with performance optimizations');\r\n}\r\n\r\nasync function runMigrations(): Promise<void> {\r\n  try {\r\n    // For now, we'll create the migrations directory structure\r\n    // In a real setup, we'd use drizzle-kit to generate migrations\r\n    const migrationsFolder = path.join(__dirname, '../../../drizzle');\r\n    \r\n    // Create basic tables if they don't exist (manual migration for Phase 1)\r\n    await createTablesIfNotExist();\r\n    \r\n    console.log('\u2705 Migrations completed');\r\n  } catch (error) {\r\n    console.error('\u274C Migration failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createTablesIfNotExist(): Promise<void> {\r\n  // This is a simplified migration approach for Phase 1\r\n  // In later phases, we'll use proper Drizzle migrations\r\n  \r\n  const tables = [\r\n    `CREATE TABLE IF NOT EXISTS projects (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      path TEXT NOT NULL,\r\n      description TEXT,\r\n      language TEXT,\r\n      framework TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      last_opened INTEGER,\r\n      is_active INTEGER DEFAULT 1,\r\n      settings TEXT\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_sessions (\r\n      id TEXT PRIMARY KEY,\r\n      project_id TEXT REFERENCES projects(id),\r\n      title TEXT NOT NULL,\r\n      description TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      is_archived INTEGER DEFAULT 0,\r\n      is_favorite INTEGER DEFAULT 0,\r\n      message_count INTEGER DEFAULT 0,\r\n      tags TEXT,\r\n      subject_mode TEXT DEFAULT 'general',\r\n      model_used TEXT,\r\n      total_tokens INTEGER DEFAULT 0,\r\n      execution_time_ms INTEGER DEFAULT 0\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_history (\r\n      id TEXT PRIMARY KEY,\r\n      session_id TEXT REFERENCES chat_sessions(id) ON DELETE CASCADE,\r\n      role TEXT NOT NULL,\r\n      content TEXT NOT NULL,\r\n      metadata TEXT,\r\n      timestamp INTEGER NOT NULL,\r\n      parent_message_id TEXT,\r\n      tools_used TEXT,\r\n      execution_time_ms INTEGER,\r\n      token_count INTEGER,\r\n      model TEXT,\r\n      temperature REAL,\r\n      complexity TEXT,\r\n      quality_score REAL\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS settings (\r\n      key TEXT PRIMARY KEY,\r\n      value TEXT NOT NULL,\r\n      category TEXT,\r\n      description TEXT,\r\n      is_user_configurable INTEGER DEFAULT 1,\r\n      updated INTEGER NOT NULL\r\n    )`\r\n  ];\r\n  \r\n  for (const tableSQL of tables) {\r\n    sqlite.exec(tableSQL);\r\n  }\r\n  \r\n  // Create indices for better performance\r\n  const indices = [\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_project_id ON chat_sessions(project_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_created ON chat_sessions(created)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_timestamp ON chat_history(timestamp)',\r\n    'CREATE INDEX IF NOT EXISTS idx_settings_category ON settings(category)'\r\n  ];\r\n  \r\n  for (const indexSQL of indices) {\r\n    sqlite.exec(indexSQL);\r\n  }\r\n}\r\n\r\nasync function initializeDefaultData(): Promise<void> {\r\n  try {\r\n    // Check if we have any existing data\r\n    const settingsCount = sqlite.prepare('SELECT COUNT(*) as count FROM settings').get() as { count: number };\r\n    \r\n    if (settingsCount.count === 0) {\r\n      console.log('\uD83D\uDD27 Initializing default settings...');\r\n      \r\n      const defaultSettings = [\r\n        {\r\n          key: 'app.theme',\r\n          value: JSON.stringify('dark'),\r\n          category: 'ui',\r\n          description: 'Application theme (light/dark)',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'app.version',\r\n          value: JSON.stringify('1.0.0'),\r\n          category: 'system',\r\n          description: 'Application version',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'models.default',\r\n          value: JSON.stringify(''),\r\n          category: 'models',\r\n          description: 'Default LLM model',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'performance.max_context_entries',\r\n          value: JSON.stringify(1000),\r\n          category: 'performance',\r\n          description: 'Maximum context entries to maintain',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'ui.show_welcome',\r\n          value: JSON.stringify(true),\r\n          category: 'ui',\r\n          description: 'Show welcome screen on startup',\r\n          updated: Date.now()\r\n        }\r\n      ];\r\n      \r\n      const insertSetting = sqlite.prepare(`\r\n        INSERT INTO settings (key, value, category, description, updated)\r\n        VALUES (?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      for (const setting of defaultSettings) {\r\n        insertSetting.run(\r\n          setting.key,\r\n          setting.value,\r\n          setting.category,\r\n          setting.description,\r\n          setting.updated\r\n        );\r\n      }\r\n      \r\n      console.log('\u2705 Default settings initialized');\r\n    }\r\n    \r\n    // Initialize default subject modes\r\n    await initializeDefaultSubjectModes();\r\n    \r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize default data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function initializeDefaultSubjectModes(): Promise<void> {\r\n  // Create subject_modes table if it doesn't exist\r\n  sqlite.exec(`\r\n    CREATE TABLE IF NOT EXISTS subject_modes (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      display_name TEXT NOT NULL,\r\n      description TEXT,\r\n      icon TEXT,\r\n      tools TEXT NOT NULL,\r\n      prompts TEXT,\r\n      system_prompt TEXT,\r\n      is_active INTEGER DEFAULT 1,\r\n      is_built_in INTEGER DEFAULT 0,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      usage_count INTEGER DEFAULT 0,\r\n      color TEXT,\r\n      shortcuts TEXT\r\n    )\r\n  `);\r\n  \r\n  // Check if subject modes already exist\r\n  const modesCount = sqlite.prepare('SELECT COUNT(*) as count FROM subject_modes').get() as { count: number };\r\n  \r\n  if (modesCount.count === 0) {\r\n    console.log('\uD83E\uDDE0 Initializing default subject modes...');\r\n    \r\n    const defaultModes = [\r\n      {\r\n        id: uuidv4(),\r\n        name: 'general',\r\n        displayName: 'General',\r\n        description: 'General purpose AI assistance',\r\n        icon: '\uD83D\uDCAC',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'create_todolist']),\r\n        systemPrompt: 'You are a helpful AI assistant. Be concise, accurate, and helpful.',\r\n        isBuiltIn: 1,\r\n        color: '#6366f1'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'programming',\r\n        displayName: 'Programming',\r\n        description: 'Code analysis, debugging, and development assistance',\r\n        icon: '\uD83D\uDCBB',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'analyze_code', 'generate_tests']),\r\n        systemPrompt: 'You are an expert programmer. Focus on code quality, best practices, and clear explanations.',\r\n        isBuiltIn: 1,\r\n        color: '#10b981'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'mathematics',\r\n        displayName: 'Mathematics',\r\n        description: 'Mathematical problem solving and analysis',\r\n        icon: '\uD83C\uDFAF',\r\n        tools: JSON.stringify(['solve_equation', 'plot_function', 'read_file', 'write_file']),\r\n        systemPrompt: 'You are a mathematics expert. Show step-by-step solutions and use mathematical notation when appropriate.',\r\n        isBuiltIn: 1,\r\n        color: '#f59e0b'\r\n      }\r\n    ];\r\n    \r\n    const insertMode = sqlite.prepare(`\r\n      INSERT INTO subject_modes (\r\n        id, name, display_name, description, icon, tools, system_prompt, \r\n        is_built_in, created, updated, color\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `);\r\n    \r\n    const now = Date.now();\r\n    for (const mode of defaultModes) {\r\n      insertMode.run(\r\n        mode.id,\r\n        mode.name,\r\n        mode.displayName,\r\n        mode.description,\r\n        mode.icon,\r\n        mode.tools,\r\n        mode.systemPrompt,\r\n        mode.isBuiltIn,\r\n        now,\r\n        now,\r\n        mode.color\r\n      );\r\n    }\r\n    \r\n    console.log('\u2705 Default subject modes initialized');\r\n  }\r\n}\r\n\r\nexport function getDatabase() {\r\n  if (!db) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return db;\r\n}\r\n\r\nexport function getRawDatabase(): Database.Database {\r\n  if (!sqlite) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return sqlite;\r\n}\r\n\r\n// Database health check\r\nexport function checkDatabaseHealth(): { isHealthy: boolean; details: any } {\r\n  try {\r\n    // Test basic database operations\r\n    const result = sqlite.prepare('SELECT 1 as test').get();\r\n    \r\n    // Get database size\r\n    const dbSize = sqlite.prepare(\"SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()\").get() as { size: number };\r\n    \r\n    // Get table count\r\n    const tableCount = sqlite.prepare(\"SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'\").get() as { count: number };\r\n    \r\n    return {\r\n      isHealthy: true,\r\n      details: {\r\n        testQuery: result,\r\n        databaseSize: dbSize.size,\r\n        tableCount: tableCount.count,\r\n        walMode: sqlite.pragma('journal_mode', { simple: true }),\r\n        foreignKeys: sqlite.pragma('foreign_keys', { simple: true })\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      isHealthy: false,\r\n      details: { error: error instanceof Error ? error.message : String(error) }\r\n    };\r\n  }\r\n}\r\n\r\n// Cleanup function for graceful shutdown\r\nexport function closeDatabase(): void {\r\n  if (sqlite) {\r\n    try {\r\n      sqlite.close();\r\n      console.log('\uD83D\uDCCA Database connection closed');\r\n    } catch (error) {\r\n      console.error('\u274C Error closing database:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Handle app shutdown\r\napp.on('before-quit', () => {\r\n  closeDatabase();\r\n}); ", "import { sqliteTable, text, integer, blob, real } from 'drizzle-orm/sqlite-core';\r\nimport { relations } from 'drizzle-orm';\r\n\r\n// Projects table for workspace management\r\nexport const projects = sqliteTable('projects', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  path: text('path').notNull(),\r\n  description: text('description'),\r\n  language: text('language'), // Primary programming language\r\n  framework: text('framework'), // Framework or platform\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastOpened: integer('last_opened', { mode: 'timestamp' }),\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  settings: blob('settings', { mode: 'json' }) // Project-specific settings\r\n});\r\n\r\n// Enhanced chat system with CRUD operations\r\nexport const chatSessions = sqliteTable('chat_sessions', {\r\n  id: text('id').primaryKey(),\r\n  projectId: text('project_id').references(() => projects.id),\r\n  title: text('title').notNull(),\r\n  description: text('description'),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  isArchived: integer('is_archived', { mode: 'boolean' }).default(false),\r\n  isFavorite: integer('is_favorite', { mode: 'boolean' }).default(false),\r\n  messageCount: integer('message_count').default(0),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  subjectMode: text('subject_mode').default('general'), // mathematics, programming, etc.\r\n  modelUsed: text('model_used'), // Which LLM model was primarily used\r\n  totalTokens: integer('total_tokens').default(0),\r\n  executionTime: integer('execution_time_ms').default(0)\r\n});\r\n\r\nexport const chatHistory = sqliteTable('chat_history', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  role: text('role').notNull(), // 'user' | 'assistant' | 'system' | 'tool'\r\n  content: text('content').notNull(),\r\n  metadata: blob('metadata', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  parentMessageId: text('parent_message_id'),\r\n  toolsUsed: blob('tools_used', { mode: 'json' }),\r\n  executionTime: integer('execution_time_ms'),\r\n  tokenCount: integer('token_count'),\r\n  model: text('model'), // Which model generated this message\r\n  temperature: real('temperature'), // Model parameters used\r\n  complexity: text('complexity'), // atomic | moderate | complex | expert\r\n  qualityScore: real('quality_score') // Quality assessment score\r\n});\r\n\r\n// Context management system for intelligent context handling\r\nexport const contextEntries = sqliteTable('context_entries', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  type: text('type').notNull(), // 'file', 'function', 'concept', 'memory', 'error', 'solution'\r\n  key: text('key').notNull(),\r\n  value: text('value').notNull(),\r\n  vectorEmbedding: blob('vector_embedding'), // For semantic search\r\n  importance: real('importance').default(1.0),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }).notNull(),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  source: text('source'), // Where this context came from\r\n  expiry: integer('expiry', { mode: 'timestamp' }), // When to auto-remove\r\n  compressed: integer('compressed', { mode: 'boolean' }).default(false)\r\n});\r\n\r\n// Workflow system for saving and reusing chat patterns\r\nexport const workflows = sqliteTable('workflows', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  category: text('category').notNull(), // 'project-management', 'code-generation', etc.\r\n  definition: blob('definition', { mode: 'json' }).notNull(), // LangChain workflow definition\r\n  variables: blob('variables', { mode: 'json' }).notNull(), // Required/optional variables\r\n  metadata: blob('metadata', { mode: 'json' }).notNull(), // Additional metadata\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isPublic: integer('is_public', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  createdBy: text('created_by'), // User/source identification\r\n  version: text('version').default('1.0.0'),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  estimatedTime: integer('estimated_time_ms'), // Expected execution time\r\n  successRate: real('success_rate'), // Historical success rate\r\n  usageCount: integer('usage_count').default(0)\r\n});\r\n\r\nexport const workflowExecutions = sqliteTable('workflow_executions', {\r\n  id: text('id').primaryKey(),\r\n  workflowId: text('workflow_id').references(() => workflows.id, { onDelete: 'cascade' }),\r\n  sessionId: text('session_id').references(() => chatSessions.id),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'pending' | 'running' | 'completed' | 'failed' | 'cancelled'\r\n  result: blob('result', { mode: 'json' }),\r\n  errorMessage: text('error_message'),\r\n  errorStack: text('error_stack'),\r\n  started: integer('started', { mode: 'timestamp' }).notNull(),\r\n  completed: integer('completed', { mode: 'timestamp' }),\r\n  executionTimeMs: integer('execution_time_ms'),\r\n  stepsCompleted: integer('steps_completed').default(0),\r\n  totalSteps: integer('total_steps'),\r\n  progress: real('progress').default(0.0) // 0.0 to 1.0\r\n});\r\n\r\n// MCP server management for external tool integration\r\nexport const mcpServers = sqliteTable('mcp_servers', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  transport: text('transport').notNull(), // 'stdio' | 'sse' | 'websocket'\r\n  config: blob('config', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'connected' | 'disconnected' | 'error' | 'unknown'\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastConnected: integer('last_connected', { mode: 'timestamp' }),\r\n  lastError: text('last_error'),\r\n  isAutoRestart: integer('is_auto_restart', { mode: 'boolean' }).default(true),\r\n  restartCount: integer('restart_count').default(0),\r\n  version: text('version'),\r\n  capabilities: blob('capabilities', { mode: 'json' }),\r\n  healthScore: real('health_score').default(1.0), // 0.0 to 1.0\r\n  responseTime: integer('response_time_ms'), // Average response time\r\n  uptime: integer('uptime_seconds').default(0)\r\n});\r\n\r\n// Model configurations and performance tracking\r\nexport const modelConfigurations = sqliteTable('model_configurations', {\r\n  id: text('id').primaryKey(),\r\n  modelName: text('model_name').notNull(),\r\n  displayName: text('display_name'),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  performance: blob('performance', { mode: 'json' }),\r\n  isDefault: integer('is_default', { mode: 'boolean' }).default(false),\r\n  isInstalled: integer('is_installed', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }),\r\n  usageCount: integer('usage_count').default(0),\r\n  averageTokensPerSecond: real('avg_tokens_per_second'),\r\n  averageResponseTime: integer('avg_response_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  diskSize: integer('disk_size_mb'),\r\n  downloadProgress: real('download_progress').default(0.0), // 0.0 to 1.0\r\n  lastBenchmark: integer('last_benchmark', { mode: 'timestamp' })\r\n});\r\n\r\n// Subject-specific tool configurations and modes\r\nexport const subjectModes = sqliteTable('subject_modes', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  displayName: text('display_name').notNull(),\r\n  description: text('description'),\r\n  icon: text('icon'), // Emoji or icon identifier\r\n  tools: blob('tools', { mode: 'json' }).notNull(), // Available tools in this mode\r\n  prompts: blob('prompts', { mode: 'json' }), // Mode-specific prompts\r\n  systemPrompt: text('system_prompt'), // Default system prompt for this mode\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isBuiltIn: integer('is_built_in', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  usageCount: integer('usage_count').default(0),\r\n  color: text('color'), // Theme color for UI\r\n  shortcuts: blob('shortcuts', { mode: 'json' }) // Keyboard shortcuts\r\n});\r\n\r\n// System settings and user preferences\r\nexport const settings = sqliteTable('settings', {\r\n  key: text('key').primaryKey(),\r\n  value: blob('value', { mode: 'json' }).notNull(),\r\n  category: text('category'), // 'ui', 'performance', 'models', etc.\r\n  description: text('description'),\r\n  isUserConfigurable: integer('is_user_configurable', { mode: 'boolean' }).default(true),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull()\r\n});\r\n\r\n// Performance and analytics tracking\r\nexport const analytics = sqliteTable('analytics', {\r\n  id: text('id').primaryKey(),\r\n  event: text('event').notNull(), // Event type\r\n  data: blob('data', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  sessionId: text('session_id'),\r\n  modelUsed: text('model_used'),\r\n  executionTime: integer('execution_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  cpuUsage: real('cpu_usage_percent'),\r\n  success: integer('success', { mode: 'boolean' })\r\n});\r\n\r\n// Define relationships\r\nexport const projectsRelations = relations(projects, ({ many }) => ({\r\n  chatSessions: many(chatSessions)\r\n}));\r\n\r\nexport const chatSessionsRelations = relations(chatSessions, ({ one, many }) => ({\r\n  project: one(projects, {\r\n    fields: [chatSessions.projectId],\r\n    references: [projects.id]\r\n  }),\r\n  messages: many(chatHistory),\r\n  contextEntries: many(contextEntries),\r\n  workflowExecutions: many(workflowExecutions)\r\n}));\r\n\r\nexport const chatHistoryRelations = relations(chatHistory, ({ one }) => ({\r\n  session: one(chatSessions, {\r\n    fields: [chatHistory.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\nexport const workflowsRelations = relations(workflows, ({ many }) => ({\r\n  executions: many(workflowExecutions)\r\n}));\r\n\r\nexport const workflowExecutionsRelations = relations(workflowExecutions, ({ one }) => ({\r\n  workflow: one(workflows, {\r\n    fields: [workflowExecutions.workflowId],\r\n    references: [workflows.id]\r\n  }),\r\n  session: one(chatSessions, {\r\n    fields: [workflowExecutions.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\n// Type exports for use in application\r\nexport type Project = typeof projects.$inferSelect;\r\nexport type NewProject = typeof projects.$inferInsert;\r\nexport type ChatSession = typeof chatSessions.$inferSelect;\r\nexport type NewChatSession = typeof chatSessions.$inferInsert;\r\nexport type ChatMessage = typeof chatHistory.$inferSelect;\r\nexport type NewChatMessage = typeof chatHistory.$inferInsert;\r\nexport type ContextEntry = typeof contextEntries.$inferSelect;\r\nexport type NewContextEntry = typeof contextEntries.$inferInsert;\r\nexport type Workflow = typeof workflows.$inferSelect;\r\nexport type NewWorkflow = typeof workflows.$inferInsert;\r\nexport type WorkflowExecution = typeof workflowExecutions.$inferSelect;\r\nexport type NewWorkflowExecution = typeof workflowExecutions.$inferInsert;\r\nexport type MCPServer = typeof mcpServers.$inferSelect;\r\nexport type NewMCPServer = typeof mcpServers.$inferInsert;\r\nexport type ModelConfiguration = typeof modelConfigurations.$inferSelect;\r\nexport type NewModelConfiguration = typeof modelConfigurations.$inferInsert;\r\nexport type SubjectMode = typeof subjectModes.$inferSelect;\r\nexport type NewSubjectMode = typeof subjectModes.$inferInsert;\r\nexport type Setting = typeof settings.$inferSelect;\r\nexport type NewSetting = typeof settings.$inferInsert; ", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "interface OpenRouterModel {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  pricing: {\r\n    prompt: number;\r\n    completion: number;\r\n  };\r\n  context_length: number;\r\n  architecture: {\r\n    modality: string;\r\n    tokenizer: string;\r\n    instruct_type?: string;\r\n  };\r\n  top_provider: {\r\n    max_completion_tokens?: number;\r\n    is_moderated: boolean;\r\n  };\r\n  per_request_limits?: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n  };\r\n}\r\n\r\ninterface FreeModelConfig {\r\n  id: string;\r\n  displayName: string;\r\n  description: string;\r\n  specialization: string[];\r\n  isAvailable: boolean;\r\n  rateLimits: {\r\n    requestsPerMinute: number;\r\n    tokensPerDay: number;\r\n  };\r\n}\r\n\r\nexport class OpenRouterService {\r\n  private baseUrl = 'https://openrouter.ai/api/v1';\r\n  private apiKey: string | null = null;\r\n  private freeModels: FreeModelConfig[] = [\r\n    {\r\n      id: 'meta-llama/llama-3.1-8b-instruct:free',\r\n      displayName: 'Llama 3.1 8B (Free)',\r\n      description: 'Fast and capable model for general conversation and reasoning',\r\n      specialization: ['conversation', 'reasoning', 'general'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 200000\r\n      }\r\n    },\r\n    {\r\n      id: 'google/gemma-2-9b-it:free',\r\n      displayName: 'Gemma 2 9B (Free)',\r\n      description: 'Google\\'s efficient model optimized for instruction following',\r\n      specialization: ['conversation', 'instruction-following', 'coding'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 200000\r\n      }\r\n    },\r\n    {\r\n      id: 'microsoft/phi-3-mini-128k-instruct:free',\r\n      displayName: 'Phi-3 Mini (Free)',\r\n      description: 'Compact yet powerful model from Microsoft, great for coding tasks',\r\n      specialization: ['coding', 'problem-solving', 'reasoning'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 15,\r\n        tokensPerDay: 100000\r\n      }\r\n    },\r\n    {\r\n      id: 'mistralai/mistral-7b-instruct:free',\r\n      displayName: 'Mistral 7B (Free)',\r\n      description: 'Balanced model with strong multilingual capabilities',\r\n      specialization: ['conversation', 'multilingual', 'creative-writing'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 150000\r\n      }\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    // API key is optional for free models, but improves rate limits when provided\r\n    this.apiKey = process.env.OPENROUTER_API_KEY || null;\r\n  }\r\n\r\n  setApiKey(apiKey: string): void {\r\n    this.apiKey = apiKey || null;\r\n  }\r\n\r\n  async checkHealth(): Promise<{\r\n    isConnected: boolean;\r\n    availableModels: FreeModelConfig[];\r\n    lastChecked: Date;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      const availableModels = await this.getAvailableFreeModels();\r\n      return {\r\n        isConnected: true,\r\n        availableModels,\r\n        lastChecked: new Date()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        isConnected: false,\r\n        availableModels: [],\r\n        lastChecked: new Date(),\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getAvailableFreeModels(): Promise<FreeModelConfig[]> {\r\n    try {\r\n      // For free models, we return our curated list\r\n      // In a real implementation, you might want to verify availability via API\r\n      return this.freeModels.filter(model => model.isAvailable);\r\n    } catch (error) {\r\n      console.error('Failed to get available free models:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Ensure model is a free model (used to enforce free-only approach)\r\n  ensureFreeModel(modelId: string): string {\r\n    // If the provided model ID is in our free model list, use it\r\n    const isFreeModel = this.freeModels.some(model => model.id === modelId);\r\n    \r\n    if (isFreeModel) {\r\n      return modelId;\r\n    }\r\n    \r\n    // If not a free model, return the default free model\r\n    console.log(`Warning: Non-free model requested (${modelId}). Using default free model instead.`);\r\n    return 'meta-llama/llama-3.1-8b-instruct:free';\r\n  }\r\n\r\n  async generate(request: {\r\n    model: string;\r\n    messages: Array<{ role: string; content: string }>;\r\n    temperature?: number;\r\n    max_tokens?: number;\r\n    stream?: boolean;\r\n  }): Promise<{\r\n    content: string;\r\n    usage: {\r\n      prompt_tokens: number;\r\n      completion_tokens: number;\r\n      total_tokens: number;\r\n    };\r\n  }> {\r\n    // Ensure we're only using free models\r\n    const model = this.ensureFreeModel(request.model);\r\n    \r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json',\r\n      'HTTP-Referer': 'https://tanukimcp.com',\r\n      'X-Title': 'TanukiMCP Atlas'\r\n    };\r\n\r\n    if (this.apiKey) {\r\n      headers['Authorization'] = `Bearer ${this.apiKey}`;\r\n    }\r\n\r\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: request.messages,\r\n        temperature: request.temperature || 0.7,\r\n        max_tokens: request.max_tokens || 1000,\r\n        stream: false // For simplicity, we'll start without streaming\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`OpenRouter API error: ${response.status} - ${errorData}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    return {\r\n      content: data.choices[0].message.content,\r\n      usage: data.usage\r\n    };\r\n  }\r\n\r\n  async getModelRecommendations(taskType: 'coding' | 'reasoning' | 'conversation' | 'creative' | 'general'): Promise<FreeModelConfig[]> {\r\n    const availableModels = await this.getAvailableFreeModels();\r\n    \r\n    return availableModels\r\n      .filter(model => model.specialization.includes(taskType) || model.specialization.includes('general'))\r\n      .sort((a, b) => {\r\n        // Prioritize models that specialize in the requested task\r\n        const aSpecific = a.specialization.includes(taskType) ? 1 : 0;\r\n        const bSpecific = b.specialization.includes(taskType) ? 1 : 0;\r\n        return bSpecific - aSpecific;\r\n      });\r\n  }\r\n\r\n  // Helper method to get the best free model for a task\r\n  async getBestFreeModelForTask(taskType: 'coding' | 'reasoning' | 'conversation' | 'creative' | 'general'): Promise<FreeModelConfig | null> {\r\n    const recommendations = await this.getModelRecommendations(taskType);\r\n    return recommendations.length > 0 ? recommendations[0] : null;\r\n  }\r\n\r\n  // Check if we have enough quota for a request (simplified implementation)\r\n  canMakeRequest(modelId: string, estimatedTokens: number): boolean {\r\n    // In a real implementation, this would track actual usage\r\n    // For now, we assume we can always make requests within reasonable limits\r\n    return estimatedTokens < 4000; // Conservative token limit per request\r\n  }\r\n\r\n  getModelInfo(modelId: string): FreeModelConfig | null {\r\n    return this.freeModels.find(model => model.id === modelId) || null;\r\n  }\r\n} ", "interface SystemInfo {\n  cpu: {\n    brand: string;\n    model: string;\n    cores: number;\n    threads: number;\n    clockSpeed: number;\n    architecture: string;\n    cache: {\n      l1d?: number;\n      l1i?: number;\n      l2?: number;\n      l3?: number;\n    };\n  };\n  memory: {\n    total: number;\n    available: number;\n    used: number;\n    type: string;\n    speed?: number;\n    slots: number;\n  };\n  gpu: {\n    name: string;\n    vendor: string;\n    vram: number;\n    driver?: string;\n    computeCapability?: string;\n    supports: string[];\n  }[];\n  storage: {\n    drives: {\n      name: string;\n      type: 'SSD' | 'HDD' | 'NVMe';\n      size: number;\n      available: number;\n      speed?: number;\n    }[];\n  };\n}interface PerformanceMetrics {\n  cpu: {\n    usage: number;\n    temperature?: number;\n    frequency: number;\n  };\n  memory: {\n    usage: number;\n    available: number;\n    cached: number;\n  };\n  gpu: {\n    usage: number;\n    memory: number;\n    temperature?: number;\n  }[];\n  disk: {\n    readSpeed: number;\n    writeSpeed: number;\n    usage: number;\n  };\n}\n\nexport class SystemMonitor {\n  private metricsCache = new Map<string, PerformanceMetrics>();\n  private lastUpdate = 0;\n  private updateInterval = 5000; // 5 seconds\n\n  async getSystemInfo(): Promise<SystemInfo> {\n    const os = require('os');\n    const { execSync } = require('child_process');\n    \n    // CPU Information\n    const cpus = os.cpus();\n    const cpu = {\n      brand: this.getCPUBrand(),\n      model: cpus[0]?.model || 'Unknown',\n      cores: cpus.length,\n      threads: cpus.length, // Simplified\n      clockSpeed: cpus[0]?.speed || 0,\n      architecture: os.arch(),\n      cache: await this.getCPUCache()\n    };\n    \n    // Memory Information\n    const memory = {\n      total: Math.round(os.totalmem() / (1024 ** 3)),\n      available: Math.round(os.freemem() / (1024 ** 3)),\n      used: Math.round((os.totalmem() - os.freemem()) / (1024 ** 3)),\n      type: await this.getMemoryType(),\n      speed: await this.getMemorySpeed(),\n      slots: await this.getMemorySlots()\n    };\n    \n    return {\n      cpu,\n      memory,\n      gpu: await this.detectGPUs(),\n      storage: await this.getStorageInfo()\n    };\n  }\n\n  private getCPUBrand(): string {\n    const os = require('os');\n    const cpus = os.cpus();\n    if (cpus[0]?.model.includes('Intel')) return 'Intel';\n    if (cpus[0]?.model.includes('AMD')) return 'AMD';\n    return 'Unknown';\n  }\n\n  private async getCPUCache(): Promise<any> {\n    // Platform-specific cache detection would go here\n    return {\n      l1d: undefined,\n      l1i: undefined,\n      l2: undefined,\n      l3: undefined\n    };\n  }\n\n  private async getMemoryType(): Promise<string> {\n    // Memory type detection (DDR4, DDR5, etc.)\n    return 'DDR4'; // Simplified\n  }\n\n  private async getMemorySpeed(): Promise<number | undefined> {\n    // Memory speed detection\n    return undefined;\n  }\n\n  private async getMemorySlots(): Promise<number> {\n    // Memory slot detection\n    return 4; // Simplified\n  }\n\n  private async detectGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      \n      if (process.platform === 'win32') {\n        return await this.detectWindowsGPUs();\n      } else if (process.platform === 'linux') {\n        return await this.detectLinuxGPUs();\n      } else if (process.platform === 'darwin') {\n        return await this.detectMacGPUs();\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('GPU detection failed:', error);\n      return [];\n    }\n  }\n\n  private async detectWindowsGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      // Use wmic to get GPU information\n      const output = execSync('wmic path win32_VideoController get name,AdapterRAM', { encoding: 'utf8' });\n      // Parse output and return GPU info\n      return [];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async detectLinuxGPUs(): Promise<any[]> {\n    // Linux GPU detection using lspci, nvidia-smi, etc.\n    return [];\n  }\n\n  private async detectMacGPUs(): Promise<any[]> {\n    // macOS GPU detection using system_profiler\n    return [];\n  }\n\n  private async getStorageInfo(): Promise<any> {\n    const os = require('os');\n    \n    return {\n      drives: [{\n        name: 'Primary Drive',\n        type: 'SSD' as const,\n        size: 500, // GB - simplified\n        available: 250,\n        speed: undefined\n      }]\n    };\n  }\n\n  async getCurrentMetrics(): Promise<PerformanceMetrics> {\n    const now = Date.now();\n    \n    if (now - this.lastUpdate < this.updateInterval) {\n      return this.metricsCache.get('current') || this.getDefaultMetrics();\n    }\n    \n    const metrics = await this.collectMetrics();\n    this.metricsCache.set('current', metrics);\n    this.lastUpdate = now;\n    \n    return metrics;\n  }\n\n  private async collectMetrics(): Promise<PerformanceMetrics> {\n    const os = require('os');\n    \n    return {\n      cpu: {\n        usage: await this.getCPUUsage(),\n        temperature: undefined,\n        frequency: os.cpus()[0]?.speed || 0\n      },\n      memory: {\n        usage: Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100),\n        available: Math.round(os.freemem() / (1024 ** 3)),\n        cached: 0\n      },\n      gpu: [],\n      disk: {\n        readSpeed: 0,\n        writeSpeed: 0,\n        usage: 0\n      }\n    };\n  }\n\n  private async getCPUUsage(): Promise<number> {\n    // CPU usage calculation\n    return Math.random() * 100; // Simplified\n  }\n\n  private getDefaultMetrics(): PerformanceMetrics {\n    return {\n      cpu: { usage: 0, frequency: 0 },\n      memory: { usage: 0, available: 0, cached: 0 },\n      gpu: [],\n      disk: { readSpeed: 0, writeSpeed: 0, usage: 0 }\n    };\n  }\n}", "import { Tray, Menu, BrowserWindow, app, nativeImage } from 'electron';\nimport path from 'path';\n\nexport class SystemTrayService {\n  private tray: Tray | null = null;\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.createTray();\n  }\n\n  private createTray(): void {\n    try {\n      // Create tray icon from assets\n      const iconPath = path.join(__dirname, '../../../assets/TanukiMCPLogo.png');\n      const trayIcon = nativeImage.createFromPath(iconPath);\n      \n      // Resize icon for tray (16x16 on Windows)\n      const resizedIcon = trayIcon.resize({ width: 16, height: 16 });\n      \n      this.tray = new Tray(resizedIcon);\n      this.tray.setToolTip('TanukiMCP Atlas - AI Agentic IDE');\n      \n      this.setupTrayMenu();\n      this.setupTrayEvents();\n      \n      console.log('\u2705 System tray created successfully');\n    } catch (error) {\n      console.error('\u274C Failed to create system tray:', error);\n    }\n  }\n\n  private setupTrayMenu(): void {\n    if (!this.tray) return;\n\n    const contextMenu = Menu.buildFromTemplate([\n      {\n        label: 'TanukiMCP Atlas',\n        type: 'normal',\n        enabled: false\n      },\n      { type: 'separator' },\n      {\n        label: 'Show Atlas',\n        type: 'normal',\n        click: () => this.showMainWindow()\n      },\n      {\n        label: 'Hide Atlas',\n        type: 'normal',\n        click: () => this.hideMainWindow()\n      },\n      { type: 'separator' },\n      {\n        label: 'New Project',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+N',\n        click: () => this.sendToRenderer('new-project')\n      },\n      {\n        label: 'Open Project',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+O',\n        click: () => this.sendToRenderer('open-project')\n      },\n      { type: 'separator' },\n      {\n        label: 'AI Chat',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+Shift+C',\n        click: () => this.sendToRenderer('focus-chat')\n      },\n      {\n        label: 'Command Palette',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+Shift+P',\n        click: () => this.sendToRenderer('command-palette')\n      },\n      { type: 'separator' },\n      {\n        label: 'Settings',\n        type: 'normal',\n        click: () => this.sendToRenderer('open-settings')\n      },\n      {\n        label: 'About',\n        type: 'normal',\n        click: () => this.sendToRenderer('show-about')\n      },\n      { type: 'separator' },\n      {\n        label: 'Quit Atlas',\n        type: 'normal',\n        accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',\n        click: () => {\n          app.quit();\n        }\n      }\n    ]);\n\n    this.tray.setContextMenu(contextMenu);\n  }  private setupTrayEvents(): void {\n    if (!this.tray || !this.mainWindow) return;\n\n    // Double-click to show/hide window\n    this.tray.on('double-click', () => {\n      if (this.mainWindow?.isVisible()) {\n        this.hideMainWindow();\n      } else {\n        this.showMainWindow();\n      }\n    });\n\n    // Single click behavior (Windows)\n    if (process.platform === 'win32') {\n      this.tray.on('click', () => {\n        if (this.mainWindow?.isVisible()) {\n          this.hideMainWindow();\n        } else {\n          this.showMainWindow();\n        }\n      });\n    }\n  }\n\n  private showMainWindow(): void {\n    if (!this.mainWindow) return;\n\n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n    \n    // Bring to front on Windows\n    if (process.platform === 'win32') {\n      this.mainWindow.setAlwaysOnTop(true);\n      this.mainWindow.setAlwaysOnTop(false);\n    }\n  }\n\n  private hideMainWindow(): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.hide();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    \n    this.showMainWindow();\n    this.mainWindow.webContents.send('tray-action', { action, data });\n  }\n\n  public updateTrayMenu(): void {\n    this.setupTrayMenu();\n  }\n\n  public destroy(): void {\n    if (this.tray) {\n      this.tray.destroy();\n      this.tray = null;\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { Menu, BrowserWindow, app, shell } from 'electron';\n\nexport class NativeMenuService {\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.createApplicationMenu();\n  }\n\n  private createApplicationMenu(): void {\n    const template: Electron.MenuItemConstructorOptions[] = [\n      {\n        label: 'File',\n        submenu: [\n          {\n            label: 'New Project',\n            accelerator: 'CmdOrCtrl+N',\n            click: () => this.sendToRenderer('new-project')\n          },\n          {\n            label: 'Open Project',\n            accelerator: 'CmdOrCtrl+O',\n            click: () => this.sendToRenderer('open-project')\n          },\n          { type: 'separator' },\n          {\n            label: 'Save',\n            accelerator: 'CmdOrCtrl+S',\n            click: () => this.sendToRenderer('save-file')\n          },\n          {\n            label: 'Save As...',\n            accelerator: 'CmdOrCtrl+Shift+S',\n            click: () => this.sendToRenderer('save-file-as')\n          },\n          { type: 'separator' },\n          {\n            label: 'Exit',\n            accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',\n            click: () => app.quit()\n          }\n        ]\n      },\n      {\n        label: 'Edit',\n        submenu: [\n          { role: 'undo' },\n          { role: 'redo' },\n          { type: 'separator' },\n          { role: 'cut' },\n          { role: 'copy' },\n          { role: 'paste' },\n          { role: 'selectall' },\n          { type: 'separator' },\n          {\n            label: 'Find',\n            accelerator: 'CmdOrCtrl+F',\n            click: () => this.sendToRenderer('find')\n          },\n          {\n            label: 'Replace',\n            accelerator: 'CmdOrCtrl+H',\n            click: () => this.sendToRenderer('replace')\n          }\n        ]\n      },\n      {\n        label: 'View',\n        submenu: [\n          { role: 'reload' },\n          { role: 'forceReload' },\n          { role: 'toggleDevTools' },\n          { type: 'separator' },\n          { role: 'resetZoom' },\n          { role: 'zoomIn' },\n          { role: 'zoomOut' },\n          { type: 'separator' },\n          { role: 'togglefullscreen' },\n          { type: 'separator' },\n          {\n            label: 'Command Palette',\n            accelerator: 'CmdOrCtrl+Shift+P',\n            click: () => this.sendToRenderer('command-palette')\n          }\n        ]\n      },\n      {\n        label: 'AI',\n        submenu: [\n          {\n            label: 'Open Chat',\n            accelerator: 'CmdOrCtrl+Shift+C',\n            click: () => this.sendToRenderer('focus-chat')\n          },\n          {\n            label: 'New Agent',\n            accelerator: 'CmdOrCtrl+Shift+A',\n            click: () => this.sendToRenderer('new-agent')\n          },\n          {\n            label: 'Workflow Builder',\n            accelerator: 'CmdOrCtrl+Shift+W',\n            click: () => this.sendToRenderer('workflow-builder')\n          }\n        ]\n      },\n      {\n        label: 'Tools',\n        submenu: [\n          {\n            label: 'MCP Servers',\n            click: () => this.sendToRenderer('mcp-servers')\n          },\n          {\n            label: 'Model Manager',\n            click: () => this.sendToRenderer('model-manager')\n          },\n          { type: 'separator' },\n          {\n            label: 'Settings',\n            accelerator: 'CmdOrCtrl+,',\n            click: () => this.sendToRenderer('open-settings')\n          }\n        ]\n      },\n      {\n        label: 'Help',\n        submenu: [\n          {\n            label: 'Documentation',\n            click: () => shell.openExternal('https://tanukimcp.com/docs')\n          },\n          {\n            label: 'Community',\n            click: () => shell.openExternal('https://github.com/TanukiMCP/atlas')\n          },\n          { type: 'separator' },\n          {\n            label: 'About TanukiMCP Atlas',\n            click: () => this.sendToRenderer('show-about')\n          }\n        ]\n      }\n    ];\n\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('menu-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { autoUpdater } from 'electron-updater';\nimport { BrowserWindow, dialog, Notification } from 'electron';\n\nexport class AutoUpdaterService {\n  private mainWindow: BrowserWindow | null = null;\n  private updateAvailable = false;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.setupAutoUpdater();\n  }\n\n  private setupAutoUpdater(): void {\n    autoUpdater.autoDownload = false;\n    autoUpdater.autoInstallOnAppQuit = true;\n\n    autoUpdater.on('checking-for-update', () => {\n      console.log('\uD83D\uDD0D Checking for updates...');\n      this.sendToRenderer('update-checking');\n    });\n\n    autoUpdater.on('update-available', (info) => {\n      console.log('\uD83D\uDCE6 Update available:', info.version);\n      this.updateAvailable = true;\n      this.showUpdateAvailableNotification(info);\n      this.sendToRenderer('update-available', info);\n    });\n\n    autoUpdater.on('update-not-available', (info) => {\n      console.log('\u2705 No updates available');\n      this.sendToRenderer('update-not-available', info);\n    });\n\n    autoUpdater.on('error', (err) => {\n      console.error('\u274C Update error:', err);\n      this.sendToRenderer('update-error', err.message);\n    });\n\n    autoUpdater.on('download-progress', (progressObj) => {\n      const message = `Downloaded ${progressObj.percent.toFixed(1)}%`;\n      console.log('\uD83D\uDCE5', message);\n      this.sendToRenderer('update-download-progress', progressObj);\n    });\n\n    autoUpdater.on('update-downloaded', (info) => {\n      console.log('\u2705 Update downloaded:', info.version);\n      this.showUpdateReadyNotification(info);\n      this.sendToRenderer('update-downloaded', info);\n    });\n  }  private showUpdateAvailableNotification(info: any): void {\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: 'TanukiMCP Atlas Update Available',\n        body: `Version ${info.version} is available. Click to download.`,\n        icon: require('path').join(__dirname, '../../../assets/TanukiMCPLogo.png')\n      });\n\n      notification.on('click', () => {\n        this.downloadUpdate();\n      });\n\n      notification.show();\n    }\n  }\n\n  private showUpdateReadyNotification(info: any): void {\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: 'TanukiMCP Atlas Update Ready',\n        body: `Version ${info.version} has been downloaded. Restart to apply.`,\n        icon: require('path').join(__dirname, '../../../assets/TanukiMCPLogo.png')\n      });\n\n      notification.on('click', () => {\n        this.installUpdate();\n      });\n\n      notification.show();\n    }\n  }\n\n  public async checkForUpdates(): Promise<void> {\n    try {\n      await autoUpdater.checkForUpdates();\n    } catch (error) {\n      console.error('Failed to check for updates:', error);\n    }\n  }\n\n  public async downloadUpdate(): Promise<void> {\n    try {\n      await autoUpdater.downloadUpdate();\n    } catch (error) {\n      console.error('Failed to download update:', error);\n    }\n  }\n\n  public installUpdate(): void {\n    autoUpdater.quitAndInstall();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('updater-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { Notification, BrowserWindow } from 'electron';\nimport path from 'path';\n\nexport interface NotificationOptions {\n  title: string;\n  body: string;\n  icon?: string;\n  silent?: boolean;\n  onClick?: () => void;\n}\n\nexport class NotificationService {\n  private mainWindow: BrowserWindow | null = null;\n  private defaultIcon: string;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.defaultIcon = path.join(__dirname, '../../../assets/TanukiMCPLogo.png');\n  }\n\n  public showNotification(options: NotificationOptions): void {\n    if (!Notification.isSupported()) {\n      console.warn('Notifications not supported on this platform');\n      return;\n    }\n\n    const notification = new Notification({\n      title: options.title,\n      body: options.body,\n      icon: options.icon || this.defaultIcon,\n      silent: options.silent || false\n    });\n\n    if (options.onClick) {\n      notification.on('click', options.onClick);\n    }\n\n    notification.show();\n  }\n\n  public showBuildComplete(projectName: string): void {\n    this.showNotification({\n      title: 'Build Complete',\n      body: `${projectName} has been built successfully`,\n      onClick: () => this.focusMainWindow()\n    });\n  }  public showError(title: string, message: string): void {\n    this.showNotification({\n      title: `Error: ${title}`,\n      body: message,\n      onClick: () => this.focusMainWindow()\n    });\n  }\n\n  private focusMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { crashReporter, BrowserWindow, dialog } from 'electron';\nimport { writeFileSync, existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport { app } from 'electron';\n\nexport class CrashReporterService {\n  private mainWindow: BrowserWindow | null = null;\n  private crashLogDir: string;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.crashLogDir = join(app.getPath('userData'), 'crash-logs');\n    this.setupCrashReporter();\n  }\n\n  private setupCrashReporter(): void {\n    if (!existsSync(this.crashLogDir)) {\n      mkdirSync(this.crashLogDir, { recursive: true });\n    }\n\n    crashReporter.start({\n      productName: 'TanukiMCP Atlas',\n      companyName: 'TanukiMCP',\n      submitURL: '',\n      uploadToServer: false,\n      ignoreSystemCrashHandler: false,\n      rateLimit: true,\n      compress: true\n    });\n\n    console.log('\u2705 Crash reporter initialized');\n  }\n\n  public logCrash(error: Error, context?: string): void {\n    const timestamp = new Date().toISOString();\n    const crashLog = {\n      timestamp,\n      context: context || 'Unknown',\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      },\n      system: {\n        platform: process.platform,\n        arch: process.arch,\n        version: process.version,\n        appVersion: app.getVersion()\n      }\n    };    const logFile = join(this.crashLogDir, `crash-${Date.now()}.json`);\n    \n    try {\n      writeFileSync(logFile, JSON.stringify(crashLog, null, 2));\n      console.log('\uD83D\uDCA5 Crash logged to:', logFile);\n    } catch (writeError) {\n      console.error('Failed to write crash log:', writeError);\n    }\n  }\n\n  public async showCrashDialog(error: Error): Promise<void> {\n    const result = await dialog.showMessageBox(this.mainWindow!, {\n      type: 'error',\n      title: 'Application Error',\n      message: 'TanukiMCP Atlas encountered an unexpected error',\n      detail: `${error.message}\\n\\nThe error has been logged for debugging.`,\n      buttons: ['Restart', 'Close', 'Report Issue'],\n      defaultId: 0,\n      cancelId: 1\n    });\n\n    switch (result.response) {\n      case 0: // Restart\n        app.relaunch();\n        app.exit();\n        break;\n      case 2: // Report Issue\n        require('electron').shell.openExternal('https://github.com/TanukiMCP/atlas/issues');\n        break;\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { app, BrowserWindow } from 'electron';\n\nexport class ProtocolHandlerService {\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.setupProtocolHandler();\n  }\n\n  private setupProtocolHandler(): void {\n    if (!app.isDefaultProtocolClient('tanukimcp')) {\n      app.setAsDefaultProtocolClient('tanukimcp');\n    }\n\n    app.on('second-instance', (event, commandLine, workingDirectory) => {\n      if (this.mainWindow) {\n        if (this.mainWindow.isMinimized()) {\n          this.mainWindow.restore();\n        }\n        this.mainWindow.focus();\n      }\n\n      const url = commandLine.find(arg => arg.startsWith('tanukimcp://'));\n      if (url) {\n        this.handleProtocolUrl(url);\n      }\n    });\n\n    app.on('open-url', (event, url) => {\n      event.preventDefault();\n      this.handleProtocolUrl(url);\n    });\n\n    console.log('\u2705 Protocol handler registered for tanukimcp://');\n  }\n\n  private handleProtocolUrl(url: string): void {\n    console.log('\uD83D\uDD17 Handling protocol URL:', url);\n\n    try {\n      const parsedUrl = new URL(url);\n      const action = parsedUrl.hostname;\n      const params = Object.fromEntries(parsedUrl.searchParams);\n\n      this.focusMainWindow();\n      this.sendToRenderer('protocol-action', { action, params, url });\n    } catch (error) {\n      console.error('Failed to parse protocol URL:', error);\n    }\n  }  private focusMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('protocol-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}"],
  "mappings": "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",
  "names": ["import_electron", "import_path", "path", "import_electron", "import_better_sqlite3", "import_path", "import_electron", "crypto", "import_crypto", "crypto", "path", "Database", "sqlite", "db", "app", "path", "app", "path", "BrowserWindow", "ipcMain", "import_electron", "import_path", "path", "import_electron", "import_electron", "import_electron", "import_path", "path", "import_electron", "import_path", "import_electron", "path", "app"]
}
