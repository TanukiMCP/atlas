{
  "version": 3,
  "sources": ["../src/main.ts", "../src/window.ts", "../src/ipc/handlers.ts", "../src/database/connection.ts", "../src/database/schema.ts", "../../../node_modules/uuid/dist/esm-node/rng.js", "../../../node_modules/uuid/dist/esm-node/stringify.js", "../../../node_modules/uuid/dist/esm-node/native.js", "../../../node_modules/uuid/dist/esm-node/v4.js", "../src/services/ollama-service.ts", "../src/services/system-monitor.ts", "../src/services/hardware-assessor.ts", "../src/services/model-manager.ts", "../src/services/optimization-engine.ts", "../src/services/parameter-tuner.ts", "../src/services/context-manager.ts"],
  "sourcesContent": ["import { app, BrowserWindow } from 'electron';\r\nimport path from 'path';\r\nimport { createWindow } from './window';\r\nimport { setupIPC } from './ipc/handlers';\r\nimport { initializeDatabase } from './database/connection';\r\nimport { OllamaService } from './services/ollama-service';\r\nimport { SystemMonitor } from './services/system-monitor';\r\nimport { ModelManager } from './services/model-manager';\r\nimport { HardwareAssessor } from './services/hardware-assessor';\r\nimport { OptimizationEngine } from './services/optimization-engine';\r\nimport { ParameterTuner } from './services/parameter-tuner';\r\nimport { ContextManager } from './services/context-manager';\r\n\r\nclass TanukiMCPApp {\r\n  private mainWindow: BrowserWindow | null = null;\r\n  private isQuitting = false;\r\n  \r\n  // Phase 2: LLM and Model Management Services\r\n  private ollamaService: OllamaService;\r\n  private systemMonitor: SystemMonitor;\r\n  private modelManager: ModelManager;\r\n  private hardwareAssessor: HardwareAssessor;\r\n  private optimizationEngine: OptimizationEngine;\r\n  private parameterTuner: ParameterTuner;\r\n  private contextManager: ContextManager;\r\n\r\n  constructor() {\r\n    this.setupEventHandlers();\r\n    this.initializeServices();\r\n  }\r\n  \r\n  private initializeServices(): void {\r\n    console.log('\uD83D\uDD27 Initializing Phase 2 services...');\r\n    \r\n    // Initialize all LLM and model management services\r\n    this.ollamaService = new OllamaService();\r\n    this.systemMonitor = new SystemMonitor();\r\n    this.modelManager = new ModelManager();\r\n    this.hardwareAssessor = new HardwareAssessor();\r\n    this.optimizationEngine = new OptimizationEngine();\r\n    this.parameterTuner = new ParameterTuner();\r\n    this.contextManager = new ContextManager();\r\n    \r\n    console.log('\u2705 Phase 2 services initialized');\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    // Set up app event handlers\r\n    app.whenReady().then(() => this.onReady());\r\n    app.on('window-all-closed', this.onWindowAllClosed.bind(this));\r\n    app.on('activate', this.onActivate.bind(this));\r\n    app.on('before-quit', this.onBeforeQuit.bind(this));\r\n    \r\n    // Handle certificate errors (for local development)\r\n    app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\r\n      if (url.startsWith('http://localhost')) {\r\n        // Ignore certificate errors for localhost\r\n        event.preventDefault();\r\n        callback(true);\r\n      } else {\r\n        // Use default behavior for other URLs\r\n        callback(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async onReady(): Promise<void> {\r\n    try {\r\n      console.log('\uD83D\uDE80 TanukiMCP Atlas starting...');\r\n      \r\n      // Initialize database first\r\n      console.log('\uD83D\uDCCA Initializing database...');\r\n      await initializeDatabase();\r\n      console.log('\u2705 Database initialized');\r\n      \r\n      // Assess system capabilities for model recommendations\r\n      console.log('\uD83D\uDD0D Assessing system capabilities...');\r\n      await this.assessSystemCapabilities();\r\n      console.log('\u2705 System assessment complete');\r\n      \r\n      // Create main window\r\n      console.log('\uD83E\uDE9F Creating main window...');\r\n      this.mainWindow = createWindow();\r\n      \r\n      // Setup IPC handlers\r\n      console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n      setupIPC();\r\n      console.log('\u2705 IPC handlers ready');\r\n      \r\n      // Load the application\r\n      await this.loadApplication();\r\n      \r\n      console.log('\uD83C\uDF89 TanukiMCP Atlas ready!');\r\n    } catch (error) {\r\n      console.error('\u274C Failed to initialize TanukiMCP Atlas:', error);\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private async loadApplication(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n\r\n    // Determine URL based on environment\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Development mode - load from Vite dev server\r\n      const devServerUrl = 'http://localhost:5173';\r\n      console.log(`\uD83D\uDD27 Loading from dev server: ${devServerUrl}`);\r\n      \r\n      try {\r\n        await this.mainWindow.loadURL(devServerUrl);\r\n        this.mainWindow.webContents.openDevTools();\r\n      } catch (error) {\r\n        console.error('Failed to load dev server, falling back to file:', error);\r\n        await this.loadProductionFile();\r\n      }\r\n    } else {\r\n      // Production mode - load from built files\r\n      await this.loadProductionFile();\r\n    }\r\n  }\r\n\r\n  private async loadProductionFile(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n    \r\n    const indexPath = path.join(__dirname, '../renderer/dist/index.html');\r\n    console.log(`\uD83D\uDCC1 Loading from file: ${indexPath}`);\r\n    await this.mainWindow.loadFile(indexPath);\r\n  }\r\n\r\n  private onWindowAllClosed(): void {\r\n    // On macOS, keep app running even when all windows are closed\r\n    if (process.platform !== 'darwin') {\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private onActivate(): void {\r\n    // On macOS, re-create window when dock icon is clicked\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      this.mainWindow = createWindow();\r\n      this.loadApplication();\r\n    }\r\n  }\r\n\r\n  private onBeforeQuit(): void {\r\n    this.isQuitting = true;\r\n  }\r\n\r\n  private async assessSystemCapabilities(): Promise<void> {\r\n    try {\r\n      // Check Ollama health\r\n      const ollamaHealthy = await this.ollamaService.checkOllamaHealth();\r\n      if (ollamaHealthy) {\r\n        console.log('\u2705 Ollama service is running');\r\n      } else {\r\n        console.log('\u26A0\uFE0F  Ollama service not detected - model management will be limited');\r\n      }\r\n      \r\n      // Get system info and recommendations\r\n      const systemCaps = await this.hardwareAssessor.assessSystemCapabilities();\r\n      console.log('\uD83D\uDCBB System specs:', {\r\n        cpu: systemCaps.cpu.cores + ' cores',\r\n        memory: systemCaps.memory.total + 'GB RAM',\r\n        gpu: systemCaps.gpu?.length ? systemCaps.gpu.length + ' GPU(s)' : 'None detected'\r\n      });\r\n      \r\n      // Get model recommendations\r\n      const catalog = await this.ollamaService.getModelCatalog();\r\n      const recommendations = await this.hardwareAssessor.getModelRecommendations(systemCaps, catalog);\r\n      console.log('\uD83E\uDD16 Recommended models:', recommendations.slice(0, 3).map(r => r.model.displayName));\r\n      \r\n      // Apply optimal settings\r\n      const optimalProfile = await this.optimizationEngine.optimizeForHardware(systemCaps);\r\n      await this.optimizationEngine.applyOptimizations(optimalProfile);\r\n      console.log('\u26A1 Applied optimization profile:', optimalProfile.name);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to assess system capabilities:', error);\r\n    }\r\n  }\r\n\r\n  public getMainWindow(): BrowserWindow | null {\r\n    return this.mainWindow;\r\n  }\r\n  \r\n  // Expose services for IPC handlers\r\n  public getServices() {\r\n    return {\r\n      ollama: this.ollamaService,\r\n      systemMonitor: this.systemMonitor,\r\n      modelManager: this.modelManager,\r\n      hardwareAssessor: this.hardwareAssessor,\r\n      optimizationEngine: this.optimizationEngine,\r\n      parameterTuner: this.parameterTuner,\r\n      contextManager: this.contextManager\r\n    };\r\n  }\r\n}\r\n\r\n// Create and initialize the application\r\nconst tanukiApp = new TanukiMCPApp();\r\n\r\n// Export for potential external access\r\nexport { tanukiApp };\r\n\r\n// Handle uncaught exceptions gracefully\r\nprocess.on('uncaughtException', (error) => {\r\n  console.error('Uncaught Exception:', error);\r\n  // In production, we might want to restart the app\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n}); ", "import { BrowserWindow, screen, app } from 'electron';\r\nimport path from 'path';\r\n\r\nexport function createWindow(): BrowserWindow {\r\n  // Get display information\r\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize;\r\n  \r\n  // Calculate optimal window size\r\n  const windowWidth = Math.min(1400, Math.floor(width * 0.9));\r\n  const windowHeight = Math.min(900, Math.floor(height * 0.9));\r\n  \r\n  // Create the browser window\r\n  const window = new BrowserWindow({\r\n    width: windowWidth,\r\n    height: windowHeight,\r\n    minWidth: 1024,\r\n    minHeight: 768,\r\n    center: true,\r\n    \r\n    // Window appearance\r\n    titleBarStyle: 'hiddenInset', // macOS-style title bar\r\n    frame: true,\r\n    transparent: false,\r\n    backgroundColor: '#1a1a1a', // Dark theme background\r\n    \r\n    // Security settings\r\n    webPreferences: {\r\n      nodeIntegration: false,           // Disable node integration in renderer\r\n      contextIsolation: true,           // Enable context isolation\r\n      sandbox: false,                   // Disable sandbox for better performance\r\n      preload: path.join(__dirname, 'preload.js'), // Will be created later\r\n      webSecurity: true,                // Enable web security\r\n      allowRunningInsecureContent: false,\r\n      experimentalFeatures: false,\r\n      \r\n      // Additional security\r\n      enableRemoteModule: false,\r\n      worldSafeExecuteJavaScript: true,\r\n      disableBlinkFeatures: 'Auxclick',\r\n    },\r\n    \r\n    // Performance settings\r\n    show: false, // Don't show until ready\r\n    paintWhenInitiallyHidden: false,\r\n    \r\n    // Window behavior\r\n    autoHideMenuBar: false, // Keep menu bar visible for IDE functionality\r\n    fullscreenable: true,\r\n    maximizable: true,\r\n    minimizable: true,\r\n    resizable: true,\r\n    \r\n    // Icon (will be added later)\r\n    // icon: path.join(__dirname, '../assets/icon.png'),\r\n    \r\n    // Development\r\n    ...(process.env.NODE_ENV === 'development' && {\r\n      webPreferences: {\r\n        ...BrowserWindow.prototype.webPreferences,\r\n        devTools: true,\r\n      }\r\n    })\r\n  });\r\n\r\n  // Window event handlers\r\n  window.once('ready-to-show', () => {\r\n    console.log('\uD83E\uDE9F Window ready to show');\r\n    window.show();\r\n    \r\n    // Focus the window\r\n    if (process.env.NODE_ENV === 'development') {\r\n      window.focus();\r\n    }\r\n  });\r\n\r\n  // Handle window closed\r\n  window.on('closed', () => {\r\n    console.log('\uD83E\uDE9F Window closed');\r\n  });\r\n\r\n  // Handle window state changes\r\n  window.on('maximize', () => {\r\n    console.log('\uD83E\uDE9F Window maximized');\r\n  });\r\n\r\n  window.on('unmaximize', () => {\r\n    console.log('\uD83E\uDE9F Window unmaximized');\r\n  });\r\n\r\n  window.on('minimize', () => {\r\n    console.log('\uD83E\uDE9F Window minimized');\r\n  });\r\n\r\n  window.on('restore', () => {\r\n    console.log('\uD83E\uDE9F Window restored');\r\n  });\r\n\r\n  // Handle window focus\r\n  window.on('focus', () => {\r\n    // Window gained focus\r\n  });\r\n\r\n  window.on('blur', () => {\r\n    // Window lost focus\r\n  });\r\n\r\n  // Prevent navigation to external URLs\r\n  window.webContents.on('will-navigate', (event: any, navigationUrl: string) => {\r\n    const parsedUrl = new URL(navigationUrl);\r\n    \r\n    // Allow localhost navigation for development\r\n    if (parsedUrl.origin !== 'http://localhost:5173' && \r\n        parsedUrl.origin !== 'file://') {\r\n      console.warn('\uD83D\uDEAB Blocked navigation to external URL:', navigationUrl);\r\n      event.preventDefault();\r\n    }\r\n  });\r\n\r\n  // Prevent new window creation\r\n  window.webContents.setWindowOpenHandler(({ url }: { url: string }) => {\r\n    console.warn('\uD83D\uDEAB Blocked attempt to open new window:', url);\r\n    return { action: 'deny' };\r\n  });\r\n\r\n  // Handle console messages from renderer\r\n  window.webContents.on('console-message', (event: any, level: string, message: string, line: number, sourceId: string) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`Renderer [${level}]:`, message);\r\n    }\r\n  });\r\n\r\n  // Handle crashes\r\n  window.webContents.on('crashed', (event: any, killed: boolean) => {\r\n    console.error('\uD83D\uDCA5 Renderer process crashed:', { killed });\r\n    \r\n    // Optionally reload the window\r\n    if (!killed) {\r\n      window.reload();\r\n    }\r\n  });\r\n\r\n  // Handle unresponsive renderer\r\n  window.webContents.on('unresponsive', () => {\r\n    console.warn('\u26A0\uFE0F Renderer process became unresponsive');\r\n  });\r\n\r\n  window.webContents.on('responsive', () => {\r\n    console.log('\u2705 Renderer process became responsive again');\r\n  });\r\n\r\n  // Save window state for restoration\r\n  window.on('resize', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  window.on('move', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  // Restore previous window state if available\r\n  restoreWindowState(window);\r\n\r\n  return window;\r\n}\r\n\r\n// Helper functions for window state management\r\nfunction saveWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const bounds = window.getBounds();\r\n    const state = {\r\n      x: bounds.x,\r\n      y: bounds.y,\r\n      width: bounds.width,\r\n      height: bounds.height,\r\n      isMaximized: window.isMaximized(),\r\n      isFullScreen: window.isFullScreen(),\r\n    };\r\n    \r\n    // Save to user data (will be implemented with proper storage later)\r\n    // For now, just store in memory\r\n    (global as any).windowState = state;\r\n  } catch (error) {\r\n    console.error('Failed to save window state:', error);\r\n  }\r\n}\r\n\r\nfunction restoreWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const state = (global as any).windowState;\r\n    if (state) {\r\n      // Validate state bounds are within current screen\r\n      const { workArea } = screen.getPrimaryDisplay();\r\n      \r\n      if (state.x >= workArea.x && state.x < workArea.x + workArea.width &&\r\n          state.y >= workArea.y && state.y < workArea.y + workArea.height) {\r\n        window.setBounds({\r\n          x: state.x,\r\n          y: state.y,\r\n          width: Math.min(state.width, workArea.width),\r\n          height: Math.min(state.height, workArea.height)\r\n        });\r\n      }\r\n      \r\n      if (state.isMaximized) {\r\n        window.maximize();\r\n      }\r\n      \r\n      if (state.isFullScreen) {\r\n        window.setFullScreen(true);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to restore window state:', error);\r\n  }\r\n} ", "import { ipcMain, IpcMainInvokeEvent } from 'electron';\r\nimport { getDatabase, getRawDatabase, checkDatabaseHealth } from '../database/connection';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { tanukiApp } from '../main';\r\n\r\n// Define IPC channel types for type safety\r\nexport interface IPCChannels {\r\n  // Database operations\r\n  'db:query': { params: [string, any[]?]; result: any };\r\n  'db:health': { params: []; result: { isHealthy: boolean; details: any } };\r\n  \r\n  // Application state\r\n  'app:getVersion': { params: []; result: string };\r\n  'app:getPath': { params: [string]; result: string };\r\n  \r\n  // Settings management\r\n  'settings:get': { params: [string]; result: any };\r\n  'settings:set': { params: [string, any]; result: void };\r\n  'settings:getAll': { params: []; result: any[] };\r\n  \r\n  // Chat session management\r\n  'chat:createSession': { params: [any]; result: any };\r\n  'chat:getSession': { params: [string]; result: any };\r\n  'chat:updateSession': { params: [string, any]; result: any };\r\n  'chat:deleteSession': { params: [string]; result: void };\r\n  'chat:listSessions': { params: []; result: any[] };\r\n  \r\n  // File system operations (placeholder for Phase 3)\r\n  'fs:readFile': { params: [string]; result: string | null };\r\n  'fs:writeFile': { params: [string, string]; result: void };\r\n  'fs:exists': { params: [string]; result: boolean };\r\n  \r\n  // Phase 2: LLM and Model Management\r\n  'ollama:listModels': { params: []; result: any[] };\r\n  'ollama:getModelCatalog': { params: []; result: any[] };\r\n  'ollama:installModel': { params: [string]; result: void };\r\n  'ollama:deleteModel': { params: [string]; result: void };\r\n  'ollama:generate': { params: [any]; result: any };\r\n  'ollama:checkHealth': { params: []; result: boolean };\r\n  'ollama:benchmarkModel': { params: [string]; result: any };\r\n  \r\n  'system:getCapabilities': { params: []; result: any };\r\n  'system:getCurrentMetrics': { params: []; result: any };\r\n  \r\n  'models:getRecommendations': { params: []; result: any[] };\r\n  'models:getInstallationStatus': { params: [string]; result: any };\r\n  \r\n  'optimization:getProfiles': { params: []; result: any[] };\r\n  'optimization:getActiveProfile': { params: []; result: any };\r\n  'optimization:setProfile': { params: [string]; result: void };\r\n  'optimization:optimizeForHardware': { params: [any]; result: any };\r\n  \r\n  'parameters:getPreset': { params: [string]; result: any };\r\n  'parameters:getAllPresets': { params: []; result: any };\r\n  'parameters:optimizeForTask': { params: [string, string]; result: any };\r\n  \r\n  'context:store': { params: [string, string, string, string, number?]; result: void };\r\n  'context:retrieve': { params: [string, string, number?]; result: any[] };\r\n  'context:optimize': { params: [string]; result: void };\r\n}\r\n\r\nexport function setupIPC(): void {\r\n  console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n  \r\n  // Database operations\r\n  setupDatabaseHandlers();\r\n  \r\n  // Application state handlers\r\n  setupAppHandlers();\r\n  \r\n  // Settings handlers\r\n  setupSettingsHandlers();\r\n  \r\n  // Chat session handlers\r\n  setupChatHandlers();\r\n  \r\n  // File system handlers (basic implementation for Phase 1)\r\n  setupFileSystemHandlers();\r\n  \r\n  // Phase 2: LLM and Model Management handlers\r\n  setupLLMHandlers();\r\n  \r\n  console.log('\u2705 IPC handlers registered');\r\n}\r\n\r\nfunction setupDatabaseHandlers(): void {\r\n  // Generic database query handler (with caution)\r\n  ipcMain.handle('db:query', async (event: IpcMainInvokeEvent, query: string, params?: any[]) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Basic safety check - only allow SELECT, INSERT, UPDATE for now\r\n      const queryType = query.trim().toUpperCase().split(' ')[0];\r\n      if (!['SELECT', 'INSERT', 'UPDATE', 'DELETE'].includes(queryType)) {\r\n        throw new Error(`Query type ${queryType} not allowed`);\r\n      }\r\n      \r\n      if (params) {\r\n        return db.prepare(query).all(params);\r\n      } else {\r\n        return db.prepare(query).all();\r\n      }\r\n    } catch (error) {\r\n      console.error('Database query failed:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Database health check\r\n  ipcMain.handle('db:health', async () => {\r\n    return checkDatabaseHealth();\r\n  });\r\n}\r\n\r\nfunction setupAppHandlers(): void {\r\n  // Get application version\r\n  ipcMain.handle('app:getVersion', () => {\r\n    return process.env.npm_package_version || '1.0.0';\r\n  });\r\n  \r\n  // Get application paths\r\n  ipcMain.handle('app:getPath', async (event: IpcMainInvokeEvent, name: string) => {\r\n    const { app } = require('electron');\r\n    \r\n    try {\r\n      return app.getPath(name as any);\r\n    } catch (error) {\r\n      console.error(`Failed to get path for ${name}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupSettingsHandlers(): void {\r\n  // Get setting value\r\n  ipcMain.handle('settings:get', async (event: IpcMainInvokeEvent, key: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const result = db.prepare('SELECT value FROM settings WHERE key = ?').get(key) as { value: string } | undefined;\r\n      \r\n      if (result) {\r\n        return JSON.parse(result.value);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Failed to get setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Set setting value\r\n  ipcMain.handle('settings:set', async (event: IpcMainInvokeEvent, key: string, value: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const stmt = db.prepare(`\r\n        INSERT OR REPLACE INTO settings (key, value, updated)\r\n        VALUES (?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(key, JSON.stringify(value), Date.now());\r\n    } catch (error) {\r\n      console.error(`Failed to set setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get all settings\r\n  ipcMain.handle('settings:getAll', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const results = db.prepare('SELECT * FROM settings').all() as any[];\r\n      \r\n      return results.map(row => ({\r\n        ...row,\r\n        value: JSON.parse(row.value)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to get all settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupChatHandlers(): void {\r\n  // Create new chat session\r\n  ipcMain.handle('chat:createSession', async (event: IpcMainInvokeEvent, sessionData: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const id = uuidv4();\r\n      const now = Date.now();\r\n      \r\n      const stmt = db.prepare(`\r\n        INSERT INTO chat_sessions (\r\n          id, title, description, created, updated, subject_mode\r\n        ) VALUES (?, ?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(\r\n        id,\r\n        sessionData.title || 'New Chat',\r\n        sessionData.description || null,\r\n        now,\r\n        now,\r\n        sessionData.subjectMode || 'general'\r\n      );\r\n      \r\n      return {\r\n        id,\r\n        title: sessionData.title || 'New Chat',\r\n        description: sessionData.description || null,\r\n        created: now,\r\n        updated: now,\r\n        subjectMode: sessionData.subjectMode || 'general',\r\n        messageCount: 0,\r\n        isArchived: false,\r\n        isFavorite: false\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to create chat session:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get chat session\r\n  ipcMain.handle('chat:getSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const session = db.prepare('SELECT * FROM chat_sessions WHERE id = ?').get(sessionId);\r\n      \r\n      if (!session) {\r\n        throw new Error(`Chat session ${sessionId} not found`);\r\n      }\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error(`Failed to get chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Update chat session\r\n  ipcMain.handle('chat:updateSession', async (event: IpcMainInvokeEvent, sessionId: string, updates: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const updateFields: string[] = [];\r\n      const updateValues: any[] = [];\r\n      \r\n      // Build dynamic update query\r\n      if (updates.title !== undefined) {\r\n        updateFields.push('title = ?');\r\n        updateValues.push(updates.title);\r\n      }\r\n      if (updates.description !== undefined) {\r\n        updateFields.push('description = ?');\r\n        updateValues.push(updates.description);\r\n      }\r\n      if (updates.isArchived !== undefined) {\r\n        updateFields.push('is_archived = ?');\r\n        updateValues.push(updates.isArchived ? 1 : 0);\r\n      }\r\n      if (updates.isFavorite !== undefined) {\r\n        updateFields.push('is_favorite = ?');\r\n        updateValues.push(updates.isFavorite ? 1 : 0);\r\n      }\r\n      \r\n      if (updateFields.length > 0) {\r\n        updateFields.push('updated = ?');\r\n        updateValues.push(Date.now());\r\n        updateValues.push(sessionId);\r\n        \r\n        const query = `UPDATE chat_sessions SET ${updateFields.join(', ')} WHERE id = ?`;\r\n        const stmt = db.prepare(query);\r\n        stmt.run(...updateValues);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to update chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Delete chat session\r\n  ipcMain.handle('chat:deleteSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Delete session and all related data (cascading deletes handled by foreign keys)\r\n      db.prepare('DELETE FROM chat_sessions WHERE id = ?').run(sessionId);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to delete chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // List chat sessions\r\n  ipcMain.handle('chat:listSessions', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const sessions = db.prepare(`\r\n        SELECT * FROM chat_sessions \r\n        ORDER BY updated DESC\r\n      `).all();\r\n      \r\n      return sessions;\r\n    } catch (error) {\r\n      console.error('Failed to list chat sessions:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupFileSystemHandlers(): void {\r\n  // Basic file system operations (placeholder for Phase 3)\r\n  \r\n  // Read file (placeholder)\r\n  ipcMain.handle('fs:readFile', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Read file: ${filePath}`);\r\n    return null;\r\n  });\r\n  \r\n  // Write file (placeholder)\r\n  ipcMain.handle('fs:writeFile', async (event: IpcMainInvokeEvent, filePath: string, content: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Write file: ${filePath}`);\r\n    return true;\r\n  });\r\n  \r\n  // Check if file exists (placeholder)\r\n  ipcMain.handle('fs:exists', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Check file exists: ${filePath}`);\r\n    return false;\r\n  });\r\n}\r\n\r\n// Error handling wrapper for IPC handlers\r\nfunction handleIPC<T extends keyof IPCChannels>(\r\n  channel: T,\r\n  handler: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<IPCChannels[T]['result']>\r\n): void {\r\n  ipcMain.handle(channel, async (event: IpcMainInvokeEvent, ...args: any[]) => {\r\n    try {\r\n      return await handler(event, ...args);\r\n    } catch (error) {\r\n      console.error(`IPC Error in ${channel}:`, error);\r\n      \r\n      // Return structured error for renderer to handle\r\n      return {\r\n        error: true,\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupLLMHandlers(): void {\r\n  // Ollama service handlers\r\n  ipcMain.handle('ollama:listModels', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.listModels();\r\n  });\r\n  \r\n  ipcMain.handle('ollama:getModelCatalog', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.getModelCatalog();\r\n  });\r\n  \r\n  ipcMain.handle('ollama:installModel', async (event: IpcMainInvokeEvent, modelName: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.modelManager.installModel(modelName);\r\n  });\r\n  \r\n  ipcMain.handle('ollama:deleteModel', async (event: IpcMainInvokeEvent, modelName: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.deleteModel(modelName);\r\n  });\r\n  \r\n  ipcMain.handle('ollama:generate', async (event: IpcMainInvokeEvent, request: any) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.generateWithOptimization(request);\r\n  });\r\n  \r\n  ipcMain.handle('ollama:checkHealth', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.checkOllamaHealth();\r\n  });\r\n  \r\n  ipcMain.handle('ollama:benchmarkModel', async (event: IpcMainInvokeEvent, modelName: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.ollama.benchmarkModel(modelName);\r\n  });\r\n  \r\n  // System monitoring handlers\r\n  ipcMain.handle('system:getCapabilities', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.hardwareAssessor.assessSystemCapabilities();\r\n  });\r\n  \r\n  ipcMain.handle('system:getCurrentMetrics', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.systemMonitor.getCurrentMetrics();\r\n  });\r\n  \r\n  // Model management handlers\r\n  ipcMain.handle('models:getRecommendations', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.modelManager.getRecommendedModels();\r\n  });\r\n  \r\n  ipcMain.handle('models:getInstallationStatus', async (event: IpcMainInvokeEvent, modelName: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return services.modelManager.getInstallationStatus(modelName);\r\n  });\r\n  \r\n  // Optimization handlers\r\n  ipcMain.handle('optimization:getProfiles', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return services.optimizationEngine.getAllProfiles();\r\n  });\r\n  \r\n  ipcMain.handle('optimization:optimizeForHardware', async (event: IpcMainInvokeEvent, systemInfo: any) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.optimizationEngine.optimizeForHardware(systemInfo);\r\n  });\r\n  \r\n  // Parameter tuning handlers\r\n  ipcMain.handle('parameters:getPreset', async (event: IpcMainInvokeEvent, task: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return services.parameterTuner.getPreset(task);\r\n  });\r\n  \r\n  ipcMain.handle('parameters:getAllPresets', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return services.parameterTuner.getAllPresets();\r\n  });\r\n  \r\n  ipcMain.handle('parameters:optimizeForTask', async (event: IpcMainInvokeEvent, task: string, modelName: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.parameterTuner.optimizeForTask(task, modelName);\r\n  });\r\n  \r\n  // Context management handlers\r\n  ipcMain.handle('context:store', async (\r\n    event: IpcMainInvokeEvent,\r\n    sessionId: string,\r\n    type: string,\r\n    key: string,\r\n    value: string,\r\n    importance?: number\r\n  ) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.contextManager.storeContext(sessionId, type as any, key, value, importance);\r\n  });\r\n  \r\n  ipcMain.handle('context:retrieve', async (\r\n    event: IpcMainInvokeEvent,\r\n    sessionId: string,\r\n    query: string,\r\n    maxResults?: number\r\n  ) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.contextManager.retrieveRelevantContext(sessionId, query, maxResults);\r\n  });\r\n  \r\n  ipcMain.handle('context:optimize', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.contextManager.optimizeContext(sessionId);\r\n  });\r\n}\r\n\r\n// Clean up IPC handlers on app shutdown\r\nexport function cleanupIPC(): void {\r\n  // Remove all IPC handlers\r\n  ipcMain.removeAllListeners();\r\n  console.log('\uD83D\uDD0C IPC handlers cleaned up');\r\n} ", "import Database from 'better-sqlite3';\r\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\r\nimport { migrate } from 'drizzle-orm/better-sqlite3/migrator';\r\nimport path from 'path';\r\nimport { app } from 'electron';\r\nimport * as schema from './schema';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nlet db: ReturnType<typeof drizzle>;\r\nlet sqlite: Database.Database;\r\n\r\nexport async function initializeDatabase(): Promise<void> {\r\n  try {\r\n    // Get database path in user data directory\r\n    const userDataPath = app.getPath('userData');\r\n    const dbPath = path.join(userDataPath, 'tanukimcp.db');\r\n    \r\n    console.log(`\uD83D\uDCCA Database path: ${dbPath}`);\r\n    \r\n    // Create SQLite connection\r\n    sqlite = new Database(dbPath);\r\n    \r\n    // Configure SQLite for optimal performance\r\n    configureDatabase(sqlite);\r\n    \r\n    // Create Drizzle instance\r\n    db = drizzle(sqlite, { schema });\r\n    \r\n    // Run migrations\r\n    console.log('\uD83D\uDD04 Running database migrations...');\r\n    await runMigrations();\r\n    \r\n    // Initialize default data\r\n    await initializeDefaultData();\r\n    \r\n    console.log('\u2705 Database initialized successfully');\r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction configureDatabase(sqlite: Database.Database): void {\r\n  // Enable WAL mode for better concurrency\r\n  sqlite.pragma('journal_mode = WAL');\r\n  \r\n  // Set synchronous mode for better performance while maintaining safety\r\n  sqlite.pragma('synchronous = NORMAL');\r\n  \r\n  // Increase cache size (1000 pages = ~4MB for default page size)\r\n  sqlite.pragma('cache_size = 1000000');\r\n  \r\n  // Enable foreign key constraints\r\n  sqlite.pragma('foreign_keys = ON');\r\n  \r\n  // Store temporary tables in memory for better performance\r\n  sqlite.pragma('temp_store = MEMORY');\r\n  \r\n  // Set busy timeout for concurrent access\r\n  sqlite.pragma('busy_timeout = 5000');\r\n  \r\n  // Optimize for performance\r\n  sqlite.pragma('optimize');\r\n  \r\n  console.log('\u2699\uFE0F Database configured with performance optimizations');\r\n}\r\n\r\nasync function runMigrations(): Promise<void> {\r\n  try {\r\n    // For now, we'll create the migrations directory structure\r\n    // In a real setup, we'd use drizzle-kit to generate migrations\r\n    const migrationsFolder = path.join(__dirname, '../../../drizzle');\r\n    \r\n    // Create basic tables if they don't exist (manual migration for Phase 1)\r\n    await createTablesIfNotExist();\r\n    \r\n    console.log('\u2705 Migrations completed');\r\n  } catch (error) {\r\n    console.error('\u274C Migration failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createTablesIfNotExist(): Promise<void> {\r\n  // This is a simplified migration approach for Phase 1\r\n  // In later phases, we'll use proper Drizzle migrations\r\n  \r\n  const tables = [\r\n    `CREATE TABLE IF NOT EXISTS projects (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      path TEXT NOT NULL,\r\n      description TEXT,\r\n      language TEXT,\r\n      framework TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      last_opened INTEGER,\r\n      is_active INTEGER DEFAULT 1,\r\n      settings TEXT\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_sessions (\r\n      id TEXT PRIMARY KEY,\r\n      project_id TEXT REFERENCES projects(id),\r\n      title TEXT NOT NULL,\r\n      description TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      is_archived INTEGER DEFAULT 0,\r\n      is_favorite INTEGER DEFAULT 0,\r\n      message_count INTEGER DEFAULT 0,\r\n      tags TEXT,\r\n      subject_mode TEXT DEFAULT 'general',\r\n      model_used TEXT,\r\n      total_tokens INTEGER DEFAULT 0,\r\n      execution_time_ms INTEGER DEFAULT 0\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_history (\r\n      id TEXT PRIMARY KEY,\r\n      session_id TEXT REFERENCES chat_sessions(id) ON DELETE CASCADE,\r\n      role TEXT NOT NULL,\r\n      content TEXT NOT NULL,\r\n      metadata TEXT,\r\n      timestamp INTEGER NOT NULL,\r\n      parent_message_id TEXT,\r\n      tools_used TEXT,\r\n      execution_time_ms INTEGER,\r\n      token_count INTEGER,\r\n      model TEXT,\r\n      temperature REAL,\r\n      complexity TEXT,\r\n      quality_score REAL\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS settings (\r\n      key TEXT PRIMARY KEY,\r\n      value TEXT NOT NULL,\r\n      category TEXT,\r\n      description TEXT,\r\n      is_user_configurable INTEGER DEFAULT 1,\r\n      updated INTEGER NOT NULL\r\n    )`\r\n  ];\r\n  \r\n  for (const tableSQL of tables) {\r\n    sqlite.exec(tableSQL);\r\n  }\r\n  \r\n  // Create indices for better performance\r\n  const indices = [\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_project_id ON chat_sessions(project_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_created ON chat_sessions(created)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_timestamp ON chat_history(timestamp)',\r\n    'CREATE INDEX IF NOT EXISTS idx_settings_category ON settings(category)'\r\n  ];\r\n  \r\n  for (const indexSQL of indices) {\r\n    sqlite.exec(indexSQL);\r\n  }\r\n}\r\n\r\nasync function initializeDefaultData(): Promise<void> {\r\n  try {\r\n    // Check if we have any existing data\r\n    const settingsCount = sqlite.prepare('SELECT COUNT(*) as count FROM settings').get() as { count: number };\r\n    \r\n    if (settingsCount.count === 0) {\r\n      console.log('\uD83D\uDD27 Initializing default settings...');\r\n      \r\n      const defaultSettings = [\r\n        {\r\n          key: 'app.theme',\r\n          value: JSON.stringify('dark'),\r\n          category: 'ui',\r\n          description: 'Application theme (light/dark)',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'app.version',\r\n          value: JSON.stringify('1.0.0'),\r\n          category: 'system',\r\n          description: 'Application version',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'models.default',\r\n          value: JSON.stringify(''),\r\n          category: 'models',\r\n          description: 'Default LLM model',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'performance.max_context_entries',\r\n          value: JSON.stringify(1000),\r\n          category: 'performance',\r\n          description: 'Maximum context entries to maintain',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'ui.show_welcome',\r\n          value: JSON.stringify(true),\r\n          category: 'ui',\r\n          description: 'Show welcome screen on startup',\r\n          updated: Date.now()\r\n        }\r\n      ];\r\n      \r\n      const insertSetting = sqlite.prepare(`\r\n        INSERT INTO settings (key, value, category, description, updated)\r\n        VALUES (?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      for (const setting of defaultSettings) {\r\n        insertSetting.run(\r\n          setting.key,\r\n          setting.value,\r\n          setting.category,\r\n          setting.description,\r\n          setting.updated\r\n        );\r\n      }\r\n      \r\n      console.log('\u2705 Default settings initialized');\r\n    }\r\n    \r\n    // Initialize default subject modes\r\n    await initializeDefaultSubjectModes();\r\n    \r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize default data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function initializeDefaultSubjectModes(): Promise<void> {\r\n  // Create subject_modes table if it doesn't exist\r\n  sqlite.exec(`\r\n    CREATE TABLE IF NOT EXISTS subject_modes (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      display_name TEXT NOT NULL,\r\n      description TEXT,\r\n      icon TEXT,\r\n      tools TEXT NOT NULL,\r\n      prompts TEXT,\r\n      system_prompt TEXT,\r\n      is_active INTEGER DEFAULT 1,\r\n      is_built_in INTEGER DEFAULT 0,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      usage_count INTEGER DEFAULT 0,\r\n      color TEXT,\r\n      shortcuts TEXT\r\n    )\r\n  `);\r\n  \r\n  // Check if subject modes already exist\r\n  const modesCount = sqlite.prepare('SELECT COUNT(*) as count FROM subject_modes').get() as { count: number };\r\n  \r\n  if (modesCount.count === 0) {\r\n    console.log('\uD83E\uDDE0 Initializing default subject modes...');\r\n    \r\n    const defaultModes = [\r\n      {\r\n        id: uuidv4(),\r\n        name: 'general',\r\n        displayName: 'General',\r\n        description: 'General purpose AI assistance',\r\n        icon: '\uD83D\uDCAC',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'create_todolist']),\r\n        systemPrompt: 'You are a helpful AI assistant. Be concise, accurate, and helpful.',\r\n        isBuiltIn: 1,\r\n        color: '#6366f1'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'programming',\r\n        displayName: 'Programming',\r\n        description: 'Code analysis, debugging, and development assistance',\r\n        icon: '\uD83D\uDCBB',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'analyze_code', 'generate_tests']),\r\n        systemPrompt: 'You are an expert programmer. Focus on code quality, best practices, and clear explanations.',\r\n        isBuiltIn: 1,\r\n        color: '#10b981'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'mathematics',\r\n        displayName: 'Mathematics',\r\n        description: 'Mathematical problem solving and analysis',\r\n        icon: '\uD83C\uDFAF',\r\n        tools: JSON.stringify(['solve_equation', 'plot_function', 'read_file', 'write_file']),\r\n        systemPrompt: 'You are a mathematics expert. Show step-by-step solutions and use mathematical notation when appropriate.',\r\n        isBuiltIn: 1,\r\n        color: '#f59e0b'\r\n      }\r\n    ];\r\n    \r\n    const insertMode = sqlite.prepare(`\r\n      INSERT INTO subject_modes (\r\n        id, name, display_name, description, icon, tools, system_prompt, \r\n        is_built_in, created, updated, color\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `);\r\n    \r\n    const now = Date.now();\r\n    for (const mode of defaultModes) {\r\n      insertMode.run(\r\n        mode.id,\r\n        mode.name,\r\n        mode.displayName,\r\n        mode.description,\r\n        mode.icon,\r\n        mode.tools,\r\n        mode.systemPrompt,\r\n        mode.isBuiltIn,\r\n        now,\r\n        now,\r\n        mode.color\r\n      );\r\n    }\r\n    \r\n    console.log('\u2705 Default subject modes initialized');\r\n  }\r\n}\r\n\r\nexport function getDatabase() {\r\n  if (!db) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return db;\r\n}\r\n\r\nexport function getRawDatabase(): Database.Database {\r\n  if (!sqlite) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return sqlite;\r\n}\r\n\r\n// Database health check\r\nexport function checkDatabaseHealth(): { isHealthy: boolean; details: any } {\r\n  try {\r\n    // Test basic database operations\r\n    const result = sqlite.prepare('SELECT 1 as test').get();\r\n    \r\n    // Get database size\r\n    const dbSize = sqlite.prepare(\"SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()\").get() as { size: number };\r\n    \r\n    // Get table count\r\n    const tableCount = sqlite.prepare(\"SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'\").get() as { count: number };\r\n    \r\n    return {\r\n      isHealthy: true,\r\n      details: {\r\n        testQuery: result,\r\n        databaseSize: dbSize.size,\r\n        tableCount: tableCount.count,\r\n        walMode: sqlite.pragma('journal_mode', { simple: true }),\r\n        foreignKeys: sqlite.pragma('foreign_keys', { simple: true })\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      isHealthy: false,\r\n      details: { error: error instanceof Error ? error.message : String(error) }\r\n    };\r\n  }\r\n}\r\n\r\n// Cleanup function for graceful shutdown\r\nexport function closeDatabase(): void {\r\n  if (sqlite) {\r\n    try {\r\n      sqlite.close();\r\n      console.log('\uD83D\uDCCA Database connection closed');\r\n    } catch (error) {\r\n      console.error('\u274C Error closing database:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Handle app shutdown\r\napp.on('before-quit', () => {\r\n  closeDatabase();\r\n}); ", "import { sqliteTable, text, integer, blob, real } from 'drizzle-orm/sqlite-core';\r\nimport { relations } from 'drizzle-orm';\r\n\r\n// Projects table for workspace management\r\nexport const projects = sqliteTable('projects', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  path: text('path').notNull(),\r\n  description: text('description'),\r\n  language: text('language'), // Primary programming language\r\n  framework: text('framework'), // Framework or platform\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastOpened: integer('last_opened', { mode: 'timestamp' }),\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  settings: blob('settings', { mode: 'json' }) // Project-specific settings\r\n});\r\n\r\n// Enhanced chat system with CRUD operations\r\nexport const chatSessions = sqliteTable('chat_sessions', {\r\n  id: text('id').primaryKey(),\r\n  projectId: text('project_id').references(() => projects.id),\r\n  title: text('title').notNull(),\r\n  description: text('description'),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  isArchived: integer('is_archived', { mode: 'boolean' }).default(false),\r\n  isFavorite: integer('is_favorite', { mode: 'boolean' }).default(false),\r\n  messageCount: integer('message_count').default(0),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  subjectMode: text('subject_mode').default('general'), // mathematics, programming, etc.\r\n  modelUsed: text('model_used'), // Which LLM model was primarily used\r\n  totalTokens: integer('total_tokens').default(0),\r\n  executionTime: integer('execution_time_ms').default(0)\r\n});\r\n\r\nexport const chatHistory = sqliteTable('chat_history', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  role: text('role').notNull(), // 'user' | 'assistant' | 'system' | 'tool'\r\n  content: text('content').notNull(),\r\n  metadata: blob('metadata', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  parentMessageId: text('parent_message_id'),\r\n  toolsUsed: blob('tools_used', { mode: 'json' }),\r\n  executionTime: integer('execution_time_ms'),\r\n  tokenCount: integer('token_count'),\r\n  model: text('model'), // Which model generated this message\r\n  temperature: real('temperature'), // Model parameters used\r\n  complexity: text('complexity'), // atomic | moderate | complex | expert\r\n  qualityScore: real('quality_score') // Quality assessment score\r\n});\r\n\r\n// Context management system for intelligent context handling\r\nexport const contextEntries = sqliteTable('context_entries', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  type: text('type').notNull(), // 'file', 'function', 'concept', 'memory', 'error', 'solution'\r\n  key: text('key').notNull(),\r\n  value: text('value').notNull(),\r\n  vectorEmbedding: blob('vector_embedding'), // For semantic search\r\n  importance: real('importance').default(1.0),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }).notNull(),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  source: text('source'), // Where this context came from\r\n  expiry: integer('expiry', { mode: 'timestamp' }), // When to auto-remove\r\n  compressed: integer('compressed', { mode: 'boolean' }).default(false)\r\n});\r\n\r\n// Workflow system for saving and reusing chat patterns\r\nexport const workflows = sqliteTable('workflows', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  category: text('category').notNull(), // 'project-management', 'code-generation', etc.\r\n  definition: blob('definition', { mode: 'json' }).notNull(), // LangChain workflow definition\r\n  variables: blob('variables', { mode: 'json' }).notNull(), // Required/optional variables\r\n  metadata: blob('metadata', { mode: 'json' }).notNull(), // Additional metadata\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isPublic: integer('is_public', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  createdBy: text('created_by'), // User/source identification\r\n  version: text('version').default('1.0.0'),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  estimatedTime: integer('estimated_time_ms'), // Expected execution time\r\n  successRate: real('success_rate'), // Historical success rate\r\n  usageCount: integer('usage_count').default(0)\r\n});\r\n\r\nexport const workflowExecutions = sqliteTable('workflow_executions', {\r\n  id: text('id').primaryKey(),\r\n  workflowId: text('workflow_id').references(() => workflows.id, { onDelete: 'cascade' }),\r\n  sessionId: text('session_id').references(() => chatSessions.id),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'pending' | 'running' | 'completed' | 'failed' | 'cancelled'\r\n  result: blob('result', { mode: 'json' }),\r\n  errorMessage: text('error_message'),\r\n  errorStack: text('error_stack'),\r\n  started: integer('started', { mode: 'timestamp' }).notNull(),\r\n  completed: integer('completed', { mode: 'timestamp' }),\r\n  executionTimeMs: integer('execution_time_ms'),\r\n  stepsCompleted: integer('steps_completed').default(0),\r\n  totalSteps: integer('total_steps'),\r\n  progress: real('progress').default(0.0) // 0.0 to 1.0\r\n});\r\n\r\n// MCP server management for external tool integration\r\nexport const mcpServers = sqliteTable('mcp_servers', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  transport: text('transport').notNull(), // 'stdio' | 'sse' | 'websocket'\r\n  config: blob('config', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'connected' | 'disconnected' | 'error' | 'unknown'\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastConnected: integer('last_connected', { mode: 'timestamp' }),\r\n  lastError: text('last_error'),\r\n  isAutoRestart: integer('is_auto_restart', { mode: 'boolean' }).default(true),\r\n  restartCount: integer('restart_count').default(0),\r\n  version: text('version'),\r\n  capabilities: blob('capabilities', { mode: 'json' }),\r\n  healthScore: real('health_score').default(1.0), // 0.0 to 1.0\r\n  responseTime: integer('response_time_ms'), // Average response time\r\n  uptime: integer('uptime_seconds').default(0)\r\n});\r\n\r\n// Model configurations and performance tracking\r\nexport const modelConfigurations = sqliteTable('model_configurations', {\r\n  id: text('id').primaryKey(),\r\n  modelName: text('model_name').notNull(),\r\n  displayName: text('display_name'),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  performance: blob('performance', { mode: 'json' }),\r\n  isDefault: integer('is_default', { mode: 'boolean' }).default(false),\r\n  isInstalled: integer('is_installed', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }),\r\n  usageCount: integer('usage_count').default(0),\r\n  averageTokensPerSecond: real('avg_tokens_per_second'),\r\n  averageResponseTime: integer('avg_response_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  diskSize: integer('disk_size_mb'),\r\n  downloadProgress: real('download_progress').default(0.0), // 0.0 to 1.0\r\n  lastBenchmark: integer('last_benchmark', { mode: 'timestamp' })\r\n});\r\n\r\n// Subject-specific tool configurations and modes\r\nexport const subjectModes = sqliteTable('subject_modes', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  displayName: text('display_name').notNull(),\r\n  description: text('description'),\r\n  icon: text('icon'), // Emoji or icon identifier\r\n  tools: blob('tools', { mode: 'json' }).notNull(), // Available tools in this mode\r\n  prompts: blob('prompts', { mode: 'json' }), // Mode-specific prompts\r\n  systemPrompt: text('system_prompt'), // Default system prompt for this mode\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isBuiltIn: integer('is_built_in', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  usageCount: integer('usage_count').default(0),\r\n  color: text('color'), // Theme color for UI\r\n  shortcuts: blob('shortcuts', { mode: 'json' }) // Keyboard shortcuts\r\n});\r\n\r\n// System settings and user preferences\r\nexport const settings = sqliteTable('settings', {\r\n  key: text('key').primaryKey(),\r\n  value: blob('value', { mode: 'json' }).notNull(),\r\n  category: text('category'), // 'ui', 'performance', 'models', etc.\r\n  description: text('description'),\r\n  isUserConfigurable: integer('is_user_configurable', { mode: 'boolean' }).default(true),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull()\r\n});\r\n\r\n// Performance and analytics tracking\r\nexport const analytics = sqliteTable('analytics', {\r\n  id: text('id').primaryKey(),\r\n  event: text('event').notNull(), // Event type\r\n  data: blob('data', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  sessionId: text('session_id'),\r\n  modelUsed: text('model_used'),\r\n  executionTime: integer('execution_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  cpuUsage: real('cpu_usage_percent'),\r\n  success: integer('success', { mode: 'boolean' })\r\n});\r\n\r\n// Define relationships\r\nexport const projectsRelations = relations(projects, ({ many }) => ({\r\n  chatSessions: many(chatSessions)\r\n}));\r\n\r\nexport const chatSessionsRelations = relations(chatSessions, ({ one, many }) => ({\r\n  project: one(projects, {\r\n    fields: [chatSessions.projectId],\r\n    references: [projects.id]\r\n  }),\r\n  messages: many(chatHistory),\r\n  contextEntries: many(contextEntries),\r\n  workflowExecutions: many(workflowExecutions)\r\n}));\r\n\r\nexport const chatHistoryRelations = relations(chatHistory, ({ one }) => ({\r\n  session: one(chatSessions, {\r\n    fields: [chatHistory.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\nexport const workflowsRelations = relations(workflows, ({ many }) => ({\r\n  executions: many(workflowExecutions)\r\n}));\r\n\r\nexport const workflowExecutionsRelations = relations(workflowExecutions, ({ one }) => ({\r\n  workflow: one(workflows, {\r\n    fields: [workflowExecutions.workflowId],\r\n    references: [workflows.id]\r\n  }),\r\n  session: one(chatSessions, {\r\n    fields: [workflowExecutions.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\n// Type exports for use in application\r\nexport type Project = typeof projects.$inferSelect;\r\nexport type NewProject = typeof projects.$inferInsert;\r\nexport type ChatSession = typeof chatSessions.$inferSelect;\r\nexport type NewChatSession = typeof chatSessions.$inferInsert;\r\nexport type ChatMessage = typeof chatHistory.$inferSelect;\r\nexport type NewChatMessage = typeof chatHistory.$inferInsert;\r\nexport type ContextEntry = typeof contextEntries.$inferSelect;\r\nexport type NewContextEntry = typeof contextEntries.$inferInsert;\r\nexport type Workflow = typeof workflows.$inferSelect;\r\nexport type NewWorkflow = typeof workflows.$inferInsert;\r\nexport type WorkflowExecution = typeof workflowExecutions.$inferSelect;\r\nexport type NewWorkflowExecution = typeof workflowExecutions.$inferInsert;\r\nexport type MCPServer = typeof mcpServers.$inferSelect;\r\nexport type NewMCPServer = typeof mcpServers.$inferInsert;\r\nexport type ModelConfiguration = typeof modelConfigurations.$inferSelect;\r\nexport type NewModelConfiguration = typeof modelConfigurations.$inferInsert;\r\nexport type SubjectMode = typeof subjectModes.$inferSelect;\r\nexport type NewSubjectMode = typeof subjectModes.$inferInsert;\r\nexport type Setting = typeof settings.$inferSelect;\r\nexport type NewSetting = typeof settings.$inferInsert; ", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "interface OllamaModel {\n  name: string;\n  size: number;\n  digest: string;\n  details: {\n    format: string;\n    family: string;\n    families: string[];\n    parameter_size: string;\n    quantization_level: string;\n    architecture: string;\n  };\n  performance?: ModelPerformance;\n}\n\ninterface ModelPerformance {\n  tokensPerSecond: number;\n  ramUsage: number;\n  vramUsage?: number;\n  cpuUsage: number;\n  lastBenchmark: Date;\n}\n\ninterface RecommendedModel {\n  name: string;\n  displayName: string;\n  description: string;\n  size: number;\n  parameterCount: string;\n  specialization: string[];\n  requirements: {\n    minRam: number;\n    recommendedRam: number;\n    minVram?: number;\n    recommendedVram?: number;\n    quantizationOptions?: string[];\n  };\n  estimatedPerformance: {\n    tokensPerSecondCPU: number;\n    tokensPerSecondGPU?: number;\n    contextLength: number;\n  };\n}interface GenerateRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_ctx?: number;\n    repeat_penalty?: number;\n    seed?: number;\n    num_thread?: number;\n    num_gpu?: number;\n    main_gpu?: number;\n    low_vram?: boolean;\n    f16_kv?: boolean;\n    use_mlock?: boolean;\n    use_mmap?: boolean;\n  };\n}\n\ninterface SystemInfo {\n  cpuCores: number;\n  availableRam: number;\n  gpuCount: number;\n  totalVram: number;\n}export class OllamaService {\n  private baseUrl = 'http://localhost:11434';\n  private performanceCache = new Map<string, ModelPerformance>();\n\n  async listModels(): Promise<OllamaModel[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data = await response.json();\n      \n      // Enrich with performance data\n      return (data.models || []).map(model => ({\n        ...model,\n        performance: this.performanceCache.get(model.name)\n      }));\n    } catch (error) {\n      console.error('Failed to list models:', error);\n      return [];\n    }\n  }\n\n  async checkOllamaHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async generate(request: GenerateRequest): Promise<any> {\n    const response = await fetch(`${this.baseUrl}/api/generate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(request)\n    });\n    return response.json();\n  }\n\n  async getModelCatalog(): Promise<RecommendedModel[]> {\n    return [\n      {\n        name: 'qwq:32b',\n        displayName: 'QwQ-32B',\n        description: 'Advanced reasoning model with chain-of-thought capabilities',\n        size: 19.8,\n        parameterCount: '32B',\n        specialization: ['reasoning', 'mathematics', 'analysis'],\n        requirements: {\n          minRam: 24,\n          recommendedRam: 32,\n          minVram: 12,\n          recommendedVram: 20,\n          quantizationOptions: ['Q4_K_M', 'Q5_K_M', 'Q8_0']\n        },\n        estimatedPerformance: {\n          tokensPerSecondCPU: 12,\n          tokensPerSecondGPU: 28,\n          contextLength: 32768\n        }\n      },\n      {\n        name: 'deepseek-r1-distill-qwen:32b',\n        displayName: 'DeepSeek R1 Distill Qwen 32B',\n        description: 'Distilled reasoning model optimized for efficiency',\n        size: 14.9,\n        parameterCount: '32B',\n        specialization: ['reasoning', 'coding', 'problem-solving'],\n        requirements: {\n          minRam: 18,\n          recommendedRam: 24,\n          minVram: 8,\n          recommendedVram: 14,\n          quantizationOptions: ['Q4_K_M', 'Q5_K_M']\n        },\n        estimatedPerformance: {\n          tokensPerSecondCPU: 10,\n          tokensPerSecondGPU: 25,\n          contextLength: 32768\n        }\n      }\n    ];\n  }  async pullModelWithOptimization(\n    name: string, \n    onProgress?: (progress: any) => void\n  ): Promise<void> {\n    await this.setOptimizationFlags();\n    \n    const response = await fetch(`${this.baseUrl}/api/pull`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name, stream: true })\n    });\n\n    if (!response.body) throw new Error('No response body');\n    \n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n').filter(line => line.trim());\n      \n      for (const line of lines) {\n        try {\n          const progress = JSON.parse(line);\n          onProgress?.(progress);\n        } catch (e) {\n          // Skip invalid JSON lines\n        }\n      }\n    }\n    \n    await this.benchmarkModel(name);\n  }\n\n  private async setOptimizationFlags(): Promise<void> {\n    process.env.OLLAMA_FLASH_ATTENTION = '1';\n    process.env.OLLAMA_KV_CACHE_TYPE = 'q8_0';\n    process.env.OLLAMA_NUM_PARALLEL = '4';\n    process.env.OLLAMA_MAX_LOADED_MODELS = '2';\n  }\n\n  async benchmarkModel(modelName: string): Promise<ModelPerformance> {\n    const startTime = Date.now();\n    const testPrompt = \"Write a short explanation of quantum computing in simple terms.\";\n    \n    try {\n      const response = await this.generate({\n        model: modelName,\n        prompt: testPrompt,\n        options: { num_ctx: 2048 }\n      });\n      \n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n      const estimatedTokens = response.response?.length / 4 || 100;\n      const tokensPerSecond = (estimatedTokens / executionTime) * 1000;\n      \n      const performance: ModelPerformance = {\n        tokensPerSecond,\n        ramUsage: await this.getModelMemoryUsage(modelName),\n        cpuUsage: 0,\n        lastBenchmark: new Date()\n      };\n      \n      this.performanceCache.set(modelName, performance);\n      return performance;\n    } catch (error) {\n      throw new Error(`Benchmark failed for ${modelName}: ${error}`);\n    }\n  }\n\n  async generateWithOptimization(request: GenerateRequest): Promise<any> {\n    const optimizedRequest = await this.optimizeRequest(request);\n    \n    const response = await fetch(`${this.baseUrl}/api/generate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(optimizedRequest)\n    });\n    return response.json();\n  }\n\n  private async optimizeRequest(request: GenerateRequest): Promise<GenerateRequest> {\n    const systemInfo = await this.getSystemInfo();\n    \n    return {\n      ...request,\n      options: {\n        ...request.options,\n        num_thread: Math.min(systemInfo.cpuCores, 8),\n        num_gpu: systemInfo.gpuCount,\n        num_ctx: this.calculateOptimalContextLength(request.model, systemInfo),\n        f16_kv: systemInfo.availableRam > 16,\n        use_mlock: systemInfo.availableRam > 32,\n        use_mmap: true\n      }\n    };\n  }\n\n  private async getSystemInfo(): Promise<SystemInfo> {\n    const os = require('os');\n    return {\n      cpuCores: os.cpus().length,\n      availableRam: Math.round(os.freemem() / (1024 ** 3)),\n      gpuCount: 0,\n      totalVram: 0\n    };\n  }\n\n  private calculateOptimalContextLength(modelName: string, systemInfo: SystemInfo): number {\n    const baseContext = 2048;\n    const maxContext = 32768;\n    \n    if (systemInfo.availableRam > 16) {\n      return Math.min(maxContext, baseContext * 4);\n    } else if (systemInfo.availableRam > 8) {\n      return Math.min(maxContext, baseContext * 2);\n    }\n    \n    return baseContext;\n  }\n\n  private async getModelMemoryUsage(modelName: string): Promise<number> {\n    const models = await this.listModels();\n    const model = models.find(m => m.name === modelName);\n    return model ? model.size * 1.2 : 0;\n  }\n\n  async deleteModel(modelName: string): Promise<void> {\n    await fetch(`${this.baseUrl}/api/delete`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: modelName })\n    });\n    \n    this.performanceCache.delete(modelName);\n  }\n\n  getPerformanceMetrics(modelName: string): ModelPerformance | undefined {\n    return this.performanceCache.get(modelName);\n  }\n}", "interface SystemInfo {\n  cpu: {\n    brand: string;\n    model: string;\n    cores: number;\n    threads: number;\n    clockSpeed: number;\n    architecture: string;\n    cache: {\n      l1d?: number;\n      l1i?: number;\n      l2?: number;\n      l3?: number;\n    };\n  };\n  memory: {\n    total: number;\n    available: number;\n    used: number;\n    type: string;\n    speed?: number;\n    slots: number;\n  };\n  gpu: {\n    name: string;\n    vendor: string;\n    vram: number;\n    driver?: string;\n    computeCapability?: string;\n    supports: string[];\n  }[];\n  storage: {\n    drives: {\n      name: string;\n      type: 'SSD' | 'HDD' | 'NVMe';\n      size: number;\n      available: number;\n      speed?: number;\n    }[];\n  };\n}interface PerformanceMetrics {\n  cpu: {\n    usage: number;\n    temperature?: number;\n    frequency: number;\n  };\n  memory: {\n    usage: number;\n    available: number;\n    cached: number;\n  };\n  gpu: {\n    usage: number;\n    memory: number;\n    temperature?: number;\n  }[];\n  disk: {\n    readSpeed: number;\n    writeSpeed: number;\n    usage: number;\n  };\n}\n\nexport class SystemMonitor {\n  private metricsCache = new Map<string, PerformanceMetrics>();\n  private lastUpdate = 0;\n  private updateInterval = 5000; // 5 seconds\n\n  async getSystemInfo(): Promise<SystemInfo> {\n    const os = require('os');\n    const { execSync } = require('child_process');\n    \n    // CPU Information\n    const cpus = os.cpus();\n    const cpu = {\n      brand: this.getCPUBrand(),\n      model: cpus[0]?.model || 'Unknown',\n      cores: cpus.length,\n      threads: cpus.length, // Simplified\n      clockSpeed: cpus[0]?.speed || 0,\n      architecture: os.arch(),\n      cache: await this.getCPUCache()\n    };\n    \n    // Memory Information\n    const memory = {\n      total: Math.round(os.totalmem() / (1024 ** 3)),\n      available: Math.round(os.freemem() / (1024 ** 3)),\n      used: Math.round((os.totalmem() - os.freemem()) / (1024 ** 3)),\n      type: await this.getMemoryType(),\n      speed: await this.getMemorySpeed(),\n      slots: await this.getMemorySlots()\n    };\n    \n    return {\n      cpu,\n      memory,\n      gpu: await this.detectGPUs(),\n      storage: await this.getStorageInfo()\n    };\n  }\n\n  private getCPUBrand(): string {\n    const os = require('os');\n    const cpus = os.cpus();\n    if (cpus[0]?.model.includes('Intel')) return 'Intel';\n    if (cpus[0]?.model.includes('AMD')) return 'AMD';\n    return 'Unknown';\n  }\n\n  private async getCPUCache(): Promise<any> {\n    // Platform-specific cache detection would go here\n    return {\n      l1d: undefined,\n      l1i: undefined,\n      l2: undefined,\n      l3: undefined\n    };\n  }\n\n  private async getMemoryType(): Promise<string> {\n    // Memory type detection (DDR4, DDR5, etc.)\n    return 'DDR4'; // Simplified\n  }\n\n  private async getMemorySpeed(): Promise<number | undefined> {\n    // Memory speed detection\n    return undefined;\n  }\n\n  private async getMemorySlots(): Promise<number> {\n    // Memory slot detection\n    return 4; // Simplified\n  }\n\n  private async detectGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      \n      if (process.platform === 'win32') {\n        return await this.detectWindowsGPUs();\n      } else if (process.platform === 'linux') {\n        return await this.detectLinuxGPUs();\n      } else if (process.platform === 'darwin') {\n        return await this.detectMacGPUs();\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('GPU detection failed:', error);\n      return [];\n    }\n  }\n\n  private async detectWindowsGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      // Use wmic to get GPU information\n      const output = execSync('wmic path win32_VideoController get name,AdapterRAM', { encoding: 'utf8' });\n      // Parse output and return GPU info\n      return [];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async detectLinuxGPUs(): Promise<any[]> {\n    // Linux GPU detection using lspci, nvidia-smi, etc.\n    return [];\n  }\n\n  private async detectMacGPUs(): Promise<any[]> {\n    // macOS GPU detection using system_profiler\n    return [];\n  }\n\n  private async getStorageInfo(): Promise<any> {\n    const os = require('os');\n    \n    return {\n      drives: [{\n        name: 'Primary Drive',\n        type: 'SSD' as const,\n        size: 500, // GB - simplified\n        available: 250,\n        speed: undefined\n      }]\n    };\n  }\n\n  async getCurrentMetrics(): Promise<PerformanceMetrics> {\n    const now = Date.now();\n    \n    if (now - this.lastUpdate < this.updateInterval) {\n      return this.metricsCache.get('current') || this.getDefaultMetrics();\n    }\n    \n    const metrics = await this.collectMetrics();\n    this.metricsCache.set('current', metrics);\n    this.lastUpdate = now;\n    \n    return metrics;\n  }\n\n  private async collectMetrics(): Promise<PerformanceMetrics> {\n    const os = require('os');\n    \n    return {\n      cpu: {\n        usage: await this.getCPUUsage(),\n        temperature: undefined,\n        frequency: os.cpus()[0]?.speed || 0\n      },\n      memory: {\n        usage: Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100),\n        available: Math.round(os.freemem() / (1024 ** 3)),\n        cached: 0\n      },\n      gpu: [],\n      disk: {\n        readSpeed: 0,\n        writeSpeed: 0,\n        usage: 0\n      }\n    };\n  }\n\n  private async getCPUUsage(): Promise<number> {\n    // CPU usage calculation\n    return Math.random() * 100; // Simplified\n  }\n\n  private getDefaultMetrics(): PerformanceMetrics {\n    return {\n      cpu: { usage: 0, frequency: 0 },\n      memory: { usage: 0, available: 0, cached: 0 },\n      gpu: [],\n      disk: { readSpeed: 0, writeSpeed: 0, usage: 0 }\n    };\n  }\n}", "interface SystemCapabilities {\n  cpu: {\n    cores: number;\n    threads: number;\n    architecture: string;\n    clockSpeed: number;\n    brand: string;\n  };\n  memory: {\n    total: number;\n    available: number;\n    type: string;\n    speed?: number;\n  };\n  gpu?: {\n    name: string;\n    vram: number;\n    computeCapability?: string;\n    supports: string[];\n  }[];\n  storage: {\n    available: number;\n    type: 'SSD' | 'HDD' | 'NVMe';\n    speed?: number;\n  };\n}\n\ninterface ModelRecommendation {\n  model: RecommendedModel;\n  compatibility: 'perfect' | 'good' | 'marginal' | 'incompatible';\n  expectedPerformance: {\n    tokensPerSecond: number;\n    ramUsage: number;\n    vramUsage?: number;\n    responseTime: number;\n  };\n  optimizations: OptimizationSuggestion[];\n  warnings?: string[];\n}\n\ninterface RecommendedModel {\n  name: string;\n  displayName: string;\n  description: string;\n  size: number;\n  parameterCount: string;\n  specialization: string[];\n}interface OptimizationSuggestion {\n  type: string;\n  description: string;\n  impact: string;\n}\n\nexport class HardwareAssessor {\n  async assessSystemCapabilities(): Promise<SystemCapabilities> {\n    const os = require('os');\n    \n    // CPU Assessment\n    const cpus = os.cpus();\n    const cpu = {\n      cores: os.cpus().length,\n      threads: os.cpus().length,\n      architecture: os.arch(),\n      clockSpeed: cpus[0]?.speed || 0,\n      brand: cpus[0]?.model || 'Unknown'\n    };\n    \n    // Memory Assessment\n    const memory = {\n      total: Math.round(os.totalmem() / (1024 ** 3)),\n      available: Math.round(os.freemem() / (1024 ** 3)),\n      type: 'DDR4'\n    };\n    \n    // GPU Assessment (platform-specific)\n    const gpu = await this.detectGPU();\n    \n    // Storage Assessment\n    const storage = await this.assessStorage();\n    \n    return { cpu, memory, gpu, storage };\n  }\n\n  async getModelRecommendations(\n    systemCaps: SystemCapabilities,\n    availableModels: RecommendedModel[]\n  ): Promise<ModelRecommendation[]> {\n    return availableModels.map(model => {\n      const compatibility = this.assessCompatibility(model, systemCaps);\n      const expectedPerformance = this.predictPerformance(model, systemCaps);\n      const optimizations = this.suggestOptimizations(model, systemCaps);\n      const warnings = this.generateWarnings(model, systemCaps);\n      \n      return {\n        model,\n        compatibility,\n        expectedPerformance,\n        optimizations,\n        warnings: warnings.length > 0 ? warnings : undefined\n      };\n    }).sort((a, b) => {\n      const compatibilityScore = {\n        'perfect': 4, 'good': 3, 'marginal': 2, 'incompatible': 1\n      };\n      \n      const scoreA = compatibilityScore[a.compatibility] * a.expectedPerformance.tokensPerSecond;\n      const scoreB = compatibilityScore[b.compatibility] * b.expectedPerformance.tokensPerSecond;\n      \n      return scoreB - scoreA;\n    });\n  }\n\n  private assessCompatibility(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): 'perfect' | 'good' | 'marginal' | 'incompatible' {\n    const ramOk = system.memory.available >= (model as any).requirements.minRam;\n    const ramGood = system.memory.available >= (model as any).requirements.recommendedRam;\n    \n    if (!ramOk) return 'incompatible';\n    \n    if (system.gpu && system.gpu.length > 0) {\n      const totalVram = system.gpu.reduce((sum, gpu) => sum + gpu.vram, 0);\n      const vramOk = totalVram >= ((model as any).requirements.minVram || 0);\n      const vramGood = totalVram >= ((model as any).requirements.recommendedVram || 0);\n      \n      if (ramGood && vramGood) return 'perfect';\n      if (ramGood && vramOk) return 'good';\n      if (ramOk) return 'marginal';\n    }\n    \n    if (ramGood) return 'good';\n    return 'marginal';\n  }\n\n  private predictPerformance(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): ModelRecommendation['expectedPerformance'] {\n    let tokensPerSecond = (model as any).estimatedPerformance.tokensPerSecondCPU;\n    \n    if (system.gpu && system.gpu.length > 0) {\n      const totalVram = system.gpu.reduce((sum, gpu) => sum + gpu.vram, 0);\n      if (totalVram >= ((model as any).requirements.recommendedVram || 0)) {\n        tokensPerSecond = (model as any).estimatedPerformance.tokensPerSecondGPU || tokensPerSecond * 2;\n      }\n    }\n    \n    const cpuMultiplier = Math.min(system.cpu.cores / 8, 1.5);\n    tokensPerSecond *= cpuMultiplier;\n    \n    return {\n      tokensPerSecond: Math.round(tokensPerSecond),\n      ramUsage: model.size * 1.2,\n      vramUsage: system.gpu ? model.size * 0.8 : undefined,\n      responseTime: (100 / tokensPerSecond) * 1000\n    };\n  }\n\n  private suggestOptimizations(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n    \n    if (system.memory.available < (model as any).requirements.recommendedRam) {\n      suggestions.push({\n        type: 'quantization',\n        description: 'Use Q4_K_M quantization to reduce memory usage',\n        impact: 'Reduces RAM usage by 60-70% with minimal quality loss'\n      });\n    }\n    \n    if (system.gpu && system.gpu.length > 0) {\n      suggestions.push({\n        type: 'gpu_acceleration',\n        description: 'Enable GPU acceleration for faster inference',\n        impact: 'Can improve speed by 2-5x depending on model size'\n      });\n    }\n    \n    suggestions.push({\n      type: 'context_optimization',\n      description: 'Optimize context window based on usage patterns',\n      impact: 'Reduces memory usage and improves response time'\n    });\n    \n    return suggestions;\n  }\n\n  private generateWarnings(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): string[] {\n    const warnings: string[] = [];\n    \n    if (system.memory.available < (model as any).requirements.minRam) {\n      warnings.push('Insufficient RAM - performance will be severely degraded');\n    }\n    \n    if (!system.gpu || system.gpu.length === 0) {\n      warnings.push('No GPU detected - will use CPU-only inference (slower)');\n    }\n    \n    if (system.storage.type === 'HDD') {\n      warnings.push('HDD storage detected - SSD recommended for better performance');\n    }\n    \n    return warnings;\n  }\n\n  private async detectGPU(): Promise<any[]> {\n    try {\n      if (process.platform === 'win32') {\n        return await this.detectWindowsGPU();\n      } else if (process.platform === 'linux') {\n        return await this.detectLinuxGPU();\n      }\n      return [];\n    } catch (error) {\n      console.error('GPU detection failed:', error);\n      return [];\n    }\n  }\n\n  private async detectWindowsGPU(): Promise<any[]> {\n    // Windows GPU detection using wmic\n    return [];\n  }\n\n  private async detectLinuxGPU(): Promise<any[]> {\n    // Linux GPU detection using lspci/nvidia-smi\n    return [];\n  }\n\n  private async assessStorage(): Promise<any> {\n    return {\n      available: 100,\n      type: 'SSD' as const,\n      speed: 500\n    };\n  }\n}", "import { OllamaService } from './ollama-service';\nimport { HardwareAssessor } from './hardware-assessor';\n\ninterface ModelInstallation {\n  modelName: string;\n  status: 'downloading' | 'installing' | 'completed' | 'failed';\n  progress: number;\n  estimatedTime?: number;\n  error?: string;\n}\n\ninterface ModelConfiguration {\n  name: string;\n  parameters: {\n    temperature: number;\n    top_p: number;\n    top_k: number;\n    num_ctx: number;\n    repeat_penalty: number;\n    seed?: number;\n  };\n  optimizations: {\n    quantization?: string;\n    num_thread?: number;\n    num_gpu?: number;\n    f16_kv?: boolean;\n    use_mlock?: boolean;\n    use_mmap?: boolean;\n  };\n  isDefault: boolean;\n}\n\nexport class ModelManager {\n  private ollamaService: OllamaService;\n  private hardwareAssessor: HardwareAssessor;\n  private installations = new Map<string, ModelInstallation>();\n  private configurations = new Map<string, ModelConfiguration>();\n\n  constructor() {\n    this.ollamaService = new OllamaService();\n    this.hardwareAssessor = new HardwareAssessor();\n  }\n\n  async getRecommendedModels(): Promise<any[]> {\n    const catalog = await this.ollamaService.getModelCatalog();\n    const systemCaps = await this.hardwareAssessor.assessSystemCapabilities();\n    \n    return this.hardwareAssessor.getModelRecommendations(systemCaps, catalog);\n  }\n\n  async installModel(\n    modelName: string,\n    onProgress?: (progress: ModelInstallation) => void\n  ): Promise<void> {\n    const installation: ModelInstallation = {\n      modelName,\n      status: 'downloading',\n      progress: 0\n    };\n    \n    this.installations.set(modelName, installation);\n    onProgress?.(installation);\n    \n    try {\n      await this.ollamaService.pullModelWithOptimization(modelName, (progress) => {\n        installation.progress = this.calculateProgress(progress);\n        installation.status = progress.status === 'success' ? 'completed' : 'downloading';\n        this.installations.set(modelName, installation);\n        onProgress?.(installation);\n      });\n      \n      installation.status = 'completed';\n      installation.progress = 100;\n      this.installations.set(modelName, installation);\n      onProgress?.(installation);\n      \n    } catch (error) {\n      installation.status = 'failed';\n      installation.error = error.message;\n      this.installations.set(modelName, installation);\n      onProgress?.(installation);\n      throw error;\n    }\n  }\n\n  async uninstallModel(modelName: string): Promise<void> {\n    try {\n      await this.ollamaService.deleteModel(modelName);\n      this.installations.delete(modelName);\n      this.configurations.delete(modelName);\n    } catch (error) {\n      throw new Error(`Failed to uninstall model ${modelName}: ${error.message}`);\n    }\n  }\n\n  private calculateProgress(progress: any): number {\n    if (progress.completed && progress.total) {\n      return Math.round((progress.completed / progress.total) * 100);\n    }\n    return 0;\n  }\n\n  getInstallationStatus(modelName: string): ModelInstallation | undefined {\n    return this.installations.get(modelName);\n  }\n}", "interface OptimizationProfile {\n  name: string;\n  description: string;\n  settings: {\n    kvCacheType: 'q4_0' | 'q8_0' | 'f16' | 'f32';\n    numParallel: number;\n    maxLoadedModels: number;\n    flashAttention: boolean;\n    memoryMapping: boolean;\n    memoryLocking: boolean;\n    contextLength: number;\n    batchSize: number;\n    threadCount: number;\n    gpuLayers?: number;\n  };\n}\n\ninterface PerformanceMetrics {\n  tokensPerSecond: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  gpuUsage?: number;\n  latency: number;\n  throughput: number;\n}\n\nexport class OptimizationEngine {\n  private profiles = new Map<string, OptimizationProfile>();\n  private activeProfile: string = 'balanced';\n\n  constructor() {\n    this.initializeProfiles();\n  }\n\n  async optimizeForHardware(systemInfo: any): Promise<OptimizationProfile> {\n    // Analyze hardware and return optimized profile\n    if (systemInfo.memory.available > 16 && systemInfo.gpu?.length > 0) {\n      return this.profiles.get('performance')!;\n    } else if (systemInfo.memory.available < 8) {\n      return this.profiles.get('memory')!;\n    }\n    return this.profiles.get('balanced')!;\n  }\n\n  getProfile(name: string): OptimizationProfile | undefined {\n    return this.profiles.get(name);\n  }\n\n  getAllProfiles(): OptimizationProfile[] {\n    return Array.from(this.profiles.values());\n  }\n\n  setActiveProfile(name: string): void {\n    if (this.profiles.has(name)) {\n      this.activeProfile = name;\n    }\n  }\n\n  private initializeProfiles(): void {\n    // Performance profile\n    this.profiles.set('performance', {\n      name: 'Performance',\n      description: 'Maximum speed, higher memory usage',\n      settings: {\n        kvCacheType: 'f16',\n        numParallel: 8,\n        maxLoadedModels: 1,\n        flashAttention: true,\n        memoryMapping: true,\n        memoryLocking: true,\n        contextLength: 4096,\n        batchSize: 512,\n        threadCount: -1,\n        gpuLayers: -1\n      }\n    });\n\n    // Memory efficient profile\n    this.profiles.set('memory', {\n      name: 'Memory Efficient',\n      description: 'Lower memory usage, moderate speed',\n      settings: {\n        kvCacheType: 'q4_0',\n        numParallel: 2,\n        maxLoadedModels: 1,\n        flashAttention: true,\n        memoryMapping: false,\n        memoryLocking: false,\n        contextLength: 2048,\n        batchSize: 128,\n        threadCount: 4,\n        gpuLayers: 20\n      }\n    });\n\n    // Balanced profile\n    this.profiles.set('balanced', {\n      name: 'Balanced',\n      description: 'Good balance of speed and memory usage',\n      settings: {\n        kvCacheType: 'q8_0',\n        numParallel: 4,\n        maxLoadedModels: 2,\n        flashAttention: true,\n        memoryMapping: true,\n        memoryLocking: false,\n        contextLength: 3072,\n        batchSize: 256,\n        threadCount: 6,\n        gpuLayers: 32\n      }\n    });\n  }\n\n  async applyOptimizations(profile: OptimizationProfile): Promise<void> {\n    // Apply optimization settings to Ollama environment\n    process.env.OLLAMA_KV_CACHE_TYPE = profile.settings.kvCacheType;\n    process.env.OLLAMA_NUM_PARALLEL = profile.settings.numParallel.toString();\n    process.env.OLLAMA_MAX_LOADED_MODELS = profile.settings.maxLoadedModels.toString();\n    process.env.OLLAMA_FLASH_ATTENTION = profile.settings.flashAttention ? '1' : '0';\n  }\n}", "interface ParameterSet {\n  temperature: number;\n  top_p: number;\n  top_k: number;\n  repeat_penalty: number;\n  num_ctx: number;\n  seed?: number;\n}\n\ninterface TuningResult {\n  parameters: ParameterSet;\n  score: number;\n  metrics: {\n    coherence: number;\n    relevance: number;\n    creativity: number;\n    factualness: number;\n    speed: number;\n  };\n}\n\ninterface TuningTarget {\n  task: 'coding' | 'creative' | 'analytical' | 'conversational' | 'factual';\n  priority: 'speed' | 'quality' | 'balanced';\n  constraints: {\n    maxContextLength?: number;\n    targetSpeed?: number;\n    qualityThreshold?: number;\n  };\n}\n\nexport class ParameterTuner {\n  private presets = new Map<string, ParameterSet>();\n  private tuningHistory: TuningResult[] = [];\n\n  constructor() {\n    this.initializePresets();\n  }\n\n  getPreset(task: string): ParameterSet | undefined {\n    return this.presets.get(task);\n  }\n\n  getDefaultParameters(): ParameterSet {\n    return {\n      temperature: 0.5,\n      top_p: 0.9,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 2048\n    };\n  }\n\n  getAllPresets(): Map<string, ParameterSet> {\n    return new Map(this.presets);\n  }\n\n  private initializePresets(): void {\n    this.presets.set('coding', {\n      temperature: 0.1,\n      top_p: 0.95,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 4096\n    });\n\n    this.presets.set('creative', {\n      temperature: 0.8,\n      top_p: 0.9,\n      top_k: 50,\n      repeat_penalty: 1.05,\n      num_ctx: 2048\n    });\n\n    this.presets.set('analytical', {\n      temperature: 0.2,\n      top_p: 0.9,\n      top_k: 30,\n      repeat_penalty: 1.15,\n      num_ctx: 4096\n    });\n\n    this.presets.set('conversational', {\n      temperature: 0.7,\n      top_p: 0.95,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 2048\n    });\n  }\n\n  async generateParameterVariations(base: ParameterSet): Promise<ParameterSet[]> {\n    const variations: ParameterSet[] = [];\n    const tempVariations = [base.temperature * 0.8, base.temperature, base.temperature * 1.2];\n    const topPVariations = [Math.max(0.1, base.top_p - 0.1), base.top_p, Math.min(1.0, base.top_p + 0.1)];\n\n    for (const temp of tempVariations) {\n      for (const topP of topPVariations) {\n        variations.push({\n          ...base,\n          temperature: Math.max(0.01, Math.min(2.0, temp)),\n          top_p: topP\n        });\n      }\n    }\n\n    return variations;\n  }\n\n  async optimizeForTask(task: string, modelName: string): Promise<ParameterSet> {\n    const preset = this.getPreset(task) || this.getDefaultParameters();\n    return preset; // Simplified - would implement actual optimization\n  }\n}", "interface ContextEntry {\n  id: string;\n  sessionId: string;\n  type: 'file' | 'function' | 'concept' | 'memory';\n  key: string;\n  value: string;\n  vectorEmbedding?: Float32Array;\n  importance: number;\n  lastUsed: Date;\n  created: Date;\n}\n\ninterface MCPContextServer {\n  updateContext(sessionId: string, entry: ContextEntry): Promise<void>;\n}\n\nexport class ContextManager {\n  private vectorCache = new Map<string, Float32Array>();\n  private mcpContextServer: MCPContextServer;\n\n  constructor() {\n    this.mcpContextServer = {} as MCPContextServer; // Placeholder\n  }\n\n  async storeContext(\n    sessionId: string,\n    type: ContextEntry['type'],\n    key: string,\n    value: string,\n    importance = 1.0\n  ): Promise<void> {\n    const embedding = await this.generateEmbedding(value);\n    \n    const entry: ContextEntry = {\n      id: crypto.randomUUID(),\n      sessionId,\n      type,\n      key,\n      value,\n      vectorEmbedding: embedding,\n      importance,\n      lastUsed: new Date(),\n      created: new Date()\n    };\n    \n    await this.persistContextEntry(entry);\n    await this.mcpContextServer.updateContext(sessionId, entry);\n  }\n\n  async retrieveRelevantContext(\n    sessionId: string,\n    query: string,\n    maxResults = 10\n  ): Promise<ContextEntry[]> {\n    const queryEmbedding = await this.generateEmbedding(query);\n    const allEntries = await this.getSessionContext(sessionId);\n    \n    const scoredEntries = allEntries.map(entry => ({\n      entry,\n      score: this.calculateSimilarity(queryEmbedding, entry.vectorEmbedding || new Float32Array())\n    }));\n    \n    scoredEntries.sort((a, b) => (b.score * b.entry.importance) - (a.score * a.entry.importance));\n    \n    return scoredEntries.slice(0, maxResults).map(item => item.entry);\n  }\n\n  async optimizeContext(sessionId: string): Promise<void> {\n    const entries = await this.getSessionContext(sessionId);\n    \n    // Remove low-importance, old entries\n    const cutoffDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 days\n    const toRemove = entries.filter(entry => \n      entry.importance < 0.3 && entry.lastUsed < cutoffDate\n    );\n    \n    for (const entry of toRemove) {\n      await this.removeContextEntry(entry.id);\n    }\n    \n    // Compress similar entries\n    await this.compressSimilarEntries(sessionId);\n  }\n\n  private async generateEmbedding(text: string): Promise<Float32Array> {\n    // Simplified embedding generation - would use actual embedding model\n    const hash = this.simpleHash(text);\n    const embedding = new Float32Array(384); // Typical embedding size\n    \n    for (let i = 0; i < embedding.length; i++) {\n      embedding[i] = Math.sin(hash + i) * 0.1;\n    }\n    \n    return embedding;\n  }\n\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash;\n  }\n\n  private calculateSimilarity(a: Float32Array, b: Float32Array): number {\n    if (a.length !== b.length) return 0;\n    \n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    \n    for (let i = 0; i < a.length; i++) {\n      dotProduct += a[i] * b[i];\n      normA += a[i] * a[i];\n      normB += b[i] * b[i];\n    }\n    \n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  private async persistContextEntry(entry: ContextEntry): Promise<void> {\n    // Store in database - placeholder\n  }\n\n  private async getSessionContext(sessionId: string): Promise<ContextEntry[]> {\n    // Retrieve from database - placeholder\n    return [];\n  }\n\n  private async removeContextEntry(entryId: string): Promise<void> {\n    // Remove from database - placeholder\n  }\n\n  private async compressSimilarEntries(sessionId: string): Promise<void> {\n    // Compress similar entries - placeholder\n  }\n}"],
  "mappings": "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",
  "names": ["import_electron", "import_path", "path", "import_electron", "import_better_sqlite3", "import_path", "import_electron", "crypto", "import_crypto", "crypto", "path", "Database", "sqlite", "db", "app", "text", "path"]
}
