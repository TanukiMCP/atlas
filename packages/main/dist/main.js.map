{
  "version": 3,
  "sources": ["../src/main.ts", "../src/window.ts", "../src/ipc/handlers.ts", "../src/database/connection.ts", "../src/database/schema.ts", "../../../node_modules/uuid/dist/esm-node/rng.js", "../../../node_modules/uuid/dist/esm-node/stringify.js", "../../../node_modules/uuid/dist/esm-node/native.js", "../../../node_modules/uuid/dist/esm-node/v4.js", "../src/services/ollama-service.ts", "../src/services/openrouter-service.ts", "../src/services/system-monitor.ts", "../src/services/hardware-assessor.ts", "../src/services/model-manager.ts", "../src/services/optimization-engine.ts", "../src/services/parameter-tuner.ts", "../src/services/context-manager.ts", "../src/services/system-tray.ts", "../src/services/native-menu.ts", "../src/services/auto-updater.ts", "../src/services/notification-service.ts", "../src/services/crash-reporter.ts", "../src/services/protocol-handler.ts", "../../llm-enhanced/src/router/complexityAssessor.ts", "../../llm-enhanced/src/router/tier1Processor.ts", "../../llm-enhanced/src/router/tier2Processor.ts", "../../llm-enhanced/src/router/tier3Processor.ts", "../../llm-enhanced/src/router/tier4Processor.ts", "../../llm-enhanced/src/router/router.ts", "../../llm-enhanced/src/services/llm-service.ts", "../../llm-enhanced/src/services/mcp-client-adapter.ts", "../../llm-enhanced/src/enhanced-llm-service.ts", "../../mcp-hub/src/client-hub.ts", "../../mcp-hub/src/transports/stdio-transport.ts", "../../mcp-hub/src/transports/base-transport.ts", "../../mcp-hub/src/transports/sse-transport.ts", "../../mcp-hub/src/transports/websocket-transport.ts", "../../mcp-hub/src/transports/transport-factory.ts", "../../mcp-hub/src/health/health-monitor.ts", "../../llm-enhanced/src/services/ollama-adapter.ts"],
  "sourcesContent": ["import { app, BrowserWindow } from 'electron';\r\nimport path from 'path';\r\nimport { createWindow } from './window';\r\nimport { setupIPC } from './ipc/handlers';\r\nimport { initializeDatabase } from './database/connection';\r\nimport { OllamaService } from './services/ollama-service';\r\nimport { OpenRouterService } from './services/openrouter-service';\r\nimport { SystemMonitor } from './services/system-monitor';\r\nimport { ModelManager } from './services/model-manager';\r\nimport { HardwareAssessor } from './services/hardware-assessor';\r\nimport { OptimizationEngine } from './services/optimization-engine';\r\nimport { ParameterTuner } from './services/parameter-tuner';\r\nimport { ContextManager } from './services/context-manager';\r\nimport { SystemTrayService } from './services/system-tray';\r\nimport { NativeMenuService } from './services/native-menu';\r\nimport { AutoUpdaterService } from './services/auto-updater';\r\nimport { NotificationService } from './services/notification-service';\r\nimport { CrashReporterService } from './services/crash-reporter';\r\nimport { ProtocolHandlerService } from './services/protocol-handler';\r\nimport { EnhancedLLMService } from '../../llm-enhanced/src/enhanced-llm-service';\r\nimport { MCPClientHub } from '../../mcp-hub/src/client-hub';\r\nimport { OllamaServiceAdapter } from '../../llm-enhanced/src/services/ollama-adapter';\r\n\r\nclass TanukiMCPApp {\r\n  private mainWindow: BrowserWindow | null = null;\r\n  private trayService!: SystemTrayService;\r\n  private menuService!: NativeMenuService;\r\n  private autoUpdaterService!: AutoUpdaterService;\r\n  private notificationService!: NotificationService;\r\n  private crashReporterService!: CrashReporterService;\r\n  private protocolHandlerService!: ProtocolHandlerService;\r\n\r\n  // Services that might be initialized later or conditionally\r\n  private ollamaService!: OllamaService;\r\n  private openrouterService!: OpenRouterService;\r\n  private systemMonitor!: SystemMonitor;\r\n  private modelManager!: ModelManager;\r\n  private hardwareAssessor!: HardwareAssessor;\r\n  private optimizationEngine!: OptimizationEngine;\r\n  private parameterTuner!: ParameterTuner;\r\n  private contextManager!: ContextManager;\r\n  private enhancedLLMService!: EnhancedLLMService;\r\n  private mcpClientHub!: MCPClientHub;\r\n  private isQuitting = false;\r\n\r\n  constructor() {\r\n    this.setupEventHandlers();\r\n  }\r\n  \r\n  private async initializeServices(): Promise<void> {\r\n    console.log('\uD83D\uDD27 Initializing Phase 2 services...');\r\n    \r\n    // Initialize all LLM and model management services\r\n    this.ollamaService = new OllamaService();\r\n    this.openrouterService = new OpenRouterService();\r\n    this.systemMonitor = new SystemMonitor();\r\n    this.modelManager = new ModelManager();\r\n    this.hardwareAssessor = new HardwareAssessor();\r\n    this.optimizationEngine = new OptimizationEngine();\r\n    this.parameterTuner = new ParameterTuner();\r\n    this.contextManager = new ContextManager();\r\n    \r\n    console.log('\u2705 Phase 2 services initialized');\r\n    \r\n    // Initialize Phase 2.5: Enhanced LLM and MCP Hub\r\n    console.log('\uD83D\uDD27 Initializing Enhanced LLM and MCP Hub...');\r\n    \r\n    this.mcpClientHub = new MCPClientHub();\r\n    await this.mcpClientHub.initialize();\r\n    \r\n    const ollamaAdapter = new OllamaServiceAdapter(this.ollamaService);\r\n    this.enhancedLLMService = new EnhancedLLMService();\r\n    await this.enhancedLLMService.initialize(ollamaAdapter, this.mcpClientHub);\r\n    \r\n    console.log('\u2705 Enhanced LLM and MCP Hub initialized');\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    // Set up app event handlers\r\n    app.whenReady().then(() => this.onReady());\r\n    app.on('window-all-closed', this.onWindowAllClosed.bind(this));\r\n    app.on('activate', this.onActivate.bind(this));\r\n    app.on('before-quit', this.onBeforeQuit.bind(this));\r\n    \r\n    // Handle certificate errors (for local development)\r\n    app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\r\n      if (url.startsWith('http://localhost')) {\r\n        // Ignore certificate errors for localhost\r\n        event.preventDefault();\r\n        callback(true);\r\n      } else {\r\n        // Use default behavior for other URLs\r\n        callback(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async onReady(): Promise<void> {\r\n    try {\r\n      await this.initializeServices();\r\n      console.log('\uD83D\uDE80 TanukiMCP Atlas starting...');\r\n      \r\n      // Initialize database first\r\n      console.log('\uD83D\uDCCA Initializing database...');\r\n      await initializeDatabase();\r\n      console.log('\u2705 Database initialized');\r\n      \r\n      // Assess system capabilities for model recommendations\r\n      console.log('\uD83D\uDD0D Assessing system capabilities...');\r\n      await this.assessSystemCapabilities();\r\n      console.log('\u2705 System assessment complete');\r\n      \r\n      // Create main window\r\n      console.log('\uD83E\uDE9F Creating main window...');\r\n      this.mainWindow = createWindow();\r\n      \r\n      // Initialize desktop integration services\r\n      console.log('\uD83D\uDDA5\uFE0F Initializing desktop integration...');\r\n      await this.initializeDesktopServices();\r\n      console.log('\u2705 Desktop integration ready');\r\n      \r\n      // Setup IPC handlers\r\n      console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n      setupIPC();\r\n      console.log('\u2705 IPC handlers ready');\r\n      \r\n      // Load the application\r\n      await this.loadApplication();\r\n      \r\n      console.log('\uD83C\uDF89 TanukiMCP Atlas ready!');\r\n    } catch (error) {\r\n      console.error('\u274C Failed to initialize TanukiMCP Atlas:', error);\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private async loadApplication(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n\r\n    // Determine URL based on environment\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Development mode - load from Vite dev server\r\n      const devServerUrl = 'http://localhost:5173';\r\n      console.log(`\uD83D\uDD27 Loading from dev server: ${devServerUrl}`);\r\n      \r\n      try {\r\n        await this.mainWindow.loadURL(devServerUrl);\r\n        this.mainWindow.webContents.openDevTools();\r\n      } catch (error) {\r\n        console.error('Failed to load dev server, falling back to file:', error);\r\n        await this.loadProductionFile();\r\n      }\r\n    } else {\r\n      // Production mode - load from built files\r\n      await this.loadProductionFile();\r\n    }\r\n  }\r\n\r\n  private async loadProductionFile(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n    \r\n    // __dirname is packages/main/dist\r\n    // ../../../ should resolve to the project root (e.g., tanukimcp-atlas)\r\n    const projectRoot = path.resolve(__dirname, '../../../');\r\n    const indexPath = path.join(projectRoot, 'packages/renderer/dist/index.html');\r\n    console.log(`\uD83D\uDCC1 Loading from file: ${indexPath} (using projectRoot: ${projectRoot}, __dirname: ${__dirname})`);\r\n    await this.mainWindow.loadFile(indexPath);\r\n  }\r\n\r\n  private onWindowAllClosed(): void {\r\n    // On macOS, keep app running even when all windows are closed\r\n    if (process.platform !== 'darwin') {\r\n      app.quit();\r\n    }\r\n  }\r\n\r\n  private onActivate(): void {\r\n    // On macOS, re-create window when dock icon is clicked\r\n    if (BrowserWindow.getAllWindows().length === 0) {\r\n      this.mainWindow = createWindow();\r\n      this.loadApplication();\r\n    }\r\n  }\r\n\r\n  private onBeforeQuit(): void {\r\n    this.isQuitting = true;\r\n  }\r\n\r\n  private async initializeDesktopServices(): Promise<void> {\r\n    if (!this.mainWindow) return;\r\n\r\n    try {\r\n      // Initialize crash reporter first\r\n      this.crashReporterService = new CrashReporterService(this.mainWindow);\r\n      \r\n      // Initialize notification service\r\n      this.notificationService = new NotificationService(this.mainWindow);\r\n      \r\n      // Initialize system tray\r\n      this.trayService = new SystemTrayService(this.mainWindow);\r\n      \r\n      // Initialize native menu\r\n      this.menuService = new NativeMenuService(this.mainWindow);\r\n      \r\n      // Initialize protocol handler\r\n      this.protocolHandlerService = new ProtocolHandlerService(this.mainWindow);\r\n      \r\n      // Initialize auto-updater (only in production)\r\n      if (process.env.NODE_ENV === 'production') {\r\n        this.autoUpdaterService = new AutoUpdaterService(this.mainWindow);\r\n        // Check for updates on startup (after a delay)\r\n        setTimeout(() => {\r\n          this.autoUpdaterService?.checkForUpdates();\r\n        }, 5000);\r\n      }\r\n      \r\n      console.log('\u2705 Desktop integration services initialized');\r\n    } catch (error) {\r\n      console.error('\u274C Failed to initialize desktop services:', error);\r\n      this.crashReporterService?.logCrash(error as Error, 'Desktop Services Initialization');\r\n    }\r\n  }\r\n\r\n  private async assessSystemCapabilities(): Promise<void> {\r\n    try {\r\n      // Check Ollama health\r\n      const ollamaHealthy = await this.ollamaService.checkOllamaHealth();\r\n      if (ollamaHealthy) {\r\n        console.log('\u2705 Ollama service is running');\r\n      } else {\r\n        console.log('\u26A0\uFE0F  Ollama service not detected - model management will be limited');\r\n      }\r\n      \r\n      // Get system info and recommendations\r\n      const systemCaps = await this.hardwareAssessor.assessSystemCapabilities();\r\n      console.log('\uD83D\uDCBB System specs:', {\r\n        cpu: systemCaps.cpu.cores + ' cores',\r\n        memory: systemCaps.memory.total + 'GB RAM',\r\n        gpu: systemCaps.gpu?.length ? systemCaps.gpu.length + ' GPU(s)' : 'None detected'\r\n      });\r\n      \r\n      // Get model recommendations\r\n      const catalog = await this.ollamaService.getModelCatalog();\r\n      const recommendations = await this.hardwareAssessor.getModelRecommendations(systemCaps, catalog);\r\n      console.log('\uD83E\uDD16 Recommended models:', recommendations.slice(0, 3).map(r => r.model.displayName));\r\n      \r\n      // Apply optimal settings\r\n      const optimalProfile = await this.optimizationEngine.optimizeForHardware(systemCaps);\r\n      await this.optimizationEngine.applyOptimizations(optimalProfile);\r\n      console.log('\u26A1 Applied optimization profile:', optimalProfile.name);\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to assess system capabilities:', error);\r\n    }\r\n  }\r\n\r\n  public getMainWindow(): BrowserWindow | null {\r\n    return this.mainWindow;\r\n  }\r\n  \r\n  // Expose services for IPC handlers\r\n  public getServices() {\r\n    return {\r\n      ollama: this.ollamaService,\r\n      openrouter: this.openrouterService,\r\n      systemMonitor: this.systemMonitor,\r\n      modelManager: this.modelManager,\r\n      hardwareAssessor: this.hardwareAssessor,\r\n      optimizationEngine: this.optimizationEngine,\r\n      parameterTuner: this.parameterTuner,\r\n      contextManager: this.contextManager,\r\n      enhancedLLM: this.enhancedLLMService,\r\n      mcpHub: this.mcpClientHub,\r\n      systemTray: this.trayService,\r\n      nativeMenu: this.menuService,\r\n      autoUpdater: this.autoUpdaterService,\r\n      notification: this.notificationService,\r\n      crashReporter: this.crashReporterService,\r\n      protocolHandler: this.protocolHandlerService\r\n    };\r\n  }\r\n}\r\n\r\n// Create and initialize the application\r\nconst tanukiApp = new TanukiMCPApp();\r\n\r\n// Export for potential external access\r\nexport { tanukiApp };\r\n\r\n// Handle uncaught exceptions gracefully\r\nprocess.on('uncaughtException', (error) => {\r\n  console.error('Uncaught Exception:', error);\r\n  tanukiApp.getServices().crashReporter?.logCrash(error, 'Uncaught Exception');\r\n  tanukiApp.getServices().crashReporter?.showCrashDialog(error);\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n  const error = reason instanceof Error ? reason : new Error(String(reason));\r\n  tanukiApp.getServices().crashReporter?.logCrash(error, 'Unhandled Rejection');\r\n}); ", "import { BrowserWindow, screen, app } from 'electron';\r\nimport path from 'path';\r\n\r\nexport function createWindow(): BrowserWindow {\r\n  // Get display information\r\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize;\r\n  \r\n  // Calculate optimal window size\r\n  const windowWidth = Math.min(1400, Math.floor(width * 0.9));\r\n  const windowHeight = Math.min(900, Math.floor(height * 0.9));\r\n  \r\n  // Create the browser window\r\n  const window = new BrowserWindow({\r\n    width: windowWidth,\r\n    height: windowHeight,\r\n    minWidth: 1024,\r\n    minHeight: 768,\r\n    center: true,\r\n    \r\n    // Window appearance\r\n    titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : 'default',\r\n    frame: true,\r\n    transparent: false,\r\n    backgroundColor: '#1a1a1a', // Dark theme background\r\n    vibrancy: process.platform === 'darwin' ? 'under-window' : undefined,\r\n    \r\n    // Security settings\r\n    webPreferences: {\r\n      nodeIntegration: false,           // Disable node integration in renderer\r\n      contextIsolation: true,           // Enable context isolation\r\n      sandbox: false,                   // Disable sandbox for better performance\r\n      preload: path.join(__dirname, 'preload.js'),\r\n      webSecurity: true,                // Enable web security\r\n      allowRunningInsecureContent: false,\r\n      experimentalFeatures: false,\r\n      \r\n      // Additional security\r\n      enableRemoteModule: false,\r\n      worldSafeExecuteJavaScript: true,\r\n      disableBlinkFeatures: 'Auxclick',\r\n    },\r\n    \r\n    // Performance settings\r\n    show: true, // Show immediately for debugging\r\n    paintWhenInitiallyHidden: false,\r\n    backgroundThrottling: false, // Keep app responsive when in background\r\n    \r\n    // Window behavior\r\n    autoHideMenuBar: false, // Keep menu bar visible for IDE functionality\r\n    fullscreenable: true,\r\n    maximizable: true,\r\n    minimizable: true,\r\n    resizable: true,\r\n    \r\n    // Icon (will be added later)\r\n    // icon: path.join(__dirname, '../assets/icon.png'),\r\n    \r\n    // Development\r\n    ...(process.env.NODE_ENV === 'development' && {\r\n      webPreferences: {\r\n        ...BrowserWindow.prototype.webPreferences,\r\n        devTools: true,\r\n      }\r\n    })\r\n  });\r\n\r\n  // Window event handlers\r\n  window.once('ready-to-show', () => {\r\n    console.log('\uD83E\uDE9F Window ready to show');\r\n    window.show();\r\n    \r\n    // Focus the window\r\n    if (process.env.NODE_ENV === 'development') {\r\n      window.focus();\r\n    }\r\n  });\r\n\r\n  // Handle window closed\r\n  window.on('closed', () => {\r\n    console.log('\uD83E\uDE9F Window closed');\r\n  });\r\n\r\n  // Handle window state changes\r\n  window.on('maximize', () => {\r\n    console.log('\uD83E\uDE9F Window maximized');\r\n  });\r\n\r\n  window.on('unmaximize', () => {\r\n    console.log('\uD83E\uDE9F Window unmaximized');\r\n  });\r\n\r\n  window.on('minimize', () => {\r\n    console.log('\uD83E\uDE9F Window minimized');\r\n  });\r\n\r\n  window.on('restore', () => {\r\n    console.log('\uD83E\uDE9F Window restored');\r\n  });\r\n\r\n  // Handle window focus\r\n  window.on('focus', () => {\r\n    // Window gained focus\r\n  });\r\n\r\n  window.on('blur', () => {\r\n    // Window lost focus\r\n  });\r\n\r\n  // Prevent navigation to external URLs\r\n  window.webContents.on('will-navigate', (event: any, navigationUrl: string) => {\r\n    const parsedUrl = new URL(navigationUrl);\r\n    \r\n    // Allow localhost navigation for development\r\n    if (parsedUrl.origin !== 'http://localhost:5173' && \r\n        parsedUrl.origin !== 'file://') {\r\n      console.warn('\uD83D\uDEAB Blocked navigation to external URL:', navigationUrl);\r\n      event.preventDefault();\r\n    }\r\n  });\r\n\r\n  // Prevent new window creation\r\n  window.webContents.setWindowOpenHandler(({ url }: { url: string }) => {\r\n    console.warn('\uD83D\uDEAB Blocked attempt to open new window:', url);\r\n    return { action: 'deny' };\r\n  });\r\n\r\n  // Handle console messages from renderer\r\n  window.webContents.on('console-message', (event: any, level: string, message: string, line: number, sourceId: string) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`Renderer [${level}]:`, message);\r\n    }\r\n  });\r\n\r\n  // Handle crashes\r\n  window.webContents.on('crashed', (event: any, killed: boolean) => {\r\n    console.error('\uD83D\uDCA5 Renderer process crashed:', { killed });\r\n    \r\n    // Optionally reload the window\r\n    if (!killed) {\r\n      window.reload();\r\n    }\r\n  });\r\n\r\n  // Handle unresponsive renderer\r\n  window.webContents.on('unresponsive', () => {\r\n    console.warn('\u26A0\uFE0F Renderer process became unresponsive');\r\n  });\r\n\r\n  window.webContents.on('responsive', () => {\r\n    console.log('\u2705 Renderer process became responsive again');\r\n  });\r\n\r\n  // Save window state for restoration\r\n  window.on('resize', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  window.on('move', () => {\r\n    saveWindowState(window);\r\n  });\r\n\r\n  // Restore previous window state if available\r\n  restoreWindowState(window);\r\n\r\n  return window;\r\n}\r\n\r\n// Helper functions for window state management\r\nfunction saveWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const bounds = window.getBounds();\r\n    const state = {\r\n      x: bounds.x,\r\n      y: bounds.y,\r\n      width: bounds.width,\r\n      height: bounds.height,\r\n      isMaximized: window.isMaximized(),\r\n      isFullScreen: window.isFullScreen(),\r\n    };\r\n    \r\n    // Save to user data (will be implemented with proper storage later)\r\n    // For now, just store in memory\r\n    (global as any).windowState = state;\r\n  } catch (error) {\r\n    console.error('Failed to save window state:', error);\r\n  }\r\n}\r\n\r\nfunction restoreWindowState(window: BrowserWindow): void {\r\n  try {\r\n    const state = (global as any).windowState;\r\n    if (state) {\r\n      // Validate state bounds are within current screen\r\n      const { workArea } = screen.getPrimaryDisplay();\r\n      \r\n      if (state.x >= workArea.x && state.x < workArea.x + workArea.width &&\r\n          state.y >= workArea.y && state.y < workArea.y + workArea.height) {\r\n        window.setBounds({\r\n          x: state.x,\r\n          y: state.y,\r\n          width: Math.min(state.width, workArea.width),\r\n          height: Math.min(state.height, workArea.height)\r\n        });\r\n      }\r\n      \r\n      if (state.isMaximized) {\r\n        window.maximize();\r\n      }\r\n      \r\n      if (state.isFullScreen) {\r\n        window.setFullScreen(true);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to restore window state:', error);\r\n  }\r\n} ", "import { ipcMain, IpcMainInvokeEvent } from 'electron';\r\nimport { getDatabase, getRawDatabase, checkDatabaseHealth } from '../database/connection';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { tanukiApp } from '../main';\r\n\r\n// Define IPC channel types for type safety\r\nexport interface IPCChannels {\r\n  // Database operations\r\n  'db:query': { params: [string, any[]?]; result: any };\r\n  'db:health': { params: []; result: { isHealthy: boolean; details: any } };\r\n  \r\n  // Application state\r\n  'app:getVersion': { params: []; result: string };\r\n  'app:getPath': { params: [string]; result: string };\r\n  \r\n  // Settings management\r\n  'settings:get': { params: [string]; result: any };\r\n  'settings:set': { params: [string, any]; result: void };\r\n  'settings:getAll': { params: []; result: any[] };\r\n  \r\n  // Chat session management\r\n  'chat:createSession': { params: [any]; result: any };\r\n  'chat:getSession': { params: [string]; result: any };\r\n  'chat:updateSession': { params: [string, any]; result: any };\r\n  'chat:deleteSession': { params: [string]; result: void };\r\n  'chat:listSessions': { params: []; result: any[] };\r\n  \r\n  // File system operations (placeholder for Phase 3)\r\n  'fs:readFile': { params: [string]; result: string | null };\r\n  'fs:writeFile': { params: [string, string]; result: void };\r\n  'fs:exists': { params: [string]; result: boolean };\r\n  \r\n  // Phase 2: LLM and Model Management\r\n  'ollama:listModels': { params: []; result: any[] };\r\n  'ollama:getModelCatalog': { params: []; result: any[] };\r\n  'ollama:installModel': { params: [string]; result: void };\r\n  'ollama:deleteModel': { params: [string]; result: void };\r\n  'ollama:generate': { params: [any]; result: any };\r\n  'ollama:checkHealth': { params: []; result: boolean };\r\n  'ollama:benchmarkModel': { params: [string]; result: any };\r\n  \r\n  'system:getCapabilities': { params: []; result: any };\r\n  'system:getCurrentMetrics': { params: []; result: any };\r\n  \r\n  'models:getRecommendations': { params: []; result: any[] };\r\n  'models:getInstallationStatus': { params: [string]; result: any };\r\n  \r\n  'optimization:getProfiles': { params: []; result: any[] };\r\n  'optimization:getActiveProfile': { params: []; result: any };\r\n  'optimization:setProfile': { params: [string]; result: void };\r\n  \r\n  // Enhanced LLM operations\r\n  'enhancedLLM:processRequest': { params: [any]; result: any };\r\n  'enhancedLLM:getStatus': { params: []; result: any };\r\n  'enhancedLLM:testTier': { params: [number]; result: any };\r\n  \r\n  // MCP Hub operations\r\n  'mcpHub:listServers': { params: []; result: any[] };\r\n  'mcpHub:connectServer': { params: [string]; result: void };\r\n  'mcpHub:disconnectServer': { params: [string]; result: void };\r\n  'mcpHub:executeCommand': { params: [string, string, any]; result: any };\r\n  'optimization:optimizeForHardware': { params: [any]; result: any };\r\n  \r\n  'parameters:getPreset': { params: [string]; result: any };\r\n  'parameters:getAllPresets': { params: []; result: any };\r\n  'parameters:optimizeForTask': { params: [string, string]; result: any };\r\n  \r\n  'context:store': { params: [string, string, string, string, number?]; result: void };\r\n  'context:retrieve': { params: [string, string, number?]; result: any[] };\r\n  'context:optimize': { params: [string]; result: void };\r\n}\r\n\r\nexport function setupIPC(): void {\r\n  console.log('\uD83D\uDD0C Setting up IPC handlers...');\r\n  \r\n  // Phase 1: Essential handlers\r\n  setupDatabaseHandlers();\r\n  setupAppHandlers(); \r\n  setupSettingsHandlers();\r\n  \r\n  // Chat session handlers\r\n  setupChatHandlers();\r\n  \r\n  // File system handlers (basic implementation for Phase 1)\r\n  setupFileSystemHandlers();\r\n  \r\n  // Phase 2: LLM and Model Management handlers\r\n  setupLLMHandlers();\r\n  \r\n  console.log('\u2705 IPC handlers registered');\r\n}\r\n\r\nfunction setupDatabaseHandlers(): void {\r\n  // Generic database query handler (with caution)\r\n  ipcMain.handle('db:query', async (event: IpcMainInvokeEvent, query: string, params?: any[]) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Basic safety check - only allow SELECT, INSERT, UPDATE for now\r\n      const queryType = query.trim().toUpperCase().split(' ')[0];\r\n      if (!['SELECT', 'INSERT', 'UPDATE', 'DELETE'].includes(queryType)) {\r\n        throw new Error(`Query type ${queryType} not allowed`);\r\n      }\r\n      \r\n      if (params) {\r\n        return db.prepare(query).all(params);\r\n      } else {\r\n        return db.prepare(query).all();\r\n      }\r\n    } catch (error) {\r\n      console.error('Database query failed:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Database health check\r\n  ipcMain.handle('db:health', async () => {\r\n    return checkDatabaseHealth();\r\n  });\r\n}\r\n\r\nfunction setupAppHandlers(): void {\r\n  // Get application version\r\n  ipcMain.handle('app:getVersion', () => {\r\n    return process.env.npm_package_version || '1.0.0';\r\n  });\r\n  \r\n  // Get application paths\r\n  ipcMain.handle('app:getPath', async (event: IpcMainInvokeEvent, name: string) => {\r\n    const { app } = require('electron');\r\n    \r\n    try {\r\n      return app.getPath(name as any);\r\n    } catch (error) {\r\n      console.error(`Failed to get path for ${name}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupSettingsHandlers(): void {\r\n  // Get setting value\r\n  ipcMain.handle('settings:get', async (event: IpcMainInvokeEvent, key: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const result = db.prepare('SELECT value FROM settings WHERE key = ?').get(key) as { value: string } | undefined;\r\n      \r\n      if (result) {\r\n        return JSON.parse(result.value);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Failed to get setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Set setting value\r\n  ipcMain.handle('settings:set', async (event: IpcMainInvokeEvent, key: string, value: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const stmt = db.prepare(`\r\n        INSERT OR REPLACE INTO settings (key, value, updated)\r\n        VALUES (?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(key, JSON.stringify(value), Date.now());\r\n    } catch (error) {\r\n      console.error(`Failed to set setting ${key}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get all settings\r\n  ipcMain.handle('settings:getAll', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const results = db.prepare('SELECT * FROM settings').all() as any[];\r\n      \r\n      return results.map(row => ({\r\n        ...row,\r\n        value: JSON.parse(row.value)\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to get all settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupChatHandlers(): void {\r\n  // Create new chat session\r\n  ipcMain.handle('chat:createSession', async (event: IpcMainInvokeEvent, sessionData: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const id = uuidv4();\r\n      const now = Date.now();\r\n      \r\n      const stmt = db.prepare(`\r\n        INSERT INTO chat_sessions (\r\n          id, title, description, created, updated, subject_mode\r\n        ) VALUES (?, ?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      stmt.run(\r\n        id,\r\n        sessionData.title || 'New Chat',\r\n        sessionData.description || null,\r\n        now,\r\n        now,\r\n        sessionData.subjectMode || 'general'\r\n      );\r\n      \r\n      return {\r\n        id,\r\n        title: sessionData.title || 'New Chat',\r\n        description: sessionData.description || null,\r\n        created: now,\r\n        updated: now,\r\n        subjectMode: sessionData.subjectMode || 'general',\r\n        messageCount: 0,\r\n        isArchived: false,\r\n        isFavorite: false\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to create chat session:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Get chat session\r\n  ipcMain.handle('chat:getSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const session = db.prepare('SELECT * FROM chat_sessions WHERE id = ?').get(sessionId);\r\n      \r\n      if (!session) {\r\n        throw new Error(`Chat session ${sessionId} not found`);\r\n      }\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error(`Failed to get chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Update chat session\r\n  ipcMain.handle('chat:updateSession', async (event: IpcMainInvokeEvent, sessionId: string, updates: any) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const updateFields: string[] = [];\r\n      const updateValues: any[] = [];\r\n      \r\n      // Build dynamic update query\r\n      if (updates.title !== undefined) {\r\n        updateFields.push('title = ?');\r\n        updateValues.push(updates.title);\r\n      }\r\n      if (updates.description !== undefined) {\r\n        updateFields.push('description = ?');\r\n        updateValues.push(updates.description);\r\n      }\r\n      if (updates.isArchived !== undefined) {\r\n        updateFields.push('is_archived = ?');\r\n        updateValues.push(updates.isArchived ? 1 : 0);\r\n      }\r\n      if (updates.isFavorite !== undefined) {\r\n        updateFields.push('is_favorite = ?');\r\n        updateValues.push(updates.isFavorite ? 1 : 0);\r\n      }\r\n      \r\n      if (updateFields.length > 0) {\r\n        updateFields.push('updated = ?');\r\n        updateValues.push(Date.now());\r\n        updateValues.push(sessionId);\r\n        \r\n        const query = `UPDATE chat_sessions SET ${updateFields.join(', ')} WHERE id = ?`;\r\n        const stmt = db.prepare(query);\r\n        stmt.run(...updateValues);\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to update chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // Delete chat session\r\n  ipcMain.handle('chat:deleteSession', async (event: IpcMainInvokeEvent, sessionId: string) => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      \r\n      // Delete session and all related data (cascading deletes handled by foreign keys)\r\n      db.prepare('DELETE FROM chat_sessions WHERE id = ?').run(sessionId);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Failed to delete chat session ${sessionId}:`, error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // List chat sessions\r\n  ipcMain.handle('chat:listSessions', async () => {\r\n    try {\r\n      const db = getRawDatabase();\r\n      const sessions = db.prepare(`\r\n        SELECT * FROM chat_sessions \r\n        ORDER BY updated DESC\r\n      `).all();\r\n      \r\n      return sessions;\r\n    } catch (error) {\r\n      console.error('Failed to list chat sessions:', error);\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupFileSystemHandlers(): void {\r\n  // Basic file system operations (placeholder for Phase 3)\r\n  \r\n  // Read file (placeholder)\r\n  ipcMain.handle('fs:readFile', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Read file: ${filePath}`);\r\n    return null;\r\n  });\r\n  \r\n  // Write file (placeholder)\r\n  ipcMain.handle('fs:writeFile', async (event: IpcMainInvokeEvent, filePath: string, content: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Write file: ${filePath}`);\r\n    return true;\r\n  });\r\n  \r\n  // Check if file exists (placeholder)\r\n  ipcMain.handle('fs:exists', async (event: IpcMainInvokeEvent, filePath: string) => {\r\n    // This will be implemented in Phase 3 with proper security\r\n    console.log(`\uD83D\uDCC1 [Placeholder] Check file exists: ${filePath}`);\r\n    return false;\r\n  });\r\n}\r\n\r\n// Error handling wrapper for IPC handlers\r\nfunction handleIPC<T extends keyof IPCChannels>(\r\n  channel: T,\r\n  handler: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<IPCChannels[T]['result']>\r\n): void {\r\n  ipcMain.handle(channel, async (event: IpcMainInvokeEvent, ...args: any[]) => {\r\n    try {\r\n      return await handler(event, ...args);\r\n    } catch (error) {\r\n      console.error(`IPC Error in ${channel}:`, error);\r\n      \r\n      // Return structured error for renderer to handle\r\n      return {\r\n        error: true,\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction setupLLMHandlers(): void {\r\n  // OpenRouter service handlers (free models only)\r\n  ipcMain.handle('openrouter:checkHealth', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.checkHealth();\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:getAvailableModels', async () => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getAvailableFreeModels();\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:generate', async (event: IpcMainInvokeEvent, request: any) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.generate(request);\r\n  });\r\n  \r\n  ipcMain.handle('openrouter:getRecommendations', async (event: IpcMainInvokeEvent, taskType: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getModelRecommendations(taskType as any);\r\n  });\r\n\r\n  ipcMain.handle('openrouter:getBestModel', async (event: IpcMainInvokeEvent, taskType: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return await services.openrouter.getBestFreeModelForTask(taskType as any);\r\n  });\r\n\r\n  ipcMain.handle('openrouter:getModelInfo', async (event: IpcMainInvokeEvent, modelId: string) => {\r\n    const services = tanukiApp.getServices();\r\n    return services.openrouter.getModelInfo(modelId);\r\n  });\r\n\r\n  // Legacy compatibility handlers (will return empty/error responses)\r\n  ipcMain.handle('ollama:listModels', async () => {\r\n    console.warn('Ollama handlers are deprecated. Use openrouter handlers instead.');\r\n    return [];\r\n  });\r\n  \r\n  ipcMain.handle('ollama:checkHealth', async () => {\r\n    console.warn('Ollama handlers are deprecated. Use openrouter handlers instead.');\r\n    return { isConnected: false, error: 'Ollama support removed. Use OpenRouter instead.' };\r\n  });\r\n}\r\n\r\n// Clean up IPC handlers on app shutdown\r\nexport function cleanupIPC(): void {\r\n  // Remove all IPC handlers\r\n  ipcMain.removeAllListeners();\r\n  console.log('\uD83D\uDD0C IPC handlers cleaned up');\r\n} ", "import Database from 'better-sqlite3';\r\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\r\nimport { migrate } from 'drizzle-orm/better-sqlite3/migrator';\r\nimport path from 'path';\r\nimport { app } from 'electron';\r\nimport * as schema from './schema';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nlet db: ReturnType<typeof drizzle>;\r\nlet sqlite: Database.Database;\r\n\r\nexport async function initializeDatabase(): Promise<void> {\r\n  try {\r\n    // Get database path in user data directory\r\n    const userDataPath = app.getPath('userData');\r\n    const dbPath = path.join(userDataPath, 'tanukimcp.db');\r\n    \r\n    console.log(`\uD83D\uDCCA Database path: ${dbPath}`);\r\n    \r\n    // Create SQLite connection\r\n    sqlite = new Database(dbPath);\r\n    \r\n    // Configure SQLite for optimal performance\r\n    configureDatabase(sqlite);\r\n    \r\n    // Create Drizzle instance\r\n    db = drizzle(sqlite, { schema });\r\n    \r\n    // Run migrations\r\n    console.log('\uD83D\uDD04 Running database migrations...');\r\n    await runMigrations();\r\n    \r\n    // Initialize default data\r\n    await initializeDefaultData();\r\n    \r\n    console.log('\u2705 Database initialized successfully');\r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction configureDatabase(sqlite: Database.Database): void {\r\n  // Enable WAL mode for better concurrency\r\n  sqlite.pragma('journal_mode = WAL');\r\n  \r\n  // Set synchronous mode for better performance while maintaining safety\r\n  sqlite.pragma('synchronous = NORMAL');\r\n  \r\n  // Increase cache size (1000 pages = ~4MB for default page size)\r\n  sqlite.pragma('cache_size = 1000000');\r\n  \r\n  // Enable foreign key constraints\r\n  sqlite.pragma('foreign_keys = ON');\r\n  \r\n  // Store temporary tables in memory for better performance\r\n  sqlite.pragma('temp_store = MEMORY');\r\n  \r\n  // Set busy timeout for concurrent access\r\n  sqlite.pragma('busy_timeout = 5000');\r\n  \r\n  // Optimize for performance\r\n  sqlite.pragma('optimize');\r\n  \r\n  console.log('\u2699\uFE0F Database configured with performance optimizations');\r\n}\r\n\r\nasync function runMigrations(): Promise<void> {\r\n  try {\r\n    // For now, we'll create the migrations directory structure\r\n    // In a real setup, we'd use drizzle-kit to generate migrations\r\n    const migrationsFolder = path.join(__dirname, '../../../drizzle');\r\n    \r\n    // Create basic tables if they don't exist (manual migration for Phase 1)\r\n    await createTablesIfNotExist();\r\n    \r\n    console.log('\u2705 Migrations completed');\r\n  } catch (error) {\r\n    console.error('\u274C Migration failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createTablesIfNotExist(): Promise<void> {\r\n  // This is a simplified migration approach for Phase 1\r\n  // In later phases, we'll use proper Drizzle migrations\r\n  \r\n  const tables = [\r\n    `CREATE TABLE IF NOT EXISTS projects (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      path TEXT NOT NULL,\r\n      description TEXT,\r\n      language TEXT,\r\n      framework TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      last_opened INTEGER,\r\n      is_active INTEGER DEFAULT 1,\r\n      settings TEXT\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_sessions (\r\n      id TEXT PRIMARY KEY,\r\n      project_id TEXT REFERENCES projects(id),\r\n      title TEXT NOT NULL,\r\n      description TEXT,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      is_archived INTEGER DEFAULT 0,\r\n      is_favorite INTEGER DEFAULT 0,\r\n      message_count INTEGER DEFAULT 0,\r\n      tags TEXT,\r\n      subject_mode TEXT DEFAULT 'general',\r\n      model_used TEXT,\r\n      total_tokens INTEGER DEFAULT 0,\r\n      execution_time_ms INTEGER DEFAULT 0\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS chat_history (\r\n      id TEXT PRIMARY KEY,\r\n      session_id TEXT REFERENCES chat_sessions(id) ON DELETE CASCADE,\r\n      role TEXT NOT NULL,\r\n      content TEXT NOT NULL,\r\n      metadata TEXT,\r\n      timestamp INTEGER NOT NULL,\r\n      parent_message_id TEXT,\r\n      tools_used TEXT,\r\n      execution_time_ms INTEGER,\r\n      token_count INTEGER,\r\n      model TEXT,\r\n      temperature REAL,\r\n      complexity TEXT,\r\n      quality_score REAL\r\n    )`,\r\n    \r\n    `CREATE TABLE IF NOT EXISTS settings (\r\n      key TEXT PRIMARY KEY,\r\n      value TEXT NOT NULL,\r\n      category TEXT,\r\n      description TEXT,\r\n      is_user_configurable INTEGER DEFAULT 1,\r\n      updated INTEGER NOT NULL\r\n    )`\r\n  ];\r\n  \r\n  for (const tableSQL of tables) {\r\n    sqlite.exec(tableSQL);\r\n  }\r\n  \r\n  // Create indices for better performance\r\n  const indices = [\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_project_id ON chat_sessions(project_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_sessions_created ON chat_sessions(created)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id)',\r\n    'CREATE INDEX IF NOT EXISTS idx_chat_history_timestamp ON chat_history(timestamp)',\r\n    'CREATE INDEX IF NOT EXISTS idx_settings_category ON settings(category)'\r\n  ];\r\n  \r\n  for (const indexSQL of indices) {\r\n    sqlite.exec(indexSQL);\r\n  }\r\n}\r\n\r\nasync function initializeDefaultData(): Promise<void> {\r\n  try {\r\n    // Check if we have any existing data\r\n    const settingsCount = sqlite.prepare('SELECT COUNT(*) as count FROM settings').get() as { count: number };\r\n    \r\n    if (settingsCount.count === 0) {\r\n      console.log('\uD83D\uDD27 Initializing default settings...');\r\n      \r\n      const defaultSettings = [\r\n        {\r\n          key: 'app.theme',\r\n          value: JSON.stringify('dark'),\r\n          category: 'ui',\r\n          description: 'Application theme (light/dark)',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'app.version',\r\n          value: JSON.stringify('1.0.0'),\r\n          category: 'system',\r\n          description: 'Application version',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'models.default',\r\n          value: JSON.stringify(''),\r\n          category: 'models',\r\n          description: 'Default LLM model',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'performance.max_context_entries',\r\n          value: JSON.stringify(1000),\r\n          category: 'performance',\r\n          description: 'Maximum context entries to maintain',\r\n          updated: Date.now()\r\n        },\r\n        {\r\n          key: 'ui.show_welcome',\r\n          value: JSON.stringify(true),\r\n          category: 'ui',\r\n          description: 'Show welcome screen on startup',\r\n          updated: Date.now()\r\n        }\r\n      ];\r\n      \r\n      const insertSetting = sqlite.prepare(`\r\n        INSERT INTO settings (key, value, category, description, updated)\r\n        VALUES (?, ?, ?, ?, ?)\r\n      `);\r\n      \r\n      for (const setting of defaultSettings) {\r\n        insertSetting.run(\r\n          setting.key,\r\n          setting.value,\r\n          setting.category,\r\n          setting.description,\r\n          setting.updated\r\n        );\r\n      }\r\n      \r\n      console.log('\u2705 Default settings initialized');\r\n    }\r\n    \r\n    // Initialize default subject modes\r\n    await initializeDefaultSubjectModes();\r\n    \r\n  } catch (error) {\r\n    console.error('\u274C Failed to initialize default data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function initializeDefaultSubjectModes(): Promise<void> {\r\n  // Create subject_modes table if it doesn't exist\r\n  sqlite.exec(`\r\n    CREATE TABLE IF NOT EXISTS subject_modes (\r\n      id TEXT PRIMARY KEY,\r\n      name TEXT NOT NULL,\r\n      display_name TEXT NOT NULL,\r\n      description TEXT,\r\n      icon TEXT,\r\n      tools TEXT NOT NULL,\r\n      prompts TEXT,\r\n      system_prompt TEXT,\r\n      is_active INTEGER DEFAULT 1,\r\n      is_built_in INTEGER DEFAULT 0,\r\n      created INTEGER NOT NULL,\r\n      updated INTEGER NOT NULL,\r\n      usage_count INTEGER DEFAULT 0,\r\n      color TEXT,\r\n      shortcuts TEXT\r\n    )\r\n  `);\r\n  \r\n  // Check if subject modes already exist\r\n  const modesCount = sqlite.prepare('SELECT COUNT(*) as count FROM subject_modes').get() as { count: number };\r\n  \r\n  if (modesCount.count === 0) {\r\n    console.log('\uD83E\uDDE0 Initializing default subject modes...');\r\n    \r\n    const defaultModes = [\r\n      {\r\n        id: uuidv4(),\r\n        name: 'general',\r\n        displayName: 'General',\r\n        description: 'General purpose AI assistance',\r\n        icon: '\uD83D\uDCAC',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'create_todolist']),\r\n        systemPrompt: 'You are a helpful AI assistant. Be concise, accurate, and helpful.',\r\n        isBuiltIn: 1,\r\n        color: '#6366f1'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'programming',\r\n        displayName: 'Programming',\r\n        description: 'Code analysis, debugging, and development assistance',\r\n        icon: '\uD83D\uDCBB',\r\n        tools: JSON.stringify(['read_file', 'write_file', 'analyze_code', 'generate_tests']),\r\n        systemPrompt: 'You are an expert programmer. Focus on code quality, best practices, and clear explanations.',\r\n        isBuiltIn: 1,\r\n        color: '#10b981'\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        name: 'mathematics',\r\n        displayName: 'Mathematics',\r\n        description: 'Mathematical problem solving and analysis',\r\n        icon: '\uD83C\uDFAF',\r\n        tools: JSON.stringify(['solve_equation', 'plot_function', 'read_file', 'write_file']),\r\n        systemPrompt: 'You are a mathematics expert. Show step-by-step solutions and use mathematical notation when appropriate.',\r\n        isBuiltIn: 1,\r\n        color: '#f59e0b'\r\n      }\r\n    ];\r\n    \r\n    const insertMode = sqlite.prepare(`\r\n      INSERT INTO subject_modes (\r\n        id, name, display_name, description, icon, tools, system_prompt, \r\n        is_built_in, created, updated, color\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `);\r\n    \r\n    const now = Date.now();\r\n    for (const mode of defaultModes) {\r\n      insertMode.run(\r\n        mode.id,\r\n        mode.name,\r\n        mode.displayName,\r\n        mode.description,\r\n        mode.icon,\r\n        mode.tools,\r\n        mode.systemPrompt,\r\n        mode.isBuiltIn,\r\n        now,\r\n        now,\r\n        mode.color\r\n      );\r\n    }\r\n    \r\n    console.log('\u2705 Default subject modes initialized');\r\n  }\r\n}\r\n\r\nexport function getDatabase() {\r\n  if (!db) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return db;\r\n}\r\n\r\nexport function getRawDatabase(): Database.Database {\r\n  if (!sqlite) {\r\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\r\n  }\r\n  return sqlite;\r\n}\r\n\r\n// Database health check\r\nexport function checkDatabaseHealth(): { isHealthy: boolean; details: any } {\r\n  try {\r\n    // Test basic database operations\r\n    const result = sqlite.prepare('SELECT 1 as test').get();\r\n    \r\n    // Get database size\r\n    const dbSize = sqlite.prepare(\"SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()\").get() as { size: number };\r\n    \r\n    // Get table count\r\n    const tableCount = sqlite.prepare(\"SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'\").get() as { count: number };\r\n    \r\n    return {\r\n      isHealthy: true,\r\n      details: {\r\n        testQuery: result,\r\n        databaseSize: dbSize.size,\r\n        tableCount: tableCount.count,\r\n        walMode: sqlite.pragma('journal_mode', { simple: true }),\r\n        foreignKeys: sqlite.pragma('foreign_keys', { simple: true })\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      isHealthy: false,\r\n      details: { error: error instanceof Error ? error.message : String(error) }\r\n    };\r\n  }\r\n}\r\n\r\n// Cleanup function for graceful shutdown\r\nexport function closeDatabase(): void {\r\n  if (sqlite) {\r\n    try {\r\n      sqlite.close();\r\n      console.log('\uD83D\uDCCA Database connection closed');\r\n    } catch (error) {\r\n      console.error('\u274C Error closing database:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Handle app shutdown\r\napp.on('before-quit', () => {\r\n  closeDatabase();\r\n}); ", "import { sqliteTable, text, integer, blob, real } from 'drizzle-orm/sqlite-core';\r\nimport { relations } from 'drizzle-orm';\r\n\r\n// Projects table for workspace management\r\nexport const projects = sqliteTable('projects', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  path: text('path').notNull(),\r\n  description: text('description'),\r\n  language: text('language'), // Primary programming language\r\n  framework: text('framework'), // Framework or platform\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastOpened: integer('last_opened', { mode: 'timestamp' }),\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  settings: blob('settings', { mode: 'json' }) // Project-specific settings\r\n});\r\n\r\n// Enhanced chat system with CRUD operations\r\nexport const chatSessions = sqliteTable('chat_sessions', {\r\n  id: text('id').primaryKey(),\r\n  projectId: text('project_id').references(() => projects.id),\r\n  title: text('title').notNull(),\r\n  description: text('description'),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  isArchived: integer('is_archived', { mode: 'boolean' }).default(false),\r\n  isFavorite: integer('is_favorite', { mode: 'boolean' }).default(false),\r\n  messageCount: integer('message_count').default(0),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  subjectMode: text('subject_mode').default('general'), // mathematics, programming, etc.\r\n  modelUsed: text('model_used'), // Which LLM model was primarily used\r\n  totalTokens: integer('total_tokens').default(0),\r\n  executionTime: integer('execution_time_ms').default(0)\r\n});\r\n\r\nexport const chatHistory = sqliteTable('chat_history', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  role: text('role').notNull(), // 'user' | 'assistant' | 'system' | 'tool'\r\n  content: text('content').notNull(),\r\n  metadata: blob('metadata', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  parentMessageId: text('parent_message_id'),\r\n  toolsUsed: blob('tools_used', { mode: 'json' }),\r\n  executionTime: integer('execution_time_ms'),\r\n  tokenCount: integer('token_count'),\r\n  model: text('model'), // Which model generated this message\r\n  temperature: real('temperature'), // Model parameters used\r\n  complexity: text('complexity'), // atomic | moderate | complex | expert\r\n  qualityScore: real('quality_score') // Quality assessment score\r\n});\r\n\r\n// Context management system for intelligent context handling\r\nexport const contextEntries = sqliteTable('context_entries', {\r\n  id: text('id').primaryKey(),\r\n  sessionId: text('session_id').references(() => chatSessions.id, { onDelete: 'cascade' }),\r\n  type: text('type').notNull(), // 'file', 'function', 'concept', 'memory', 'error', 'solution'\r\n  key: text('key').notNull(),\r\n  value: text('value').notNull(),\r\n  vectorEmbedding: blob('vector_embedding'), // For semantic search\r\n  importance: real('importance').default(1.0),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }).notNull(),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  source: text('source'), // Where this context came from\r\n  expiry: integer('expiry', { mode: 'timestamp' }), // When to auto-remove\r\n  compressed: integer('compressed', { mode: 'boolean' }).default(false)\r\n});\r\n\r\n// Workflow system for saving and reusing chat patterns\r\nexport const workflows = sqliteTable('workflows', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  category: text('category').notNull(), // 'project-management', 'code-generation', etc.\r\n  definition: blob('definition', { mode: 'json' }).notNull(), // LangChain workflow definition\r\n  variables: blob('variables', { mode: 'json' }).notNull(), // Required/optional variables\r\n  metadata: blob('metadata', { mode: 'json' }).notNull(), // Additional metadata\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isPublic: integer('is_public', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  createdBy: text('created_by'), // User/source identification\r\n  version: text('version').default('1.0.0'),\r\n  tags: blob('tags', { mode: 'json' }),\r\n  estimatedTime: integer('estimated_time_ms'), // Expected execution time\r\n  successRate: real('success_rate'), // Historical success rate\r\n  usageCount: integer('usage_count').default(0)\r\n});\r\n\r\nexport const workflowExecutions = sqliteTable('workflow_executions', {\r\n  id: text('id').primaryKey(),\r\n  workflowId: text('workflow_id').references(() => workflows.id, { onDelete: 'cascade' }),\r\n  sessionId: text('session_id').references(() => chatSessions.id),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'pending' | 'running' | 'completed' | 'failed' | 'cancelled'\r\n  result: blob('result', { mode: 'json' }),\r\n  errorMessage: text('error_message'),\r\n  errorStack: text('error_stack'),\r\n  started: integer('started', { mode: 'timestamp' }).notNull(),\r\n  completed: integer('completed', { mode: 'timestamp' }),\r\n  executionTimeMs: integer('execution_time_ms'),\r\n  stepsCompleted: integer('steps_completed').default(0),\r\n  totalSteps: integer('total_steps'),\r\n  progress: real('progress').default(0.0) // 0.0 to 1.0\r\n});\r\n\r\n// MCP server management for external tool integration\r\nexport const mcpServers = sqliteTable('mcp_servers', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  description: text('description'),\r\n  transport: text('transport').notNull(), // 'stdio' | 'sse' | 'websocket'\r\n  config: blob('config', { mode: 'json' }).notNull(),\r\n  status: text('status').notNull(), // 'connected' | 'disconnected' | 'error' | 'unknown'\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  lastConnected: integer('last_connected', { mode: 'timestamp' }),\r\n  lastError: text('last_error'),\r\n  isAutoRestart: integer('is_auto_restart', { mode: 'boolean' }).default(true),\r\n  restartCount: integer('restart_count').default(0),\r\n  version: text('version'),\r\n  capabilities: blob('capabilities', { mode: 'json' }),\r\n  healthScore: real('health_score').default(1.0), // 0.0 to 1.0\r\n  responseTime: integer('response_time_ms'), // Average response time\r\n  uptime: integer('uptime_seconds').default(0)\r\n});\r\n\r\n// Model configurations and performance tracking\r\nexport const modelConfigurations = sqliteTable('model_configurations', {\r\n  id: text('id').primaryKey(),\r\n  modelName: text('model_name').notNull(),\r\n  displayName: text('display_name'),\r\n  parameters: blob('parameters', { mode: 'json' }).notNull(),\r\n  performance: blob('performance', { mode: 'json' }),\r\n  isDefault: integer('is_default', { mode: 'boolean' }).default(false),\r\n  isInstalled: integer('is_installed', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  lastUsed: integer('last_used', { mode: 'timestamp' }),\r\n  usageCount: integer('usage_count').default(0),\r\n  averageTokensPerSecond: real('avg_tokens_per_second'),\r\n  averageResponseTime: integer('avg_response_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  diskSize: integer('disk_size_mb'),\r\n  downloadProgress: real('download_progress').default(0.0), // 0.0 to 1.0\r\n  lastBenchmark: integer('last_benchmark', { mode: 'timestamp' })\r\n});\r\n\r\n// Subject-specific tool configurations and modes\r\nexport const subjectModes = sqliteTable('subject_modes', {\r\n  id: text('id').primaryKey(),\r\n  name: text('name').notNull(),\r\n  displayName: text('display_name').notNull(),\r\n  description: text('description'),\r\n  icon: text('icon'), // Emoji or icon identifier\r\n  tools: blob('tools', { mode: 'json' }).notNull(), // Available tools in this mode\r\n  prompts: blob('prompts', { mode: 'json' }), // Mode-specific prompts\r\n  systemPrompt: text('system_prompt'), // Default system prompt for this mode\r\n  isActive: integer('is_active', { mode: 'boolean' }).default(true),\r\n  isBuiltIn: integer('is_built_in', { mode: 'boolean' }).default(false),\r\n  created: integer('created', { mode: 'timestamp' }).notNull(),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull(),\r\n  usageCount: integer('usage_count').default(0),\r\n  color: text('color'), // Theme color for UI\r\n  shortcuts: blob('shortcuts', { mode: 'json' }) // Keyboard shortcuts\r\n});\r\n\r\n// System settings and user preferences\r\nexport const settings = sqliteTable('settings', {\r\n  key: text('key').primaryKey(),\r\n  value: blob('value', { mode: 'json' }).notNull(),\r\n  category: text('category'), // 'ui', 'performance', 'models', etc.\r\n  description: text('description'),\r\n  isUserConfigurable: integer('is_user_configurable', { mode: 'boolean' }).default(true),\r\n  updated: integer('updated', { mode: 'timestamp' }).notNull()\r\n});\r\n\r\n// Performance and analytics tracking\r\nexport const analytics = sqliteTable('analytics', {\r\n  id: text('id').primaryKey(),\r\n  event: text('event').notNull(), // Event type\r\n  data: blob('data', { mode: 'json' }),\r\n  timestamp: integer('timestamp', { mode: 'timestamp' }).notNull(),\r\n  sessionId: text('session_id'),\r\n  modelUsed: text('model_used'),\r\n  executionTime: integer('execution_time_ms'),\r\n  memoryUsage: integer('memory_usage_mb'),\r\n  cpuUsage: real('cpu_usage_percent'),\r\n  success: integer('success', { mode: 'boolean' })\r\n});\r\n\r\n// Define relationships\r\nexport const projectsRelations = relations(projects, ({ many }) => ({\r\n  chatSessions: many(chatSessions)\r\n}));\r\n\r\nexport const chatSessionsRelations = relations(chatSessions, ({ one, many }) => ({\r\n  project: one(projects, {\r\n    fields: [chatSessions.projectId],\r\n    references: [projects.id]\r\n  }),\r\n  messages: many(chatHistory),\r\n  contextEntries: many(contextEntries),\r\n  workflowExecutions: many(workflowExecutions)\r\n}));\r\n\r\nexport const chatHistoryRelations = relations(chatHistory, ({ one }) => ({\r\n  session: one(chatSessions, {\r\n    fields: [chatHistory.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\nexport const workflowsRelations = relations(workflows, ({ many }) => ({\r\n  executions: many(workflowExecutions)\r\n}));\r\n\r\nexport const workflowExecutionsRelations = relations(workflowExecutions, ({ one }) => ({\r\n  workflow: one(workflows, {\r\n    fields: [workflowExecutions.workflowId],\r\n    references: [workflows.id]\r\n  }),\r\n  session: one(chatSessions, {\r\n    fields: [workflowExecutions.sessionId],\r\n    references: [chatSessions.id]\r\n  })\r\n}));\r\n\r\n// Type exports for use in application\r\nexport type Project = typeof projects.$inferSelect;\r\nexport type NewProject = typeof projects.$inferInsert;\r\nexport type ChatSession = typeof chatSessions.$inferSelect;\r\nexport type NewChatSession = typeof chatSessions.$inferInsert;\r\nexport type ChatMessage = typeof chatHistory.$inferSelect;\r\nexport type NewChatMessage = typeof chatHistory.$inferInsert;\r\nexport type ContextEntry = typeof contextEntries.$inferSelect;\r\nexport type NewContextEntry = typeof contextEntries.$inferInsert;\r\nexport type Workflow = typeof workflows.$inferSelect;\r\nexport type NewWorkflow = typeof workflows.$inferInsert;\r\nexport type WorkflowExecution = typeof workflowExecutions.$inferSelect;\r\nexport type NewWorkflowExecution = typeof workflowExecutions.$inferInsert;\r\nexport type MCPServer = typeof mcpServers.$inferSelect;\r\nexport type NewMCPServer = typeof mcpServers.$inferInsert;\r\nexport type ModelConfiguration = typeof modelConfigurations.$inferSelect;\r\nexport type NewModelConfiguration = typeof modelConfigurations.$inferInsert;\r\nexport type SubjectMode = typeof subjectModes.$inferSelect;\r\nexport type NewSubjectMode = typeof subjectModes.$inferInsert;\r\nexport type Setting = typeof settings.$inferSelect;\r\nexport type NewSetting = typeof settings.$inferInsert; ", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "interface OllamaModel {\n  name: string;\n  size: number;\n  digest: string;\n  details: {\n    format: string;\n    family: string;\n    families: string[];\n    parameter_size: string;\n    quantization_level: string;\n    architecture: string;\n  };\n  performance?: ModelPerformance;\n}\n\ninterface ModelPerformance {\n  tokensPerSecond: number;\n  ramUsage: number;\n  vramUsage?: number;\n  cpuUsage: number;\n  lastBenchmark: Date;\n}\n\ninterface RecommendedModel {\n  name: string;\n  displayName: string;\n  description: string;\n  size: number;\n  parameterCount: string;\n  specialization: string[];\n  requirements: {\n    minRam: number;\n    recommendedRam: number;\n    minVram?: number;\n    recommendedVram?: number;\n    quantizationOptions?: string[];\n  };\n  estimatedPerformance: {\n    tokensPerSecondCPU: number;\n    tokensPerSecondGPU?: number;\n    contextLength: number;\n  };\n}interface GenerateRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n  options?: {\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    num_ctx?: number;\n    repeat_penalty?: number;\n    seed?: number;\n    num_thread?: number;\n    num_gpu?: number;\n    main_gpu?: number;\n    low_vram?: boolean;\n    f16_kv?: boolean;\n    use_mlock?: boolean;\n    use_mmap?: boolean;\n  };\n}\n\ninterface SystemInfo {\n  cpuCores: number;\n  availableRam: number;\n  gpuCount: number;\n  totalVram: number;\n}export class OllamaService {\n  private baseUrl = 'http://127.0.0.1:11434';\n  private performanceCache = new Map<string, ModelPerformance>();\n\n  async listModels(): Promise<OllamaModel[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data = await response.json();\n      \n      // Enrich with performance data\n      return (data.models || []).map(model => ({\n        ...model,\n        performance: this.performanceCache.get(model.name)\n      }));\n    } catch (error) {\n      console.error('Failed to list models:', error);\n      return [];\n    }\n  }\n\n  async checkOllamaHealth(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async generate(request: GenerateRequest): Promise<any> {\n    const response = await fetch(`${this.baseUrl}/api/generate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(request)\n    });\n    return response.json();\n  }\n\n  async getModelCatalog(): Promise<RecommendedModel[]> {\n    return [\n      {\n        name: 'qwq:32b',\n        displayName: 'QwQ-32B',\n        description: 'Advanced reasoning model with chain-of-thought capabilities',\n        size: 19.8,\n        parameterCount: '32B',\n        specialization: ['reasoning', 'mathematics', 'analysis'],\n        requirements: {\n          minRam: 24,\n          recommendedRam: 32,\n          minVram: 12,\n          recommendedVram: 20,\n          quantizationOptions: ['Q4_K_M', 'Q5_K_M', 'Q8_0']\n        },\n        estimatedPerformance: {\n          tokensPerSecondCPU: 12,\n          tokensPerSecondGPU: 28,\n          contextLength: 32768\n        }\n      },\n      {\n        name: 'deepseek-r1-distill-qwen:32b',\n        displayName: 'DeepSeek R1 Distill Qwen 32B',\n        description: 'Distilled reasoning model optimized for efficiency',\n        size: 14.9,\n        parameterCount: '32B',\n        specialization: ['reasoning', 'coding', 'problem-solving'],\n        requirements: {\n          minRam: 18,\n          recommendedRam: 24,\n          minVram: 8,\n          recommendedVram: 14,\n          quantizationOptions: ['Q4_K_M', 'Q5_K_M']\n        },\n        estimatedPerformance: {\n          tokensPerSecondCPU: 10,\n          tokensPerSecondGPU: 25,\n          contextLength: 32768\n        }\n      }\n    ];\n  }  async pullModelWithOptimization(\n    name: string, \n    onProgress?: (progress: any) => void\n  ): Promise<void> {\n    await this.setOptimizationFlags();\n    \n    const response = await fetch(`${this.baseUrl}/api/pull`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name, stream: true })\n    });\n\n    if (!response.body) throw new Error('No response body');\n    \n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n').filter(line => line.trim());\n      \n      for (const line of lines) {\n        try {\n          const progress = JSON.parse(line);\n          onProgress?.(progress);\n        } catch (e) {\n          // Skip invalid JSON lines\n        }\n      }\n    }\n    \n    await this.benchmarkModel(name);\n  }\n\n  private async setOptimizationFlags(): Promise<void> {\n    process.env.OLLAMA_FLASH_ATTENTION = '1';\n    process.env.OLLAMA_KV_CACHE_TYPE = 'q8_0';\n    process.env.OLLAMA_NUM_PARALLEL = '4';\n    process.env.OLLAMA_MAX_LOADED_MODELS = '2';\n  }\n\n  async benchmarkModel(modelName: string): Promise<ModelPerformance> {\n    const startTime = Date.now();\n    const testPrompt = \"Write a short explanation of quantum computing in simple terms.\";\n    \n    try {\n      const response = await this.generate({\n        model: modelName,\n        prompt: testPrompt,\n        options: { num_ctx: 2048 }\n      });\n      \n      const endTime = Date.now();\n      const executionTime = endTime - startTime;\n      const estimatedTokens = response.response?.length / 4 || 100;\n      const tokensPerSecond = (estimatedTokens / executionTime) * 1000;\n      \n      const performance: ModelPerformance = {\n        tokensPerSecond,\n        ramUsage: await this.getModelMemoryUsage(modelName),\n        cpuUsage: 0,\n        lastBenchmark: new Date()\n      };\n      \n      this.performanceCache.set(modelName, performance);\n      return performance;\n    } catch (error) {\n      throw new Error(`Benchmark failed for ${modelName}: ${error}`);\n    }\n  }\n\n  async generateWithOptimization(request: GenerateRequest): Promise<any> {\n    const optimizedRequest = await this.optimizeRequest(request);\n    \n    const response = await fetch(`${this.baseUrl}/api/generate`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(optimizedRequest)\n    });\n    return response.json();\n  }\n\n  private async optimizeRequest(request: GenerateRequest): Promise<GenerateRequest> {\n    const systemInfo = await this.getSystemInfo();\n    \n    return {\n      ...request,\n      options: {\n        ...request.options,\n        num_thread: Math.min(systemInfo.cpuCores, 8),\n        num_gpu: systemInfo.gpuCount,\n        num_ctx: this.calculateOptimalContextLength(request.model, systemInfo),\n        f16_kv: systemInfo.availableRam > 16,\n        use_mlock: systemInfo.availableRam > 32,\n        use_mmap: true\n      }\n    };\n  }\n\n  private async getSystemInfo(): Promise<SystemInfo> {\n    const os = require('os');\n    return {\n      cpuCores: os.cpus().length,\n      availableRam: Math.round(os.freemem() / (1024 ** 3)),\n      gpuCount: 0,\n      totalVram: 0\n    };\n  }\n\n  private calculateOptimalContextLength(modelName: string, systemInfo: SystemInfo): number {\n    const baseContext = 2048;\n    const maxContext = 32768;\n    \n    if (systemInfo.availableRam > 16) {\n      return Math.min(maxContext, baseContext * 4);\n    } else if (systemInfo.availableRam > 8) {\n      return Math.min(maxContext, baseContext * 2);\n    }\n    \n    return baseContext;\n  }\n\n  private async getModelMemoryUsage(modelName: string): Promise<number> {\n    const models = await this.listModels();\n    const model = models.find(m => m.name === modelName);\n    return model ? model.size * 1.2 : 0;\n  }\n\n  async deleteModel(modelName: string): Promise<void> {\n    await fetch(`${this.baseUrl}/api/delete`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: modelName })\n    });\n    \n    this.performanceCache.delete(modelName);\n  }\n\n  getPerformanceMetrics(modelName: string): ModelPerformance | undefined {\n    return this.performanceCache.get(modelName);\n  }\n}", "interface OpenRouterModel {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  pricing: {\r\n    prompt: number;\r\n    completion: number;\r\n  };\r\n  context_length: number;\r\n  architecture: {\r\n    modality: string;\r\n    tokenizer: string;\r\n    instruct_type?: string;\r\n  };\r\n  top_provider: {\r\n    max_completion_tokens?: number;\r\n    is_moderated: boolean;\r\n  };\r\n  per_request_limits?: {\r\n    prompt_tokens: number;\r\n    completion_tokens: number;\r\n  };\r\n}\r\n\r\ninterface FreeModelConfig {\r\n  id: string;\r\n  displayName: string;\r\n  description: string;\r\n  specialization: string[];\r\n  isAvailable: boolean;\r\n  rateLimits: {\r\n    requestsPerMinute: number;\r\n    tokensPerDay: number;\r\n  };\r\n}\r\n\r\nexport class OpenRouterService {\r\n  private baseUrl = 'https://openrouter.ai/api/v1';\r\n  private apiKey: string | null = null;\r\n  private freeModels: FreeModelConfig[] = [\r\n    {\r\n      id: 'meta-llama/llama-3.1-8b-instruct:free',\r\n      displayName: 'Llama 3.1 8B (Free)',\r\n      description: 'Fast and capable model for general conversation and reasoning',\r\n      specialization: ['conversation', 'reasoning', 'general'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 200000\r\n      }\r\n    },\r\n    {\r\n      id: 'google/gemma-2-9b-it:free',\r\n      displayName: 'Gemma 2 9B (Free)',\r\n      description: 'Google\\'s efficient model optimized for instruction following',\r\n      specialization: ['conversation', 'instruction-following', 'coding'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 200000\r\n      }\r\n    },\r\n    {\r\n      id: 'microsoft/phi-3-mini-128k-instruct:free',\r\n      displayName: 'Phi-3 Mini (Free)',\r\n      description: 'Compact yet powerful model from Microsoft, great for coding tasks',\r\n      specialization: ['coding', 'problem-solving', 'reasoning'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 15,\r\n        tokensPerDay: 100000\r\n      }\r\n    },\r\n    {\r\n      id: 'mistralai/mistral-7b-instruct:free',\r\n      displayName: 'Mistral 7B (Free)',\r\n      description: 'Balanced model with strong multilingual capabilities',\r\n      specialization: ['conversation', 'multilingual', 'creative-writing'],\r\n      isAvailable: true,\r\n      rateLimits: {\r\n        requestsPerMinute: 10,\r\n        tokensPerDay: 150000\r\n      }\r\n    }\r\n  ];\r\n\r\n  constructor() {\r\n    // API key is optional for free models, but improves rate limits when provided\r\n    this.apiKey = process.env.OPENROUTER_API_KEY || null;\r\n  }\r\n\r\n  async checkHealth(): Promise<{\r\n    isConnected: boolean;\r\n    availableModels: FreeModelConfig[];\r\n    lastChecked: Date;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      const availableModels = await this.getAvailableFreeModels();\r\n      return {\r\n        isConnected: true,\r\n        availableModels,\r\n        lastChecked: new Date()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        isConnected: false,\r\n        availableModels: [],\r\n        lastChecked: new Date(),\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getAvailableFreeModels(): Promise<FreeModelConfig[]> {\r\n    try {\r\n      // For free models, we return our curated list\r\n      // In a real implementation, you might want to verify availability via API\r\n      return this.freeModels.filter(model => model.isAvailable);\r\n    } catch (error) {\r\n      console.error('Failed to get available free models:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async generate(request: {\r\n    model: string;\r\n    messages: Array<{ role: string; content: string }>;\r\n    temperature?: number;\r\n    max_tokens?: number;\r\n    stream?: boolean;\r\n  }): Promise<{\r\n    content: string;\r\n    usage: {\r\n      prompt_tokens: number;\r\n      completion_tokens: number;\r\n      total_tokens: number;\r\n    };\r\n  }> {\r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json',\r\n      'HTTP-Referer': 'https://tanukimcp.com',\r\n      'X-Title': 'TanukiMCP Atlas'\r\n    };\r\n\r\n    if (this.apiKey) {\r\n      headers['Authorization'] = `Bearer ${this.apiKey}`;\r\n    }\r\n\r\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify({\r\n        model: request.model,\r\n        messages: request.messages,\r\n        temperature: request.temperature || 0.7,\r\n        max_tokens: request.max_tokens || 1000,\r\n        stream: false // For simplicity, we'll start without streaming\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`OpenRouter API error: ${response.status} - ${errorData}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    return {\r\n      content: data.choices[0].message.content,\r\n      usage: data.usage\r\n    };\r\n  }\r\n\r\n  async getModelRecommendations(taskType: 'coding' | 'reasoning' | 'conversation' | 'creative' | 'general'): Promise<FreeModelConfig[]> {\r\n    const availableModels = await this.getAvailableFreeModels();\r\n    \r\n    return availableModels\r\n      .filter(model => model.specialization.includes(taskType) || model.specialization.includes('general'))\r\n      .sort((a, b) => {\r\n        // Prioritize models that specialize in the requested task\r\n        const aSpecific = a.specialization.includes(taskType) ? 1 : 0;\r\n        const bSpecific = b.specialization.includes(taskType) ? 1 : 0;\r\n        return bSpecific - aSpecific;\r\n      });\r\n  }\r\n\r\n  // Helper method to get the best free model for a task\r\n  async getBestFreeModelForTask(taskType: 'coding' | 'reasoning' | 'conversation' | 'creative' | 'general'): Promise<FreeModelConfig | null> {\r\n    const recommendations = await this.getModelRecommendations(taskType);\r\n    return recommendations.length > 0 ? recommendations[0] : null;\r\n  }\r\n\r\n  // Check if we have enough quota for a request (simplified implementation)\r\n  canMakeRequest(modelId: string, estimatedTokens: number): boolean {\r\n    // In a real implementation, this would track actual usage\r\n    // For now, we assume we can always make requests within reasonable limits\r\n    return estimatedTokens < 4000; // Conservative token limit per request\r\n  }\r\n\r\n  getModelInfo(modelId: string): FreeModelConfig | null {\r\n    return this.freeModels.find(model => model.id === modelId) || null;\r\n  }\r\n} ", "interface SystemInfo {\n  cpu: {\n    brand: string;\n    model: string;\n    cores: number;\n    threads: number;\n    clockSpeed: number;\n    architecture: string;\n    cache: {\n      l1d?: number;\n      l1i?: number;\n      l2?: number;\n      l3?: number;\n    };\n  };\n  memory: {\n    total: number;\n    available: number;\n    used: number;\n    type: string;\n    speed?: number;\n    slots: number;\n  };\n  gpu: {\n    name: string;\n    vendor: string;\n    vram: number;\n    driver?: string;\n    computeCapability?: string;\n    supports: string[];\n  }[];\n  storage: {\n    drives: {\n      name: string;\n      type: 'SSD' | 'HDD' | 'NVMe';\n      size: number;\n      available: number;\n      speed?: number;\n    }[];\n  };\n}interface PerformanceMetrics {\n  cpu: {\n    usage: number;\n    temperature?: number;\n    frequency: number;\n  };\n  memory: {\n    usage: number;\n    available: number;\n    cached: number;\n  };\n  gpu: {\n    usage: number;\n    memory: number;\n    temperature?: number;\n  }[];\n  disk: {\n    readSpeed: number;\n    writeSpeed: number;\n    usage: number;\n  };\n}\n\nexport class SystemMonitor {\n  private metricsCache = new Map<string, PerformanceMetrics>();\n  private lastUpdate = 0;\n  private updateInterval = 5000; // 5 seconds\n\n  async getSystemInfo(): Promise<SystemInfo> {\n    const os = require('os');\n    const { execSync } = require('child_process');\n    \n    // CPU Information\n    const cpus = os.cpus();\n    const cpu = {\n      brand: this.getCPUBrand(),\n      model: cpus[0]?.model || 'Unknown',\n      cores: cpus.length,\n      threads: cpus.length, // Simplified\n      clockSpeed: cpus[0]?.speed || 0,\n      architecture: os.arch(),\n      cache: await this.getCPUCache()\n    };\n    \n    // Memory Information\n    const memory = {\n      total: Math.round(os.totalmem() / (1024 ** 3)),\n      available: Math.round(os.freemem() / (1024 ** 3)),\n      used: Math.round((os.totalmem() - os.freemem()) / (1024 ** 3)),\n      type: await this.getMemoryType(),\n      speed: await this.getMemorySpeed(),\n      slots: await this.getMemorySlots()\n    };\n    \n    return {\n      cpu,\n      memory,\n      gpu: await this.detectGPUs(),\n      storage: await this.getStorageInfo()\n    };\n  }\n\n  private getCPUBrand(): string {\n    const os = require('os');\n    const cpus = os.cpus();\n    if (cpus[0]?.model.includes('Intel')) return 'Intel';\n    if (cpus[0]?.model.includes('AMD')) return 'AMD';\n    return 'Unknown';\n  }\n\n  private async getCPUCache(): Promise<any> {\n    // Platform-specific cache detection would go here\n    return {\n      l1d: undefined,\n      l1i: undefined,\n      l2: undefined,\n      l3: undefined\n    };\n  }\n\n  private async getMemoryType(): Promise<string> {\n    // Memory type detection (DDR4, DDR5, etc.)\n    return 'DDR4'; // Simplified\n  }\n\n  private async getMemorySpeed(): Promise<number | undefined> {\n    // Memory speed detection\n    return undefined;\n  }\n\n  private async getMemorySlots(): Promise<number> {\n    // Memory slot detection\n    return 4; // Simplified\n  }\n\n  private async detectGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      \n      if (process.platform === 'win32') {\n        return await this.detectWindowsGPUs();\n      } else if (process.platform === 'linux') {\n        return await this.detectLinuxGPUs();\n      } else if (process.platform === 'darwin') {\n        return await this.detectMacGPUs();\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('GPU detection failed:', error);\n      return [];\n    }\n  }\n\n  private async detectWindowsGPUs(): Promise<any[]> {\n    try {\n      const { execSync } = require('child_process');\n      // Use wmic to get GPU information\n      const output = execSync('wmic path win32_VideoController get name,AdapterRAM', { encoding: 'utf8' });\n      // Parse output and return GPU info\n      return [];\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async detectLinuxGPUs(): Promise<any[]> {\n    // Linux GPU detection using lspci, nvidia-smi, etc.\n    return [];\n  }\n\n  private async detectMacGPUs(): Promise<any[]> {\n    // macOS GPU detection using system_profiler\n    return [];\n  }\n\n  private async getStorageInfo(): Promise<any> {\n    const os = require('os');\n    \n    return {\n      drives: [{\n        name: 'Primary Drive',\n        type: 'SSD' as const,\n        size: 500, // GB - simplified\n        available: 250,\n        speed: undefined\n      }]\n    };\n  }\n\n  async getCurrentMetrics(): Promise<PerformanceMetrics> {\n    const now = Date.now();\n    \n    if (now - this.lastUpdate < this.updateInterval) {\n      return this.metricsCache.get('current') || this.getDefaultMetrics();\n    }\n    \n    const metrics = await this.collectMetrics();\n    this.metricsCache.set('current', metrics);\n    this.lastUpdate = now;\n    \n    return metrics;\n  }\n\n  private async collectMetrics(): Promise<PerformanceMetrics> {\n    const os = require('os');\n    \n    return {\n      cpu: {\n        usage: await this.getCPUUsage(),\n        temperature: undefined,\n        frequency: os.cpus()[0]?.speed || 0\n      },\n      memory: {\n        usage: Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100),\n        available: Math.round(os.freemem() / (1024 ** 3)),\n        cached: 0\n      },\n      gpu: [],\n      disk: {\n        readSpeed: 0,\n        writeSpeed: 0,\n        usage: 0\n      }\n    };\n  }\n\n  private async getCPUUsage(): Promise<number> {\n    // CPU usage calculation\n    return Math.random() * 100; // Simplified\n  }\n\n  private getDefaultMetrics(): PerformanceMetrics {\n    return {\n      cpu: { usage: 0, frequency: 0 },\n      memory: { usage: 0, available: 0, cached: 0 },\n      gpu: [],\n      disk: { readSpeed: 0, writeSpeed: 0, usage: 0 }\n    };\n  }\n}", "interface SystemCapabilities {\n  cpu: {\n    cores: number;\n    threads: number;\n    architecture: string;\n    clockSpeed: number;\n    brand: string;\n  };\n  memory: {\n    total: number;\n    available: number;\n    type: string;\n    speed?: number;\n  };\n  gpu?: {\n    name: string;\n    vram: number;\n    computeCapability?: string;\n    supports: string[];\n  }[];\n  storage: {\n    available: number;\n    type: 'SSD' | 'HDD' | 'NVMe';\n    speed?: number;\n  };\n}\n\ninterface ModelRecommendation {\n  model: RecommendedModel;\n  compatibility: 'perfect' | 'good' | 'marginal' | 'incompatible';\n  expectedPerformance: {\n    tokensPerSecond: number;\n    ramUsage: number;\n    vramUsage?: number;\n    responseTime: number;\n  };\n  optimizations: OptimizationSuggestion[];\n  warnings?: string[];\n}\n\ninterface RecommendedModel {\n  name: string;\n  displayName: string;\n  description: string;\n  size: number;\n  parameterCount: string;\n  specialization: string[];\n}interface OptimizationSuggestion {\n  type: string;\n  description: string;\n  impact: string;\n}\n\nexport class HardwareAssessor {\n  async assessSystemCapabilities(): Promise<SystemCapabilities> {\n    const os = require('os');\n    \n    // CPU Assessment\n    const cpus = os.cpus();\n    const cpu = {\n      cores: os.cpus().length,\n      threads: os.cpus().length,\n      architecture: os.arch(),\n      clockSpeed: cpus[0]?.speed || 0,\n      brand: cpus[0]?.model || 'Unknown'\n    };\n    \n    // Memory Assessment\n    const memory = {\n      total: Math.round(os.totalmem() / (1024 ** 3)),\n      available: Math.round(os.freemem() / (1024 ** 3)),\n      type: 'DDR4'\n    };\n    \n    // GPU Assessment (platform-specific)\n    const gpu = await this.detectGPU();\n    \n    // Storage Assessment\n    const storage = await this.assessStorage();\n    \n    return { cpu, memory, gpu, storage };\n  }\n\n  async getModelRecommendations(\n    systemCaps: SystemCapabilities,\n    availableModels: RecommendedModel[]\n  ): Promise<ModelRecommendation[]> {\n    return availableModels.map(model => {\n      const compatibility = this.assessCompatibility(model, systemCaps);\n      const expectedPerformance = this.predictPerformance(model, systemCaps);\n      const optimizations = this.suggestOptimizations(model, systemCaps);\n      const warnings = this.generateWarnings(model, systemCaps);\n      \n      return {\n        model,\n        compatibility,\n        expectedPerformance,\n        optimizations,\n        warnings: warnings.length > 0 ? warnings : undefined\n      };\n    }).sort((a, b) => {\n      const compatibilityScore = {\n        'perfect': 4, 'good': 3, 'marginal': 2, 'incompatible': 1\n      };\n      \n      const scoreA = compatibilityScore[a.compatibility] * a.expectedPerformance.tokensPerSecond;\n      const scoreB = compatibilityScore[b.compatibility] * b.expectedPerformance.tokensPerSecond;\n      \n      return scoreB - scoreA;\n    });\n  }\n\n  private assessCompatibility(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): 'perfect' | 'good' | 'marginal' | 'incompatible' {\n    const ramOk = system.memory.available >= (model as any).requirements.minRam;\n    const ramGood = system.memory.available >= (model as any).requirements.recommendedRam;\n    \n    if (!ramOk) return 'incompatible';\n    \n    if (system.gpu && system.gpu.length > 0) {\n      const totalVram = system.gpu.reduce((sum, gpu) => sum + gpu.vram, 0);\n      const vramOk = totalVram >= ((model as any).requirements.minVram || 0);\n      const vramGood = totalVram >= ((model as any).requirements.recommendedVram || 0);\n      \n      if (ramGood && vramGood) return 'perfect';\n      if (ramGood && vramOk) return 'good';\n      if (ramOk) return 'marginal';\n    }\n    \n    if (ramGood) return 'good';\n    return 'marginal';\n  }\n\n  private predictPerformance(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): ModelRecommendation['expectedPerformance'] {\n    let tokensPerSecond = (model as any).estimatedPerformance.tokensPerSecondCPU;\n    \n    if (system.gpu && system.gpu.length > 0) {\n      const totalVram = system.gpu.reduce((sum, gpu) => sum + gpu.vram, 0);\n      if (totalVram >= ((model as any).requirements.recommendedVram || 0)) {\n        tokensPerSecond = (model as any).estimatedPerformance.tokensPerSecondGPU || tokensPerSecond * 2;\n      }\n    }\n    \n    const cpuMultiplier = Math.min(system.cpu.cores / 8, 1.5);\n    tokensPerSecond *= cpuMultiplier;\n    \n    return {\n      tokensPerSecond: Math.round(tokensPerSecond),\n      ramUsage: model.size * 1.2,\n      vramUsage: system.gpu ? model.size * 0.8 : undefined,\n      responseTime: (100 / tokensPerSecond) * 1000\n    };\n  }\n\n  private suggestOptimizations(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n    \n    if (system.memory.available < (model as any).requirements.recommendedRam) {\n      suggestions.push({\n        type: 'quantization',\n        description: 'Use Q4_K_M quantization to reduce memory usage',\n        impact: 'Reduces RAM usage by 60-70% with minimal quality loss'\n      });\n    }\n    \n    if (system.gpu && system.gpu.length > 0) {\n      suggestions.push({\n        type: 'gpu_acceleration',\n        description: 'Enable GPU acceleration for faster inference',\n        impact: 'Can improve speed by 2-5x depending on model size'\n      });\n    }\n    \n    suggestions.push({\n      type: 'context_optimization',\n      description: 'Optimize context window based on usage patterns',\n      impact: 'Reduces memory usage and improves response time'\n    });\n    \n    return suggestions;\n  }\n\n  private generateWarnings(\n    model: RecommendedModel,\n    system: SystemCapabilities\n  ): string[] {\n    const warnings: string[] = [];\n    \n    if (system.memory.available < (model as any).requirements.minRam) {\n      warnings.push('Insufficient RAM - performance will be severely degraded');\n    }\n    \n    if (!system.gpu || system.gpu.length === 0) {\n      warnings.push('No GPU detected - will use CPU-only inference (slower)');\n    }\n    \n    if (system.storage.type === 'HDD') {\n      warnings.push('HDD storage detected - SSD recommended for better performance');\n    }\n    \n    return warnings;\n  }\n\n  private async detectGPU(): Promise<any[]> {\n    try {\n      if (process.platform === 'win32') {\n        return await this.detectWindowsGPU();\n      } else if (process.platform === 'linux') {\n        return await this.detectLinuxGPU();\n      }\n      return [];\n    } catch (error) {\n      console.error('GPU detection failed:', error);\n      return [];\n    }\n  }\n\n  private async detectWindowsGPU(): Promise<any[]> {\n    // Windows GPU detection using wmic\n    return [];\n  }\n\n  private async detectLinuxGPU(): Promise<any[]> {\n    // Linux GPU detection using lspci/nvidia-smi\n    return [];\n  }\n\n  private async assessStorage(): Promise<any> {\n    return {\n      available: 100,\n      type: 'SSD' as const,\n      speed: 500\n    };\n  }\n}", "import { OllamaService } from './ollama-service';\nimport { HardwareAssessor } from './hardware-assessor';\n\ninterface ModelInstallation {\n  modelName: string;\n  status: 'downloading' | 'installing' | 'completed' | 'failed';\n  progress: number;\n  estimatedTime?: number;\n  error?: string;\n}\n\ninterface ModelConfiguration {\n  name: string;\n  parameters: {\n    temperature: number;\n    top_p: number;\n    top_k: number;\n    num_ctx: number;\n    repeat_penalty: number;\n    seed?: number;\n  };\n  optimizations: {\n    quantization?: string;\n    num_thread?: number;\n    num_gpu?: number;\n    f16_kv?: boolean;\n    use_mlock?: boolean;\n    use_mmap?: boolean;\n  };\n  isDefault: boolean;\n}\n\nexport class ModelManager {\n  private ollamaService: OllamaService;\n  private hardwareAssessor: HardwareAssessor;\n  private installations = new Map<string, ModelInstallation>();\n  private configurations = new Map<string, ModelConfiguration>();\n\n  constructor() {\n    this.ollamaService = new OllamaService();\n    this.hardwareAssessor = new HardwareAssessor();\n  }\n\n  async getRecommendedModels(): Promise<any[]> {\n    const catalog = await this.ollamaService.getModelCatalog();\n    const systemCaps = await this.hardwareAssessor.assessSystemCapabilities();\n    \n    return this.hardwareAssessor.getModelRecommendations(systemCaps, catalog);\n  }\n\n  async installModel(\n    modelName: string,\n    onProgress?: (progress: ModelInstallation) => void\n  ): Promise<void> {\n    const installation: ModelInstallation = {\n      modelName,\n      status: 'downloading',\n      progress: 0\n    };\n    \n    this.installations.set(modelName, installation);\n    onProgress?.(installation);\n    \n    try {\n      await this.ollamaService.pullModelWithOptimization(modelName, (progress) => {\n        installation.progress = this.calculateProgress(progress);\n        installation.status = progress.status === 'success' ? 'completed' : 'downloading';\n        this.installations.set(modelName, installation);\n        onProgress?.(installation);\n      });\n      \n      installation.status = 'completed';\n      installation.progress = 100;\n      this.installations.set(modelName, installation);\n      onProgress?.(installation);\n      \n    } catch (error) {\n      installation.status = 'failed';\n      installation.error = error.message;\n      this.installations.set(modelName, installation);\n      onProgress?.(installation);\n      throw error;\n    }\n  }\n\n  async uninstallModel(modelName: string): Promise<void> {\n    try {\n      await this.ollamaService.deleteModel(modelName);\n      this.installations.delete(modelName);\n      this.configurations.delete(modelName);\n    } catch (error) {\n      throw new Error(`Failed to uninstall model ${modelName}: ${error.message}`);\n    }\n  }\n\n  private calculateProgress(progress: any): number {\n    if (progress.completed && progress.total) {\n      return Math.round((progress.completed / progress.total) * 100);\n    }\n    return 0;\n  }\n\n  getInstallationStatus(modelName: string): ModelInstallation | undefined {\n    return this.installations.get(modelName);\n  }\n}", "interface OptimizationProfile {\n  name: string;\n  description: string;\n  settings: {\n    kvCacheType: 'q4_0' | 'q8_0' | 'f16' | 'f32';\n    numParallel: number;\n    maxLoadedModels: number;\n    flashAttention: boolean;\n    memoryMapping: boolean;\n    memoryLocking: boolean;\n    contextLength: number;\n    batchSize: number;\n    threadCount: number;\n    gpuLayers?: number;\n  };\n}\n\ninterface PerformanceMetrics {\n  tokensPerSecond: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  gpuUsage?: number;\n  latency: number;\n  throughput: number;\n}\n\nexport class OptimizationEngine {\n  private profiles = new Map<string, OptimizationProfile>();\n  private activeProfile: string = 'balanced';\n\n  constructor() {\n    this.initializeProfiles();\n  }\n\n  async optimizeForHardware(systemInfo: any): Promise<OptimizationProfile> {\n    // Analyze hardware and return optimized profile\n    if (systemInfo.memory.available > 16 && systemInfo.gpu?.length > 0) {\n      return this.profiles.get('performance')!;\n    } else if (systemInfo.memory.available < 8) {\n      return this.profiles.get('memory')!;\n    }\n    return this.profiles.get('balanced')!;\n  }\n\n  getProfile(name: string): OptimizationProfile | undefined {\n    return this.profiles.get(name);\n  }\n\n  getAllProfiles(): OptimizationProfile[] {\n    return Array.from(this.profiles.values());\n  }\n\n  setActiveProfile(name: string): void {\n    if (this.profiles.has(name)) {\n      this.activeProfile = name;\n    }\n  }\n\n  private initializeProfiles(): void {\n    // Performance profile\n    this.profiles.set('performance', {\n      name: 'Performance',\n      description: 'Maximum speed, higher memory usage',\n      settings: {\n        kvCacheType: 'f16',\n        numParallel: 8,\n        maxLoadedModels: 1,\n        flashAttention: true,\n        memoryMapping: true,\n        memoryLocking: true,\n        contextLength: 4096,\n        batchSize: 512,\n        threadCount: -1,\n        gpuLayers: -1\n      }\n    });\n\n    // Memory efficient profile\n    this.profiles.set('memory', {\n      name: 'Memory Efficient',\n      description: 'Lower memory usage, moderate speed',\n      settings: {\n        kvCacheType: 'q4_0',\n        numParallel: 2,\n        maxLoadedModels: 1,\n        flashAttention: true,\n        memoryMapping: false,\n        memoryLocking: false,\n        contextLength: 2048,\n        batchSize: 128,\n        threadCount: 4,\n        gpuLayers: 20\n      }\n    });\n\n    // Balanced profile\n    this.profiles.set('balanced', {\n      name: 'Balanced',\n      description: 'Good balance of speed and memory usage',\n      settings: {\n        kvCacheType: 'q8_0',\n        numParallel: 4,\n        maxLoadedModels: 2,\n        flashAttention: true,\n        memoryMapping: true,\n        memoryLocking: false,\n        contextLength: 3072,\n        batchSize: 256,\n        threadCount: 6,\n        gpuLayers: 32\n      }\n    });\n  }\n\n  async applyOptimizations(profile: OptimizationProfile): Promise<void> {\n    // Apply optimization settings to Ollama environment\n    process.env.OLLAMA_KV_CACHE_TYPE = profile.settings.kvCacheType;\n    process.env.OLLAMA_NUM_PARALLEL = profile.settings.numParallel.toString();\n    process.env.OLLAMA_MAX_LOADED_MODELS = profile.settings.maxLoadedModels.toString();\n    process.env.OLLAMA_FLASH_ATTENTION = profile.settings.flashAttention ? '1' : '0';\n  }\n}", "interface ParameterSet {\n  temperature: number;\n  top_p: number;\n  top_k: number;\n  repeat_penalty: number;\n  num_ctx: number;\n  seed?: number;\n}\n\ninterface TuningResult {\n  parameters: ParameterSet;\n  score: number;\n  metrics: {\n    coherence: number;\n    relevance: number;\n    creativity: number;\n    factualness: number;\n    speed: number;\n  };\n}\n\ninterface TuningTarget {\n  task: 'coding' | 'creative' | 'analytical' | 'conversational' | 'factual';\n  priority: 'speed' | 'quality' | 'balanced';\n  constraints: {\n    maxContextLength?: number;\n    targetSpeed?: number;\n    qualityThreshold?: number;\n  };\n}\n\nexport class ParameterTuner {\n  private presets = new Map<string, ParameterSet>();\n  private tuningHistory: TuningResult[] = [];\n\n  constructor() {\n    this.initializePresets();\n  }\n\n  getPreset(task: string): ParameterSet | undefined {\n    return this.presets.get(task);\n  }\n\n  getDefaultParameters(): ParameterSet {\n    return {\n      temperature: 0.5,\n      top_p: 0.9,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 2048\n    };\n  }\n\n  getAllPresets(): Map<string, ParameterSet> {\n    return new Map(this.presets);\n  }\n\n  private initializePresets(): void {\n    this.presets.set('coding', {\n      temperature: 0.1,\n      top_p: 0.95,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 4096\n    });\n\n    this.presets.set('creative', {\n      temperature: 0.8,\n      top_p: 0.9,\n      top_k: 50,\n      repeat_penalty: 1.05,\n      num_ctx: 2048\n    });\n\n    this.presets.set('analytical', {\n      temperature: 0.2,\n      top_p: 0.9,\n      top_k: 30,\n      repeat_penalty: 1.15,\n      num_ctx: 4096\n    });\n\n    this.presets.set('conversational', {\n      temperature: 0.7,\n      top_p: 0.95,\n      top_k: 40,\n      repeat_penalty: 1.1,\n      num_ctx: 2048\n    });\n  }\n\n  async generateParameterVariations(base: ParameterSet): Promise<ParameterSet[]> {\n    const variations: ParameterSet[] = [];\n    const tempVariations = [base.temperature * 0.8, base.temperature, base.temperature * 1.2];\n    const topPVariations = [Math.max(0.1, base.top_p - 0.1), base.top_p, Math.min(1.0, base.top_p + 0.1)];\n\n    for (const temp of tempVariations) {\n      for (const topP of topPVariations) {\n        variations.push({\n          ...base,\n          temperature: Math.max(0.01, Math.min(2.0, temp)),\n          top_p: topP\n        });\n      }\n    }\n\n    return variations;\n  }\n\n  async optimizeForTask(task: string, modelName: string): Promise<ParameterSet> {\n    const preset = this.getPreset(task) || this.getDefaultParameters();\n    return preset; // Simplified - would implement actual optimization\n  }\n}", "interface ContextEntry {\n  id: string;\n  sessionId: string;\n  type: 'file' | 'function' | 'concept' | 'memory';\n  key: string;\n  value: string;\n  vectorEmbedding?: Float32Array;\n  importance: number;\n  lastUsed: Date;\n  created: Date;\n}\n\ninterface MCPContextServer {\n  updateContext(sessionId: string, entry: ContextEntry): Promise<void>;\n}\n\nexport class ContextManager {\n  private vectorCache = new Map<string, Float32Array>();\n  private mcpContextServer: MCPContextServer;\n\n  constructor() {\n    this.mcpContextServer = {} as MCPContextServer; // Placeholder\n  }\n\n  async storeContext(\n    sessionId: string,\n    type: ContextEntry['type'],\n    key: string,\n    value: string,\n    importance = 1.0\n  ): Promise<void> {\n    const embedding = await this.generateEmbedding(value);\n    \n    const entry: ContextEntry = {\n      id: crypto.randomUUID(),\n      sessionId,\n      type,\n      key,\n      value,\n      vectorEmbedding: embedding,\n      importance,\n      lastUsed: new Date(),\n      created: new Date()\n    };\n    \n    await this.persistContextEntry(entry);\n    await this.mcpContextServer.updateContext(sessionId, entry);\n  }\n\n  async retrieveRelevantContext(\n    sessionId: string,\n    query: string,\n    maxResults = 10\n  ): Promise<ContextEntry[]> {\n    const queryEmbedding = await this.generateEmbedding(query);\n    const allEntries = await this.getSessionContext(sessionId);\n    \n    const scoredEntries = allEntries.map(entry => ({\n      entry,\n      score: this.calculateSimilarity(queryEmbedding, entry.vectorEmbedding || new Float32Array())\n    }));\n    \n    scoredEntries.sort((a, b) => (b.score * b.entry.importance) - (a.score * a.entry.importance));\n    \n    return scoredEntries.slice(0, maxResults).map(item => item.entry);\n  }\n\n  async optimizeContext(sessionId: string): Promise<void> {\n    const entries = await this.getSessionContext(sessionId);\n    \n    // Remove low-importance, old entries\n    const cutoffDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 days\n    const toRemove = entries.filter(entry => \n      entry.importance < 0.3 && entry.lastUsed < cutoffDate\n    );\n    \n    for (const entry of toRemove) {\n      await this.removeContextEntry(entry.id);\n    }\n    \n    // Compress similar entries\n    await this.compressSimilarEntries(sessionId);\n  }\n\n  private async generateEmbedding(text: string): Promise<Float32Array> {\n    // Simplified embedding generation - would use actual embedding model\n    const hash = this.simpleHash(text);\n    const embedding = new Float32Array(384); // Typical embedding size\n    \n    for (let i = 0; i < embedding.length; i++) {\n      embedding[i] = Math.sin(hash + i) * 0.1;\n    }\n    \n    return embedding;\n  }\n\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash;\n  }\n\n  private calculateSimilarity(a: Float32Array, b: Float32Array): number {\n    if (a.length !== b.length) return 0;\n    \n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    \n    for (let i = 0; i < a.length; i++) {\n      dotProduct += a[i] * b[i];\n      normA += a[i] * a[i];\n      normB += b[i] * b[i];\n    }\n    \n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  private async persistContextEntry(entry: ContextEntry): Promise<void> {\n    // Store in database - placeholder\n  }\n\n  private async getSessionContext(sessionId: string): Promise<ContextEntry[]> {\n    // Retrieve from database - placeholder\n    return [];\n  }\n\n  private async removeContextEntry(entryId: string): Promise<void> {\n    // Remove from database - placeholder\n  }\n\n  private async compressSimilarEntries(sessionId: string): Promise<void> {\n    // Compress similar entries - placeholder\n  }\n}", "import { Tray, Menu, BrowserWindow, app, nativeImage } from 'electron';\nimport path from 'path';\n\nexport class SystemTrayService {\n  private tray: Tray | null = null;\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.createTray();\n  }\n\n  private createTray(): void {\n    try {\n      // Create tray icon from assets\n      const iconPath = path.join(__dirname, '../../../assets/TanukiMCPLogo.png');\n      const trayIcon = nativeImage.createFromPath(iconPath);\n      \n      // Resize icon for tray (16x16 on Windows)\n      const resizedIcon = trayIcon.resize({ width: 16, height: 16 });\n      \n      this.tray = new Tray(resizedIcon);\n      this.tray.setToolTip('TanukiMCP Atlas - AI Agentic IDE');\n      \n      this.setupTrayMenu();\n      this.setupTrayEvents();\n      \n      console.log('\u2705 System tray created successfully');\n    } catch (error) {\n      console.error('\u274C Failed to create system tray:', error);\n    }\n  }\n\n  private setupTrayMenu(): void {\n    if (!this.tray) return;\n\n    const contextMenu = Menu.buildFromTemplate([\n      {\n        label: 'TanukiMCP Atlas',\n        type: 'normal',\n        enabled: false\n      },\n      { type: 'separator' },\n      {\n        label: 'Show Atlas',\n        type: 'normal',\n        click: () => this.showMainWindow()\n      },\n      {\n        label: 'Hide Atlas',\n        type: 'normal',\n        click: () => this.hideMainWindow()\n      },\n      { type: 'separator' },\n      {\n        label: 'New Project',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+N',\n        click: () => this.sendToRenderer('new-project')\n      },\n      {\n        label: 'Open Project',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+O',\n        click: () => this.sendToRenderer('open-project')\n      },\n      { type: 'separator' },\n      {\n        label: 'AI Chat',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+Shift+C',\n        click: () => this.sendToRenderer('focus-chat')\n      },\n      {\n        label: 'Command Palette',\n        type: 'normal',\n        accelerator: 'CmdOrCtrl+Shift+P',\n        click: () => this.sendToRenderer('command-palette')\n      },\n      { type: 'separator' },\n      {\n        label: 'Settings',\n        type: 'normal',\n        click: () => this.sendToRenderer('open-settings')\n      },\n      {\n        label: 'About',\n        type: 'normal',\n        click: () => this.sendToRenderer('show-about')\n      },\n      { type: 'separator' },\n      {\n        label: 'Quit Atlas',\n        type: 'normal',\n        accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',\n        click: () => {\n          app.quit();\n        }\n      }\n    ]);\n\n    this.tray.setContextMenu(contextMenu);\n  }  private setupTrayEvents(): void {\n    if (!this.tray || !this.mainWindow) return;\n\n    // Double-click to show/hide window\n    this.tray.on('double-click', () => {\n      if (this.mainWindow?.isVisible()) {\n        this.hideMainWindow();\n      } else {\n        this.showMainWindow();\n      }\n    });\n\n    // Single click behavior (Windows)\n    if (process.platform === 'win32') {\n      this.tray.on('click', () => {\n        if (this.mainWindow?.isVisible()) {\n          this.hideMainWindow();\n        } else {\n          this.showMainWindow();\n        }\n      });\n    }\n  }\n\n  private showMainWindow(): void {\n    if (!this.mainWindow) return;\n\n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n    \n    // Bring to front on Windows\n    if (process.platform === 'win32') {\n      this.mainWindow.setAlwaysOnTop(true);\n      this.mainWindow.setAlwaysOnTop(false);\n    }\n  }\n\n  private hideMainWindow(): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.hide();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    \n    this.showMainWindow();\n    this.mainWindow.webContents.send('tray-action', { action, data });\n  }\n\n  public updateTrayMenu(): void {\n    this.setupTrayMenu();\n  }\n\n  public destroy(): void {\n    if (this.tray) {\n      this.tray.destroy();\n      this.tray = null;\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { Menu, BrowserWindow, app, shell } from 'electron';\n\nexport class NativeMenuService {\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.createApplicationMenu();\n  }\n\n  private createApplicationMenu(): void {\n    const template: Electron.MenuItemConstructorOptions[] = [\n      {\n        label: 'File',\n        submenu: [\n          {\n            label: 'New Project',\n            accelerator: 'CmdOrCtrl+N',\n            click: () => this.sendToRenderer('new-project')\n          },\n          {\n            label: 'Open Project',\n            accelerator: 'CmdOrCtrl+O',\n            click: () => this.sendToRenderer('open-project')\n          },\n          { type: 'separator' },\n          {\n            label: 'Save',\n            accelerator: 'CmdOrCtrl+S',\n            click: () => this.sendToRenderer('save-file')\n          },\n          {\n            label: 'Save As...',\n            accelerator: 'CmdOrCtrl+Shift+S',\n            click: () => this.sendToRenderer('save-file-as')\n          },\n          { type: 'separator' },\n          {\n            label: 'Exit',\n            accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',\n            click: () => app.quit()\n          }\n        ]\n      },\n      {\n        label: 'Edit',\n        submenu: [\n          { role: 'undo' },\n          { role: 'redo' },\n          { type: 'separator' },\n          { role: 'cut' },\n          { role: 'copy' },\n          { role: 'paste' },\n          { role: 'selectall' },\n          { type: 'separator' },\n          {\n            label: 'Find',\n            accelerator: 'CmdOrCtrl+F',\n            click: () => this.sendToRenderer('find')\n          },\n          {\n            label: 'Replace',\n            accelerator: 'CmdOrCtrl+H',\n            click: () => this.sendToRenderer('replace')\n          }\n        ]\n      },\n      {\n        label: 'View',\n        submenu: [\n          { role: 'reload' },\n          { role: 'forceReload' },\n          { role: 'toggleDevTools' },\n          { type: 'separator' },\n          { role: 'resetZoom' },\n          { role: 'zoomIn' },\n          { role: 'zoomOut' },\n          { type: 'separator' },\n          { role: 'togglefullscreen' },\n          { type: 'separator' },\n          {\n            label: 'Command Palette',\n            accelerator: 'CmdOrCtrl+Shift+P',\n            click: () => this.sendToRenderer('command-palette')\n          }\n        ]\n      },\n      {\n        label: 'AI',\n        submenu: [\n          {\n            label: 'Open Chat',\n            accelerator: 'CmdOrCtrl+Shift+C',\n            click: () => this.sendToRenderer('focus-chat')\n          },\n          {\n            label: 'New Agent',\n            accelerator: 'CmdOrCtrl+Shift+A',\n            click: () => this.sendToRenderer('new-agent')\n          },\n          {\n            label: 'Workflow Builder',\n            accelerator: 'CmdOrCtrl+Shift+W',\n            click: () => this.sendToRenderer('workflow-builder')\n          }\n        ]\n      },\n      {\n        label: 'Tools',\n        submenu: [\n          {\n            label: 'MCP Servers',\n            click: () => this.sendToRenderer('mcp-servers')\n          },\n          {\n            label: 'Model Manager',\n            click: () => this.sendToRenderer('model-manager')\n          },\n          { type: 'separator' },\n          {\n            label: 'Settings',\n            accelerator: 'CmdOrCtrl+,',\n            click: () => this.sendToRenderer('open-settings')\n          }\n        ]\n      },\n      {\n        label: 'Help',\n        submenu: [\n          {\n            label: 'Documentation',\n            click: () => shell.openExternal('https://tanukimcp.com/docs')\n          },\n          {\n            label: 'Community',\n            click: () => shell.openExternal('https://github.com/TanukiMCP/atlas')\n          },\n          { type: 'separator' },\n          {\n            label: 'About TanukiMCP Atlas',\n            click: () => this.sendToRenderer('show-about')\n          }\n        ]\n      }\n    ];\n\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('menu-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { autoUpdater } from 'electron-updater';\nimport { BrowserWindow, dialog, Notification } from 'electron';\n\nexport class AutoUpdaterService {\n  private mainWindow: BrowserWindow | null = null;\n  private updateAvailable = false;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.setupAutoUpdater();\n  }\n\n  private setupAutoUpdater(): void {\n    autoUpdater.autoDownload = false;\n    autoUpdater.autoInstallOnAppQuit = true;\n\n    autoUpdater.on('checking-for-update', () => {\n      console.log('\uD83D\uDD0D Checking for updates...');\n      this.sendToRenderer('update-checking');\n    });\n\n    autoUpdater.on('update-available', (info) => {\n      console.log('\uD83D\uDCE6 Update available:', info.version);\n      this.updateAvailable = true;\n      this.showUpdateAvailableNotification(info);\n      this.sendToRenderer('update-available', info);\n    });\n\n    autoUpdater.on('update-not-available', (info) => {\n      console.log('\u2705 No updates available');\n      this.sendToRenderer('update-not-available', info);\n    });\n\n    autoUpdater.on('error', (err) => {\n      console.error('\u274C Update error:', err);\n      this.sendToRenderer('update-error', err.message);\n    });\n\n    autoUpdater.on('download-progress', (progressObj) => {\n      const message = `Downloaded ${progressObj.percent.toFixed(1)}%`;\n      console.log('\uD83D\uDCE5', message);\n      this.sendToRenderer('update-download-progress', progressObj);\n    });\n\n    autoUpdater.on('update-downloaded', (info) => {\n      console.log('\u2705 Update downloaded:', info.version);\n      this.showUpdateReadyNotification(info);\n      this.sendToRenderer('update-downloaded', info);\n    });\n  }  private showUpdateAvailableNotification(info: any): void {\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: 'TanukiMCP Atlas Update Available',\n        body: `Version ${info.version} is available. Click to download.`,\n        icon: require('path').join(__dirname, '../../../assets/TanukiMCPLogo.png')\n      });\n\n      notification.on('click', () => {\n        this.downloadUpdate();\n      });\n\n      notification.show();\n    }\n  }\n\n  private showUpdateReadyNotification(info: any): void {\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: 'TanukiMCP Atlas Update Ready',\n        body: `Version ${info.version} has been downloaded. Restart to apply.`,\n        icon: require('path').join(__dirname, '../../../assets/TanukiMCPLogo.png')\n      });\n\n      notification.on('click', () => {\n        this.installUpdate();\n      });\n\n      notification.show();\n    }\n  }\n\n  public async checkForUpdates(): Promise<void> {\n    try {\n      await autoUpdater.checkForUpdates();\n    } catch (error) {\n      console.error('Failed to check for updates:', error);\n    }\n  }\n\n  public async downloadUpdate(): Promise<void> {\n    try {\n      await autoUpdater.downloadUpdate();\n    } catch (error) {\n      console.error('Failed to download update:', error);\n    }\n  }\n\n  public installUpdate(): void {\n    autoUpdater.quitAndInstall();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('updater-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { Notification, BrowserWindow } from 'electron';\nimport path from 'path';\n\nexport interface NotificationOptions {\n  title: string;\n  body: string;\n  icon?: string;\n  silent?: boolean;\n  onClick?: () => void;\n}\n\nexport class NotificationService {\n  private mainWindow: BrowserWindow | null = null;\n  private defaultIcon: string;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.defaultIcon = path.join(__dirname, '../../../assets/TanukiMCPLogo.png');\n  }\n\n  public showNotification(options: NotificationOptions): void {\n    if (!Notification.isSupported()) {\n      console.warn('Notifications not supported on this platform');\n      return;\n    }\n\n    const notification = new Notification({\n      title: options.title,\n      body: options.body,\n      icon: options.icon || this.defaultIcon,\n      silent: options.silent || false\n    });\n\n    if (options.onClick) {\n      notification.on('click', options.onClick);\n    }\n\n    notification.show();\n  }\n\n  public showBuildComplete(projectName: string): void {\n    this.showNotification({\n      title: 'Build Complete',\n      body: `${projectName} has been built successfully`,\n      onClick: () => this.focusMainWindow()\n    });\n  }  public showError(title: string, message: string): void {\n    this.showNotification({\n      title: `Error: ${title}`,\n      body: message,\n      onClick: () => this.focusMainWindow()\n    });\n  }\n\n  private focusMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { crashReporter, BrowserWindow, dialog } from 'electron';\nimport { writeFileSync, existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport { app } from 'electron';\n\nexport class CrashReporterService {\n  private mainWindow: BrowserWindow | null = null;\n  private crashLogDir: string;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.crashLogDir = join(app.getPath('userData'), 'crash-logs');\n    this.setupCrashReporter();\n  }\n\n  private setupCrashReporter(): void {\n    if (!existsSync(this.crashLogDir)) {\n      mkdirSync(this.crashLogDir, { recursive: true });\n    }\n\n    crashReporter.start({\n      productName: 'TanukiMCP Atlas',\n      companyName: 'TanukiMCP',\n      submitURL: '',\n      uploadToServer: false,\n      ignoreSystemCrashHandler: false,\n      rateLimit: true,\n      compress: true\n    });\n\n    console.log('\u2705 Crash reporter initialized');\n  }\n\n  public logCrash(error: Error, context?: string): void {\n    const timestamp = new Date().toISOString();\n    const crashLog = {\n      timestamp,\n      context: context || 'Unknown',\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      },\n      system: {\n        platform: process.platform,\n        arch: process.arch,\n        version: process.version,\n        appVersion: app.getVersion()\n      }\n    };    const logFile = join(this.crashLogDir, `crash-${Date.now()}.json`);\n    \n    try {\n      writeFileSync(logFile, JSON.stringify(crashLog, null, 2));\n      console.log('\uD83D\uDCA5 Crash logged to:', logFile);\n    } catch (writeError) {\n      console.error('Failed to write crash log:', writeError);\n    }\n  }\n\n  public async showCrashDialog(error: Error): Promise<void> {\n    const result = await dialog.showMessageBox(this.mainWindow!, {\n      type: 'error',\n      title: 'Application Error',\n      message: 'TanukiMCP Atlas encountered an unexpected error',\n      detail: `${error.message}\\n\\nThe error has been logged for debugging.`,\n      buttons: ['Restart', 'Close', 'Report Issue'],\n      defaultId: 0,\n      cancelId: 1\n    });\n\n    switch (result.response) {\n      case 0: // Restart\n        app.relaunch();\n        app.exit();\n        break;\n      case 2: // Report Issue\n        require('electron').shell.openExternal('https://github.com/TanukiMCP/atlas/issues');\n        break;\n    }\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { app, BrowserWindow } from 'electron';\n\nexport class ProtocolHandlerService {\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(mainWindow: BrowserWindow) {\n    this.mainWindow = mainWindow;\n    this.setupProtocolHandler();\n  }\n\n  private setupProtocolHandler(): void {\n    if (!app.isDefaultProtocolClient('tanukimcp')) {\n      app.setAsDefaultProtocolClient('tanukimcp');\n    }\n\n    app.on('second-instance', (event, commandLine, workingDirectory) => {\n      if (this.mainWindow) {\n        if (this.mainWindow.isMinimized()) {\n          this.mainWindow.restore();\n        }\n        this.mainWindow.focus();\n      }\n\n      const url = commandLine.find(arg => arg.startsWith('tanukimcp://'));\n      if (url) {\n        this.handleProtocolUrl(url);\n      }\n    });\n\n    app.on('open-url', (event, url) => {\n      event.preventDefault();\n      this.handleProtocolUrl(url);\n    });\n\n    console.log('\u2705 Protocol handler registered for tanukimcp://');\n  }\n\n  private handleProtocolUrl(url: string): void {\n    console.log('\uD83D\uDD17 Handling protocol URL:', url);\n\n    try {\n      const parsedUrl = new URL(url);\n      const action = parsedUrl.hostname;\n      const params = Object.fromEntries(parsedUrl.searchParams);\n\n      this.focusMainWindow();\n      this.sendToRenderer('protocol-action', { action, params, url });\n    } catch (error) {\n      console.error('Failed to parse protocol URL:', error);\n    }\n  }  private focusMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    if (this.mainWindow.isMinimized()) {\n      this.mainWindow.restore();\n    }\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n  }\n\n  private sendToRenderer(action: string, data?: any): void {\n    if (!this.mainWindow) return;\n    this.mainWindow.webContents.send('protocol-action', { action, data });\n  }\n\n  public setMainWindow(window: BrowserWindow): void {\n    this.mainWindow = window;\n  }\n}", "import { LLMRequest, ComplexityAssessment, RequestComplexity } from './types';\r\n\r\nexport class ComplexityAssessor {\r\n  assess(request: LLMRequest): ComplexityAssessment {\r\n    // Placeholder logic: simple keyword-based assessment\r\n    // This will be expanded with more sophisticated NLP and rule-based checks\r\n    const query = request.query.toLowerCase();\r\n\r\n    if (query.includes('thank you') || query.includes('yes') || query.includes('no')) {\r\n      return {\r\n        complexity: RequestComplexity.DIRECT_RESPONSE,\r\n        estimatedTimeMs: 2000,\r\n        reasoning: 'Simple acknowledgement or affirmative/negative.'\r\n      };\r\n    }\r\n\r\n    if (query.split(' ').length < 10 && !query.includes('clear-thought')) {\r\n        return {\r\n            complexity: RequestComplexity.ATOMIC,\r\n            estimatedTimeMs: 10000,\r\n            reasoning: 'Short query, likely a single step.'\r\n        };\r\n    }\r\n\r\n    if (query.includes('clear-thought') || query.includes('analyze') || query.includes('plan')) {\r\n        return {\r\n            complexity: RequestComplexity.COMPLEX,\r\n            estimatedTimeMs: 180000, // 3 minutes\r\n            reasoning: 'Query indicates need for advanced reasoning or clear-thought tools.'\r\n        };\r\n    }\r\n    \r\n    // Default to MODERATE for now\r\n    return {\r\n      complexity: RequestComplexity.MODERATE,\r\n      estimatedTimeMs: 30000,\r\n      reasoning: 'Defaulting to moderate complexity.'\r\n    };\r\n  }\r\n} ", "import { LLMRequest, LLMResponse, RequestComplexity, TierProcessor } from './types';\r\n\r\nexport class Tier1Processor implements TierProcessor {\r\n  async process(request: LLMRequest): Promise<LLMResponse> {\r\n    // Simple, direct response. E.g., canned responses or very simple LLM call.\r\n    let content = 'Acknowledged.';\r\n    if (request.query.toLowerCase().includes('thank you')) {\r\n        content = 'You are welcome!';\r\n    }\r\n    // Add more direct responses as needed\r\n\r\n    return {\r\n      requestId: request.id,\r\n      tierUsed: RequestComplexity.DIRECT_RESPONSE,\r\n      content,\r\n      metrics: { processingTimeMs: 50 + Math.random() * 100 }, // Simulate fast processing\r\n    };\r\n  }\r\n} ", "import { LLMRequest, LLMResponse, RequestComplexity, TierProcessor } from './types';\r\nimport { LLMService } from '../services/llm-service';\r\n\r\nexport class Tier2Processor implements TierProcessor {\r\n  private llmService: LLMService;\r\n\r\n  constructor(llmService: LLMService) {\r\n    this.llmService = llmService;\r\n  }\r\n\r\n  async process(request: LLMRequest): Promise<LLMResponse> {\r\n    const startTime = Date.now();\r\n    try {\r\n      // For Tier 2, we expect a relatively straightforward query\r\n      // Use the LLM service directly with optimized parameters for quick responses\r\n      const prompt = `You are a helpful AI assistant. Please provide a clear, concise response to the following query:\r\n\r\n${request.query}\r\n\r\nKeep your response focused and direct.`;\r\n\r\n      const content = await this.llmService.generate(prompt, {\r\n        temperature: 0.3, // Lower temperature for more focused responses\r\n        top_p: 0.8,\r\n        top_k: 30\r\n      });\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.ATOMIC,\r\n        content,\r\n        qualityScore: 0.8, // Good quality for atomic responses\r\n        metrics: { \r\n          processingTimeMs: processingTime,\r\n          modelUsed: this.llmService.getCurrentModel(),\r\n          tokensEstimate: Math.ceil(content.length / 4) // Rough token estimate\r\n        }\r\n      };\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.ATOMIC,\r\n        content: 'I apologize, but I encountered an error processing your request. Please try again.',\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        metrics: { \r\n          processingTimeMs: processingTime,\r\n          failed: true\r\n        }\r\n      };\r\n    }\r\n  }\r\n} ", "import { LLMRequest, LLMResponse, RequestComplexity, TierProcessor } from './types';\r\nimport { LLMService } from '../services/llm-service';\r\nimport { MCPToolCall } from '../services/mcp-client-adapter';\r\n\r\nexport class Tier3Processor implements TierProcessor {\r\n  private llmService: LLMService;\r\n\r\n  constructor(llmService: LLMService) {\r\n    this.llmService = llmService;\r\n  }\r\n\r\n  async process(request: LLMRequest): Promise<LLMResponse> {\r\n    const startTime = Date.now();\r\n    try {\r\n      // Tier 3 handles moderate complexity with clear-thought tools\r\n      const shouldUseSequentialThinking = this.shouldUseSequentialThinking(request.query);\r\n      const shouldUseMentalModel = this.shouldUseMentalModel(request.query);\r\n\r\n      let content = '';\r\n      let toolsUsed: string[] = [];\r\n\r\n      if (shouldUseSequentialThinking) {\r\n        const thinkingResult = await this.useSequentialThinking(request.query);\r\n        if (thinkingResult.success) {\r\n          content += `**Structured Analysis:**\\n${thinkingResult.content}\\n\\n`;\r\n          toolsUsed.push('sequential-thinking');\r\n        }\r\n      }\r\n\r\n      if (shouldUseMentalModel) {\r\n        const mentalModelResult = await this.useMentalModel(request.query);\r\n        if (mentalModelResult.success) {\r\n          content += `**Mental Model Analysis:**\\n${mentalModelResult.content}\\n\\n`;\r\n          toolsUsed.push('mental-model');\r\n        }\r\n      }\r\n\r\n      // Generate final response using LLM with context from tools\r\n      const finalPrompt = `You are an expert assistant. Based on the following analysis and the original query, provide a comprehensive response.\r\n\r\n${content ? `Previous Analysis:\\n${content}` : ''}\r\n\r\nOriginal Query: ${request.query}\r\n\r\nPlease provide a well-structured, thoughtful response that builds upon any analysis provided above.`;\r\n\r\n      const llmResponse = await this.llmService.generate(finalPrompt, {\r\n        temperature: 0.6,\r\n        top_p: 0.9,\r\n        top_k: 40\r\n      });\r\n\r\n      content += `**Final Response:**\\n${llmResponse}`;\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.MODERATE,\r\n        content,\r\n        qualityScore: 0.85,\r\n        metrics: {\r\n          processingTimeMs: processingTime,\r\n          modelUsed: this.llmService.getCurrentModel(),\r\n          toolsUsed,\r\n          tokensEstimate: Math.ceil(content.length / 4)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.MODERATE,\r\n        content: 'I encountered an error while processing your request with enhanced reasoning tools. Let me provide a direct response instead.',\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        metrics: {\r\n          processingTimeMs: processingTime,\r\n          failed: true\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private shouldUseSequentialThinking(query: string): boolean {\r\n    const indicators = [\r\n      'step by step', 'analyze', 'break down', 'process', 'methodology',\r\n      'approach', 'strategy', 'plan', 'solve', 'problem'\r\n    ];\r\n    const lowerQuery = query.toLowerCase();\r\n    return indicators.some(indicator => lowerQuery.includes(indicator));\r\n  }\r\n\r\n  private shouldUseMentalModel(query: string): boolean {\r\n    const indicators = [\r\n      'first principles', 'fundamental', 'root cause', 'why', 'principle',\r\n      'framework', 'model', 'theory', 'concept', 'understand'\r\n    ];\r\n    const lowerQuery = query.toLowerCase();\r\n    return indicators.some(indicator => lowerQuery.includes(indicator));\r\n  }\r\n\r\n  private async useSequentialThinking(query: string) {\r\n    const toolCall: MCPToolCall = {\r\n      name: 'sequentialthinking',\r\n      arguments: {\r\n        thought: `I need to analyze this query systematically: ${query}`,\r\n        thoughtNumber: 1,\r\n        totalThoughts: 3,\r\n        nextThoughtNeeded: true\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private async useMentalModel(query: string) {\r\n    // Determine appropriate mental model based on query content\r\n    let modelName = 'first_principles';\r\n    \r\n    if (query.toLowerCase().includes('decision') || query.toLowerCase().includes('choose')) {\r\n      modelName = 'opportunity_cost';\r\n    } else if (query.toLowerCase().includes('simple') || query.toLowerCase().includes('complex')) {\r\n      modelName = 'occams_razor';\r\n    }\r\n\r\n    const toolCall: MCPToolCall = {\r\n      name: 'mentalmodel',\r\n      arguments: {\r\n        modelName,\r\n        problem: query\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n} ", "import { LLMRequest, LLMResponse, RequestComplexity, TierProcessor } from './types';\r\nimport { LLMService } from '../services/llm-service';\r\nimport { MCPToolCall } from '../services/mcp-client-adapter';\r\n\r\nexport class Tier4Processor implements TierProcessor {\r\n  private llmService: LLMService;\r\n\r\n  constructor(llmService: LLMService) {\r\n    this.llmService = llmService;\r\n  }\r\n\r\n  async process(request: LLMRequest): Promise<LLMResponse> {\r\n    const startTime = Date.now();\r\n    try {\r\n      // Tier 4: Complex/Expert level processing with full clear-thought integration\r\n      const analysisResults = await this.performComprehensiveAnalysis(request.query);\r\n      \r\n      // Generate final expert response\r\n      const finalPrompt = this.buildExpertPrompt(request.query, analysisResults);\r\n      const expertResponse = await this.llmService.generate(finalPrompt, {\r\n        temperature: 0.7,\r\n        top_p: 0.95,\r\n        top_k: 50\r\n      });\r\n\r\n      const content = this.formatExpertResponse(analysisResults, expertResponse);\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: request.query.toLowerCase().includes('expert') ? RequestComplexity.EXPERT : RequestComplexity.COMPLEX,\r\n        content,\r\n        qualityScore: 0.95,\r\n        metrics: {\r\n          processingTimeMs: processingTime,\r\n          modelUsed: this.llmService.getCurrentModel(),\r\n          toolsUsed: analysisResults.toolsUsed,\r\n          analysisDepth: 'comprehensive',\r\n          tokensEstimate: Math.ceil(content.length / 4)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.COMPLEX,\r\n        content: 'I encountered an error during comprehensive analysis. Let me provide a detailed response based on available information.',\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        metrics: {\r\n          processingTimeMs: processingTime,\r\n          failed: true\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private async performComprehensiveAnalysis(query: string) {\r\n    const results = {\r\n      sequentialThinking: null as any,\r\n      mentalModel: null as any,\r\n      designPattern: null as any,\r\n      scientificMethod: null as any,\r\n      collaborativeReasoning: null as any,\r\n      toolsUsed: [] as string[]\r\n    };\r\n\r\n    // Sequential thinking for structured analysis\r\n    try {\r\n      const thinkingResult = await this.useSequentialThinking(query);\r\n      if (thinkingResult.success) {\r\n        results.sequentialThinking = thinkingResult;\r\n        results.toolsUsed.push('sequential-thinking');\r\n      }\r\n    } catch (error) {\r\n      console.warn('Sequential thinking failed:', error);\r\n    }\r\n\r\n    // Mental model analysis\r\n    try {\r\n      const mentalModelResult = await this.useMentalModel(query);\r\n      if (mentalModelResult.success) {\r\n        results.mentalModel = mentalModelResult;\r\n        results.toolsUsed.push('mental-model');\r\n      }\r\n    } catch (error) {\r\n      console.warn('Mental model analysis failed:', error);\r\n    }\r\n\r\n    // Design pattern analysis (if applicable)\r\n    if (this.isDesignRelated(query)) {\r\n      try {\r\n        const designResult = await this.useDesignPattern(query);\r\n        if (designResult.success) {\r\n          results.designPattern = designResult;\r\n          results.toolsUsed.push('design-pattern');\r\n        }\r\n      } catch (error) {\r\n        console.warn('Design pattern analysis failed:', error);\r\n      }\r\n    }\r\n\r\n    // Scientific method (for hypothesis-driven queries)\r\n    if (this.isScientificInquiry(query)) {\r\n      try {\r\n        const scientificResult = await this.useScientificMethod(query);\r\n        if (scientificResult.success) {\r\n          results.scientificMethod = scientificResult;\r\n          results.toolsUsed.push('scientific-method');\r\n        }\r\n      } catch (error) {\r\n        console.warn('Scientific method analysis failed:', error);\r\n      }\r\n    }\r\n\r\n    // Collaborative reasoning for complex problems\r\n    if (this.requiresMultiplePerspectives(query)) {\r\n      try {\r\n        const collaborativeResult = await this.useCollaborativeReasoning(query);\r\n        if (collaborativeResult.success) {\r\n          results.collaborativeReasoning = collaborativeResult;\r\n          results.toolsUsed.push('collaborative-reasoning');\r\n        }\r\n      } catch (error) {\r\n        console.warn('Collaborative reasoning failed:', error);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  private buildExpertPrompt(query: string, analysisResults: any): string {\r\n    let prompt = `You are an expert AI assistant with access to comprehensive analytical tools. Based on the following multi-faceted analysis, provide an authoritative, well-structured response.\r\n\r\nOriginal Query: ${query}\r\n\r\n`;\r\n\r\n    if (analysisResults.sequentialThinking) {\r\n      prompt += `**Structured Analysis:**\r\n${analysisResults.sequentialThinking.content}\r\n\r\n`;\r\n    }\r\n\r\n    if (analysisResults.mentalModel) {\r\n      prompt += `**Mental Model Framework:**\r\n${analysisResults.mentalModel.content}\r\n\r\n`;\r\n    }\r\n\r\n    if (analysisResults.designPattern) {\r\n      prompt += `**Design Pattern Analysis:**\r\n${analysisResults.designPattern.content}\r\n\r\n`;\r\n    }\r\n\r\n    if (analysisResults.scientificMethod) {\r\n      prompt += `**Scientific Method Application:**\r\n${analysisResults.scientificMethod.content}\r\n\r\n`;\r\n    }\r\n\r\n    if (analysisResults.collaborativeReasoning) {\r\n      prompt += `**Multi-Perspective Analysis:**\r\n${analysisResults.collaborativeReasoning.content}\r\n\r\n`;\r\n    }\r\n\r\n    prompt += `Please synthesize all the above analyses into a comprehensive, expert-level response that addresses the original query with depth, nuance, and practical insights.`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  private formatExpertResponse(analysisResults: any, expertResponse: string): string {\r\n    let content = '# Expert Analysis\\n\\n';\r\n\r\n    if (analysisResults.toolsUsed.length > 0) {\r\n      content += `*Analysis conducted using: ${analysisResults.toolsUsed.join(', ')}*\\n\\n`;\r\n    }\r\n\r\n    content += expertResponse;\r\n\r\n    if (analysisResults.toolsUsed.length > 1) {\r\n      content += '\\n\\n---\\n\\n## Analytical Framework Summary\\n\\n';\r\n      \r\n      if (analysisResults.sequentialThinking) {\r\n        content += '**Structured Thinking:** Applied systematic reasoning process\\n';\r\n      }\r\n      if (analysisResults.mentalModel) {\r\n        content += '**Mental Models:** Leveraged cognitive frameworks for deeper understanding\\n';\r\n      }\r\n      if (analysisResults.designPattern) {\r\n        content += '**Design Patterns:** Applied proven architectural solutions\\n';\r\n      }\r\n      if (analysisResults.scientificMethod) {\r\n        content += '**Scientific Method:** Used hypothesis-driven analysis\\n';\r\n      }\r\n      if (analysisResults.collaborativeReasoning) {\r\n        content += '**Multi-Perspective Analysis:** Considered diverse viewpoints\\n';\r\n      }\r\n    }\r\n\r\n    return content;\r\n  }\r\n\r\n  private async useSequentialThinking(query: string) {\r\n    const toolCall: MCPToolCall = {\r\n      name: 'sequentialthinking',\r\n      arguments: {\r\n        thought: `I need to perform a comprehensive analysis of this complex query: ${query}`,\r\n        thoughtNumber: 1,\r\n        totalThoughts: 5,\r\n        nextThoughtNeeded: true\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private async useMentalModel(query: string) {\r\n    // Select appropriate mental model based on query analysis\r\n    let modelName = 'first_principles';\r\n    \r\n    if (query.toLowerCase().includes('decision') || query.toLowerCase().includes('choose')) {\r\n      modelName = 'opportunity_cost';\r\n    } else if (query.toLowerCase().includes('error') || query.toLowerCase().includes('debug')) {\r\n      modelName = 'error_propagation';\r\n    } else if (query.toLowerCase().includes('priority') || query.toLowerCase().includes('important')) {\r\n      modelName = 'pareto_principle';\r\n    }\r\n\r\n    const toolCall: MCPToolCall = {\r\n      name: 'mentalmodel',\r\n      arguments: {\r\n        modelName,\r\n        problem: query\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private async useDesignPattern(query: string) {\r\n    let patternName = 'modular_architecture';\r\n    \r\n    if (query.toLowerCase().includes('api') || query.toLowerCase().includes('integration')) {\r\n      patternName = 'api_integration';\r\n    } else if (query.toLowerCase().includes('state') || query.toLowerCase().includes('data')) {\r\n      patternName = 'state_management';\r\n    } else if (query.toLowerCase().includes('async') || query.toLowerCase().includes('concurrent')) {\r\n      patternName = 'async_processing';\r\n    } else if (query.toLowerCase().includes('scale') || query.toLowerCase().includes('performance')) {\r\n      patternName = 'scalability';\r\n    } else if (query.toLowerCase().includes('security') || query.toLowerCase().includes('auth')) {\r\n      patternName = 'security';\r\n    }\r\n\r\n    const toolCall: MCPToolCall = {\r\n      name: 'designpattern',\r\n      arguments: {\r\n        patternName,\r\n        context: query\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private async useScientificMethod(query: string) {\r\n    const toolCall: MCPToolCall = {\r\n      name: 'scientificmethod',\r\n      arguments: {\r\n        stage: 'observation',\r\n        observation: query,\r\n        inquiryId: `inquiry_${Date.now()}`,\r\n        iteration: 0,\r\n        nextStageNeeded: true\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private async useCollaborativeReasoning(query: string) {\r\n    const toolCall: MCPToolCall = {\r\n      name: 'collaborativereasoning',\r\n      arguments: {\r\n        topic: query,\r\n        personas: [\r\n          {\r\n            id: 'analyst',\r\n            name: 'Systems Analyst',\r\n            expertise: ['systems thinking', 'analysis', 'problem solving'],\r\n            background: 'Expert in breaking down complex problems',\r\n            perspective: 'Analytical and methodical',\r\n            biases: ['over-analysis'],\r\n            communication: { style: 'structured', tone: 'professional' }\r\n          },\r\n          {\r\n            id: 'creative',\r\n            name: 'Creative Strategist',\r\n            expertise: ['innovation', 'creative thinking', 'ideation'],\r\n            background: 'Specialist in novel approaches and solutions',\r\n            perspective: 'Creative and unconventional',\r\n            biases: ['novelty bias'],\r\n            communication: { style: 'inspirational', tone: 'enthusiastic' }\r\n          }\r\n        ],\r\n        contributions: [],\r\n        stage: 'problem-definition',\r\n        activePersonaId: 'analyst',\r\n        sessionId: `session_${Date.now()}`,\r\n        iteration: 0,\r\n        nextContributionNeeded: true\r\n      }\r\n    };\r\n\r\n    return await this.llmService.executeMCPTool(toolCall);\r\n  }\r\n\r\n  private isDesignRelated(query: string): boolean {\r\n    const designKeywords = [\r\n      'architecture', 'design', 'pattern', 'structure', 'system',\r\n      'api', 'interface', 'module', 'component', 'framework'\r\n    ];\r\n    const lowerQuery = query.toLowerCase();\r\n    return designKeywords.some(keyword => lowerQuery.includes(keyword));\r\n  }\r\n\r\n  private isScientificInquiry(query: string): boolean {\r\n    const scientificKeywords = [\r\n      'hypothesis', 'test', 'experiment', 'research', 'study',\r\n      'evidence', 'prove', 'validate', 'investigate', 'analyze'\r\n    ];\r\n    const lowerQuery = query.toLowerCase();\r\n    return scientificKeywords.some(keyword => lowerQuery.includes(keyword));\r\n  }\r\n\r\n  private requiresMultiplePerspectives(query: string): boolean {\r\n    const complexityIndicators = [\r\n      'complex', 'complicated', 'multifaceted', 'various', 'different',\r\n      'perspective', 'viewpoint', 'opinion', 'debate', 'controversial'\r\n    ];\r\n    const lowerQuery = query.toLowerCase();\r\n    return complexityIndicators.some(indicator => lowerQuery.includes(indicator)) || query.length > 200;\r\n  }\r\n} ", "import { LLMRequest, LLMResponse, RequestComplexity, TierProcessor } from './types';\r\nimport { ComplexityAssessor } from './complexityAssessor';\r\nimport { Tier1Processor } from './tier1Processor';\r\nimport { Tier2Processor } from './tier2Processor';\r\nimport { Tier3Processor } from './tier3Processor';\r\nimport { Tier4Processor } from './tier4Processor';\r\nimport { LLMService } from '../services/llm-service';\r\n\r\nexport class LLMRouter {\r\n  private complexityAssessor: ComplexityAssessor;\r\n  private tier1Processor: Tier1Processor;\r\n  private tier2Processor: Tier2Processor;\r\n  private tier3Processor: Tier3Processor;\r\n  private tier4Processor: Tier4Processor;\r\n  private llmService: LLMService;\r\n\r\n  constructor(llmService: LLMService) {\r\n    this.llmService = llmService;\r\n    this.complexityAssessor = new ComplexityAssessor();\r\n    this.tier1Processor = new Tier1Processor();\r\n    this.tier2Processor = new Tier2Processor(llmService);\r\n    this.tier3Processor = new Tier3Processor(llmService);\r\n    this.tier4Processor = new Tier4Processor(llmService);\r\n  }\r\n\r\n  async routeRequest(request: LLMRequest): Promise<LLMResponse> {\r\n    try {\r\n      // Assess complexity\r\n      const assessment = this.complexityAssessor.assess(request);\r\n      \r\n      // Route to appropriate tier\r\n      const processor = this.getProcessor(assessment.complexity);\r\n      \r\n      // Process request\r\n      const response = await processor.process(request);\r\n      \r\n      // Add routing metadata\r\n      response.metrics = {\r\n        ...response.metrics,\r\n        complexityAssessment: assessment,\r\n        routingDecision: assessment.complexity,\r\n        estimatedTimeMs: assessment.estimatedTimeMs\r\n      };\r\n\r\n      return response;\r\n    } catch (error) {\r\n      // Fallback to basic response\r\n      return {\r\n        requestId: request.id,\r\n        tierUsed: RequestComplexity.ATOMIC,\r\n        content: 'I apologize, but I encountered an error processing your request. Please try again.',\r\n        error: error instanceof Error ? error.message : 'Unknown routing error',\r\n        metrics: {\r\n          failed: true,\r\n          routingError: true\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private getProcessor(complexity: RequestComplexity): TierProcessor {\r\n    switch (complexity) {\r\n      case RequestComplexity.DIRECT_RESPONSE:\r\n        return this.tier1Processor;\r\n      case RequestComplexity.ATOMIC:\r\n        return this.tier2Processor;\r\n      case RequestComplexity.MODERATE:\r\n        return this.tier3Processor;\r\n      case RequestComplexity.COMPLEX:\r\n      case RequestComplexity.EXPERT:\r\n        return this.tier4Processor;\r\n      default:\r\n        return this.tier2Processor; // Default fallback\r\n    }\r\n  }\r\n\r\n  async getRouterStatus() {\r\n    const isHealthy = await this.llmService.isHealthy();\r\n    const isMCPConnected = this.llmService.isMCPConnected();\r\n    \r\n    return {\r\n      healthy: isHealthy,\r\n      mcpConnected: isMCPConnected,\r\n      currentModel: this.llmService.getCurrentModel(),\r\n      availableModels: await this.llmService.getAvailableModels(),\r\n      availableMCPTools: await this.llmService.getAvailableMCPTools(),\r\n      tiers: {\r\n        tier1: 'Direct Response',\r\n        tier2: 'Atomic (Basic LLM)',\r\n        tier3: 'Moderate (LLM + Clear-Thought)',\r\n        tier4: 'Complex/Expert (Full Analysis)'\r\n      }\r\n    };\r\n  }\r\n\r\n  async testComplexityAssessment(query: string) {\r\n    const request: LLMRequest = {\r\n      id: `test_${Date.now()}`,\r\n      query,\r\n      userId: 'test_user',\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    const assessment = this.complexityAssessor.assess(request);\r\n    return {\r\n      query,\r\n      assessment,\r\n      selectedTier: assessment.complexity,\r\n      processor: this.getProcessor(assessment.complexity).constructor.name\r\n    };\r\n  }\r\n} ", "import { MCPClientInterface, MCPToolCall, MCPToolResult } from './mcp-client-adapter';\r\n\r\nexport interface LLMServiceConfig {\r\n  baseUrl?: string;\r\n  defaultModel?: string;\r\n  timeout?: number;\r\n}\r\n\r\nexport interface LLMGenerateOptions {\r\n  model?: string;\r\n  temperature?: number;\r\n  top_p?: number;\r\n  top_k?: number;\r\n  repeat_penalty?: number;\r\n  max_tokens?: number;\r\n}\r\n\r\nimport { OllamaServiceInterface } from './ollama-adapter';\r\n\r\nexport class LLMService {\r\n  private defaultModel: string;\r\n  private mcpClient: MCPClientInterface | null = null;\r\n  private ollamaService: OllamaServiceInterface | null = null;\r\n\r\n  constructor(config: LLMServiceConfig = {}) {\r\n    this.defaultModel = config.defaultModel || 'llama3.1:latest';\r\n  }\r\n\r\n  setOllamaService(service: OllamaServiceInterface): void {\r\n    this.ollamaService = service;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (!this.ollamaService) {\r\n      throw new Error('Ollama service not configured');\r\n    }\r\n\r\n    await this.ollamaService.checkHealth();\r\n    const models = await this.ollamaService.getModels();\r\n    \r\n    if (models.length > 0) {\r\n      // Set the first available model as default if not already set\r\n      const availableModel = models.find(m => m.name === this.defaultModel) || models[0];\r\n      this.ollamaService.setModel(availableModel.name);\r\n    }\r\n  }\r\n\r\n  setMCPClient(client: MCPClientInterface): void {\r\n    this.mcpClient = client;\r\n  }\r\n\r\n  async generate(prompt: string, options: LLMGenerateOptions = {}): Promise<string> {\r\n    if (!this.ollamaService) {\r\n      throw new Error('Ollama service not configured');\r\n    }\r\n\r\n    const messages = [\r\n      { role: 'user', content: prompt }\r\n    ];\r\n\r\n    const response = await this.ollamaService.chat(messages, {\r\n      temperature: options.temperature || 0.7,\r\n      top_p: options.top_p || 0.9,\r\n      top_k: options.top_k || 40,\r\n      repeat_penalty: options.repeat_penalty || 1.1\r\n    });\r\n\r\n    return response.message.content;\r\n  }\r\n\r\n  async generateWithMessages(messages: Array<{ role: string; content: string }>, options: LLMGenerateOptions = {}): Promise<{ message: { content: string } }> {\r\n    if (!this.ollamaService) {\r\n      throw new Error('Ollama service not configured');\r\n    }\r\n\r\n    return await this.ollamaService.chat(messages, {\r\n      temperature: options.temperature || 0.7,\r\n      top_p: options.top_p || 0.9,\r\n      top_k: options.top_k || 40,\r\n      repeat_penalty: options.repeat_penalty || 1.1\r\n    });\r\n  }\r\n\r\n  async executeMCPTool(toolCall: MCPToolCall): Promise<MCPToolResult> {\r\n    if (!this.mcpClient) {\r\n      return {\r\n        success: false,\r\n        error: 'MCP client not configured'\r\n      };\r\n    }\r\n\r\n    return await this.mcpClient.executeToolCall(toolCall);\r\n  }\r\n\r\n  async isHealthy(): Promise<boolean> {\r\n    if (!this.ollamaService) {\r\n      return false;\r\n    }\r\n\r\n    const health = await this.ollamaService.checkHealth();\r\n    return health.isConnected;\r\n  }\r\n\r\n  getCurrentModel(): string {\r\n    if (!this.ollamaService) {\r\n      return '';\r\n    }\r\n    return this.ollamaService.getCurrentModel();\r\n  }\r\n\r\n  async getAvailableModels(): Promise<string[]> {\r\n    if (!this.ollamaService) {\r\n      return [];\r\n    }\r\n\r\n    const models = await this.ollamaService.getModels();\r\n    return models.map(m => m.name);\r\n  }\r\n\r\n  setModel(modelName: string): void {\r\n    if (!this.ollamaService) {\r\n      throw new Error('Ollama service not configured');\r\n    }\r\n    this.ollamaService.setModel(modelName);\r\n  }\r\n\r\n  isMCPConnected(): boolean {\r\n    return this.mcpClient?.isConnected() || false;\r\n  }\r\n\r\n  async getAvailableMCPTools(): Promise<string[]> {\r\n    if (!this.mcpClient) {\r\n      return [];\r\n    }\r\n    return await this.mcpClient.getAvailableTools();\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const llmService = new LLMService(); ", "export interface MCPToolCall {\r\n  name: string;\r\n  arguments: Record<string, any>;\r\n}\r\n\r\nexport interface MCPToolResult {\r\n  success: boolean;\r\n  content?: string;\r\n  error?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface MCPClientInterface {\r\n  executeToolCall(toolCall: MCPToolCall): Promise<MCPToolResult>;\r\n  isConnected(): boolean;\r\n  getAvailableTools(): Promise<string[]>;\r\n}\r\n\r\n// This adapter will be injected with the actual MCP hub service\r\nexport class MCPClientAdapter implements MCPClientInterface {\r\n  private mcpHubService: any = null;\r\n\r\n  setMCPHubService(service: any): void {\r\n    this.mcpHubService = service;\r\n  }\r\n\r\n  async executeToolCall(toolCall: MCPToolCall): Promise<MCPToolResult> {\r\n    if (!this.mcpHubService) {\r\n      return {\r\n        success: false,\r\n        error: 'MCP hub service not configured'\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Execute the tool call through the MCP hub\r\n      const result = await this.mcpHubService.executeTool(toolCall.name, toolCall.arguments);\r\n      \r\n      return {\r\n        success: true,\r\n        content: typeof result === 'string' ? result : JSON.stringify(result),\r\n        metadata: { toolName: toolCall.name }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        metadata: { toolName: toolCall.name }\r\n      };\r\n    }\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.mcpHubService !== null;\r\n  }\r\n\r\n  async getAvailableTools(): Promise<string[]> {\r\n    if (!this.mcpHubService) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const tools = await this.mcpHubService.getAvailableTools();\r\n      return tools.map((tool: any) => tool.name || tool.id);\r\n    } catch (error) {\r\n      console.error('Failed to get available MCP tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport const mcpClientAdapter = new MCPClientAdapter(); ", "import { LLMRouter } from './router/router';\r\nimport { LLMService } from './services/llm-service';\r\nimport { mcpClientAdapter } from './services/mcp-client-adapter';\r\nimport { LLMRequest, LLMResponse } from './router/types';\r\n\r\nexport interface EnhancedLLMConfig {\r\n  baseUrl?: string;\r\n  defaultModel?: string;\r\n  enableClearThought?: boolean;\r\n}\r\n\r\nexport class EnhancedLLMService {\r\n  private router: LLMRouter;\r\n  private llmService: LLMService;\r\n  private isInitialized = false;\r\n\r\n  constructor(config: EnhancedLLMConfig = {}) {\r\n    this.llmService = new LLMService(config);\r\n    this.router = new LLMRouter(this.llmService);\r\n  }\r\n\r\n  async initialize(ollamaService: any, mcpHubService?: any): Promise<void> {\r\n    try {\r\n      // Set up Ollama service\r\n      this.llmService.setOllamaService(ollamaService);\r\n      \r\n      // Set up MCP client if available\r\n      if (mcpHubService) {\r\n        mcpClientAdapter.setMCPHubService(mcpHubService);\r\n        this.llmService.setMCPClient(mcpClientAdapter);\r\n      }\r\n\r\n      // Initialize LLM service\r\n      await this.llmService.initialize();\r\n      \r\n      this.isInitialized = true;\r\n      console.log('Enhanced LLM Service initialized successfully');\r\n    } catch (error) {\r\n      console.error('Failed to initialize Enhanced LLM Service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async generateResponse(query: string, userId: string = 'default', metadata?: Record<string, any>): Promise<LLMResponse> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Enhanced LLM Service not initialized. Call initialize() first.');\r\n    }\r\n\r\n    const request: LLMRequest = {\r\n      id: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      query,\r\n      userId,\r\n      timestamp: Date.now(),\r\n      metadata\r\n    };\r\n\r\n    return await this.router.routeRequest(request);\r\n  }\r\n\r\n  async getStatus() {\r\n    if (!this.isInitialized) {\r\n      return {\r\n        initialized: false,\r\n        error: 'Service not initialized'\r\n      };\r\n    }\r\n\r\n    const routerStatus = await this.router.getRouterStatus();\r\n    return {\r\n      initialized: true,\r\n      ...routerStatus\r\n    };\r\n  }\r\n\r\n  async testComplexityAssessment(query: string) {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Enhanced LLM Service not initialized');\r\n    }\r\n\r\n    return await this.router.testComplexityAssessment(query);\r\n  }\r\n\r\n  // Direct access to basic LLM functionality for backward compatibility\r\n  async generateBasic(prompt: string, options?: any): Promise<string> {\r\n    if (!this.isInitialized) {\r\n      throw new Error('Enhanced LLM Service not initialized');\r\n    }\r\n\r\n    return await this.llmService.generate(prompt, options);\r\n  }\r\n\r\n  isReady(): boolean {\r\n    return this.isInitialized;\r\n  }\r\n\r\n  getCurrentModel(): string {\r\n    return this.llmService.getCurrentModel();\r\n  }\r\n\r\n  async setModel(modelName: string): Promise<void> {\r\n    this.llmService.setModel(modelName);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const enhancedLLMService = new EnhancedLLMService(); ", "import { EventEmitter } from 'events';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  IMCPHubService,\r\n  MCPServerConfig,\r\n  ToolCall,\r\n  ToolResult,\r\n  ToolCatalog,\r\n  EnhancedToolDefinition,\r\n  ToolConflict,\r\n  HealthReport,\r\n  ServerHealth,\r\n  ExecutionContext,\r\n  ErrorRecoveryResult,\r\n  MCPHubEvents\r\n} from './types';\r\nimport { TransportFactory } from './transports/transport-factory';\r\nimport { BaseTransport } from './transports/base-transport';\r\nimport { HealthMonitor } from './health/health-monitor';\r\n\r\ninterface MCPConnection {\r\n  id: string;\r\n  config: MCPServerConfig;\r\n  transport: BaseTransport;\r\n  tools: EnhancedToolDefinition[];\r\n  lastToolSync: Date;\r\n  messageQueue: any[];\r\n  connected: boolean;\r\n}\r\n\r\nexport class MCPClientHub extends EventEmitter implements IMCPHubService {\r\n  private connections: Map<string, MCPConnection> = new Map();\r\n  private configs: Map<string, MCPServerConfig> = new Map();\r\n  private healthMonitor: HealthMonitor;\r\n  private toolCache: Map<string, EnhancedToolDefinition[]> = new Map();\r\n  private conflictResolutions: Map<string, ToolConflict> = new Map();\r\n  private pendingRequests: Map<string, { resolve: any; reject: any; timeout: NodeJS.Timeout }> = new Map();\r\n  private isInitialized: boolean = false;\r\n\r\n  constructor() {\r\n    super();\r\n    this.healthMonitor = new HealthMonitor();\r\n    this.setupHealthMonitorListeners();\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n\r\n    console.log('Initializing MCP Client Hub...');\r\n    \r\n    // Load saved configurations\r\n    await this.loadSavedConfigurations();\r\n    \r\n    // Auto-connect to servers with autoRestart enabled\r\n    await this.autoConnectServers();\r\n    \r\n    this.isInitialized = true;\r\n    console.log('MCP Client Hub initialized');\r\n  }\r\n\r\n  async addServer(config: MCPServerConfig): Promise<void> {\r\n    console.log(`Adding MCP server: ${config.name} (${config.id})`);\r\n    \r\n    // Validate configuration\r\n    TransportFactory.validateConfig(config.transport);\r\n    \r\n    // Store configuration\r\n    this.configs.set(config.id, config);\r\n    await this.saveConfiguration(config);\r\n    \r\n    // Connect immediately\r\n    await this.connectServer(config.id);\r\n  }\r\n\r\n  async removeServer(serverId: string): Promise<void> {\r\n    console.log(`Removing MCP server: ${serverId}`);\r\n    \r\n    // Disconnect if connected\r\n    await this.disconnectServer(serverId);\r\n    \r\n    // Remove from all maps\r\n    this.configs.delete(serverId);\r\n    this.connections.delete(serverId);\r\n    this.toolCache.delete(serverId);\r\n    \r\n    // Stop health monitoring\r\n    this.healthMonitor.stopMonitoring(serverId);\r\n    \r\n    // Remove from storage\r\n    await this.removeStoredConfiguration(serverId);\r\n    \r\n    this.emit('server:removed', serverId);\r\n  }\r\n\r\n  async connectServer(serverId: string): Promise<void> {\r\n    const config = this.configs.get(serverId);\r\n    if (!config) {\r\n      throw new Error(`Server configuration not found: ${serverId}`);\r\n    }\r\n\r\n    console.log(`Connecting to MCP server: ${config.name}`);\r\n    \r\n    // Disconnect if already connected\r\n    if (this.connections.has(serverId)) {\r\n      await this.disconnectServer(serverId);\r\n    }\r\n\r\n    try {\r\n      // Create transport\r\n      const transport = TransportFactory.create(config.transport);\r\n      \r\n      // Set up transport event handlers\r\n      this.setupTransportHandlers(serverId, transport);\r\n      \r\n      // Create connection record\r\n      const connection: MCPConnection = {\r\n        id: serverId,\r\n        config,\r\n        transport,\r\n        tools: [],\r\n        lastToolSync: new Date(),\r\n        messageQueue: [],\r\n        connected: false\r\n      };\r\n      \r\n      this.connections.set(serverId, connection);\r\n      \r\n      // Start health monitoring\r\n      this.healthMonitor.startMonitoring(serverId, config);\r\n      this.healthMonitor.updateServerStatus(serverId, 'connecting');\r\n      \r\n      // Attempt connection\r\n      await transport.connect();\r\n      \r\n      // Initialize MCP session\r\n      await this.initializeMCPSession(serverId);\r\n      \r\n      console.log(`Successfully connected to MCP server: ${config.name}`);\r\n      \r\n         } catch (error) {\r\n       const errorMessage = error instanceof Error ? error.message : String(error);\r\n       console.error(`Failed to connect to MCP server ${config.name}:`, error);\r\n       this.healthMonitor.updateServerStatus(serverId, 'error', errorMessage);\r\n      \r\n      // Schedule retry if auto-restart is enabled\r\n      if (config.autoRestart) {\r\n        setTimeout(() => {\r\n          this.reconnectServer(serverId);\r\n        }, config.retryDelay);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async disconnectServer(serverId: string): Promise<void> {\r\n    const connection = this.connections.get(serverId);\r\n    if (!connection) return;\r\n\r\n    console.log(`Disconnecting from MCP server: ${connection.config.name}`);\r\n    \r\n    try {\r\n      await connection.transport.disconnect();\r\n    } catch (error) {\r\n      console.warn(`Error disconnecting from ${serverId}:`, error);\r\n    }\r\n    \r\n    connection.connected = false;\r\n    this.healthMonitor.updateServerStatus(serverId, 'disconnected');\r\n    \r\n    this.emit('server:disconnected', serverId, 'Manual disconnect');\r\n  }\r\n\r\n  async reconnectServer(serverId: string): Promise<void> {\r\n    console.log(`Reconnecting to MCP server: ${serverId}`);\r\n    \r\n    const config = this.configs.get(serverId);\r\n    if (!config) {\r\n      throw new Error(`Server configuration not found: ${serverId}`);\r\n    }\r\n    \r\n    await this.disconnectServer(serverId);\r\n    await this.connectServer(serverId);\r\n  }\r\n\r\n  async executeToolCall(toolCall: ToolCall, context: ExecutionContext): Promise<ToolResult> {\r\n    const messageId = uuidv4();\r\n    \r\n    // Find the server that provides this tool\r\n    const { serverId, tool } = this.findToolProvider(toolCall.name);\r\n    \r\n    if (serverId === 'builtin') {\r\n      // Route to built-in tools (would need integration with built-in MCP server)\r\n      throw new Error('Built-in tool execution not implemented in hub');\r\n    }\r\n    \r\n    const connection = this.connections.get(serverId);\r\n    if (!connection || !connection.connected) {\r\n      throw new Error(`Server ${serverId} is not connected`);\r\n    }\r\n    \r\n    try {\r\n      // Record request start for metrics\r\n      this.healthMonitor.recordRequestStart(serverId, messageId);\r\n      \r\n      // Send tool call request\r\n      const mcpRequest = {\r\n        jsonrpc: '2.0',\r\n        id: messageId,\r\n        method: 'tools/call',\r\n        params: {\r\n          name: toolCall.name,\r\n          arguments: toolCall.arguments\r\n        }\r\n      };\r\n      \r\n      // Send request and wait for response\r\n      const result = await this.sendRequestAndWaitForResponse(serverId, mcpRequest, context.timeoutMs);\r\n      \r\n      // Record successful completion\r\n      this.healthMonitor.recordRequestEnd(serverId, messageId, true);\r\n      \r\n      // Update tool usage metrics\r\n      this.updateToolMetrics(serverId, toolCall.name, true);\r\n      \r\n      this.emit('tool:executed', toolCall.name, serverId, Date.now() - context.timestamp.getTime(), true);\r\n      \r\n      return this.formatToolResult(result);\r\n      \r\n    } catch (error) {\r\n      // Record failed completion\r\n      this.healthMonitor.recordRequestEnd(serverId, messageId, false);\r\n      this.updateToolMetrics(serverId, toolCall.name, false);\r\n      \r\n             this.emit('tool:failed', toolCall.name, serverId, error);\r\n       \r\n       // Attempt error recovery\r\n       const errorObj = error instanceof Error ? error : new Error(String(error));\r\n       return await this.handleToolExecutionError(errorObj, toolCall, context);\r\n    }\r\n  }\r\n\r\n  async getAllAvailableTools(): Promise<ToolCatalog> {\r\n    const tools: EnhancedToolDefinition[] = [];\r\n    const sources: string[] = ['builtin'];\r\n    const categories = new Set<string>();\r\n    const conflicts: ToolConflict[] = [];\r\n    \r\n    // Add built-in tools (placeholder - would integrate with built-in MCP server)\r\n    const builtinTools = await this.getBuiltinTools();\r\n    tools.push(...builtinTools);\r\n    builtinTools.forEach(tool => categories.add(tool.category));\r\n    \r\n    // Add external tools\r\n    for (const [serverId, connection] of this.connections) {\r\n      if (connection.connected && connection.tools.length > 0) {\r\n        sources.push(serverId);\r\n        tools.push(...connection.tools);\r\n        connection.tools.forEach(tool => categories.add(tool.category));\r\n      }\r\n    }\r\n    \r\n    // Detect and resolve conflicts\r\n    const toolsByName = new Map<string, EnhancedToolDefinition[]>();\r\n    for (const tool of tools) {\r\n      if (!toolsByName.has(tool.name)) {\r\n        toolsByName.set(tool.name, []);\r\n      }\r\n      toolsByName.get(tool.name)!.push(tool);\r\n    }\r\n    \r\n    for (const [toolName, toolVersions] of toolsByName) {\r\n      if (toolVersions.length > 1) {\r\n        const conflict: ToolConflict = {\r\n          toolName,\r\n          sources: toolVersions.map(t => t.source),\r\n          resolution: 'prefer_builtin', // Default resolution\r\n          selectedSource: toolVersions.find(t => t.source === 'builtin')?.source || toolVersions[0].source\r\n        };\r\n        conflicts.push(conflict);\r\n        this.conflictResolutions.set(toolName, conflict);\r\n      }\r\n    }\r\n    \r\n    const catalog: ToolCatalog = {\r\n      tools,\r\n      lastUpdated: new Date(),\r\n      sources,\r\n      categories: Array.from(categories),\r\n      totalTools: tools.length,\r\n      conflicts\r\n    };\r\n    \r\n    this.emit('catalog:updated', catalog);\r\n    return catalog;\r\n  }\r\n\r\n  async resolveToolConflicts(): Promise<ToolConflict[]> {\r\n    return Array.from(this.conflictResolutions.values());\r\n  }\r\n\r\n  async getHealthReport(): Promise<HealthReport> {\r\n    const report = this.healthMonitor.generateHealthReport();\r\n    \r\n    // Add built-in tools count\r\n    const builtinTools = await this.getBuiltinTools();\r\n    report.builtinTools = builtinTools.length;\r\n    report.totalTools = report.externalTools + report.builtinTools;\r\n    \r\n    this.emit('health:updated', report);\r\n    return report;\r\n  }\r\n\r\n  async getServerStatus(serverId: string): Promise<ServerHealth | null> {\r\n    return this.healthMonitor.getServerHealth(serverId);\r\n  }\r\n\r\n  async testServer(serverId: string): Promise<boolean> {\r\n    const connection = this.connections.get(serverId);\r\n    if (!connection) return false;\r\n    \r\n    try {\r\n      // Send a ping request\r\n      const pingRequest = {\r\n        jsonrpc: '2.0',\r\n        id: uuidv4(),\r\n        method: 'ping'\r\n      };\r\n      \r\n      await this.sendRequestAndWaitForResponse(serverId, pingRequest, 5000);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Configuration management\r\n  async updateServerConfig(serverId: string, updates: Partial<MCPServerConfig>): Promise<void> {\r\n    const config = this.configs.get(serverId);\r\n    if (!config) {\r\n      throw new Error(`Server configuration not found: ${serverId}`);\r\n    }\r\n    \r\n    const updatedConfig = { ...config, ...updates };\r\n    this.configs.set(serverId, updatedConfig);\r\n    await this.saveConfiguration(updatedConfig);\r\n    \r\n    // Reconnect if transport configuration changed\r\n    if (updates.transport) {\r\n      await this.reconnectServer(serverId);\r\n    }\r\n  }\r\n\r\n  async getServerConfig(serverId: string): Promise<MCPServerConfig | null> {\r\n    return this.configs.get(serverId) || null;\r\n  }\r\n\r\n  async listServers(): Promise<MCPServerConfig[]> {\r\n    return Array.from(this.configs.values());\r\n  }\r\n\r\n  async exportConfiguration(): Promise<string> {\r\n    const configs = Array.from(this.configs.values());\r\n    return JSON.stringify(configs, null, 2);\r\n  }\r\n\r\n  async importConfiguration(configJson: string): Promise<void> {\r\n    const configs: MCPServerConfig[] = JSON.parse(configJson);\r\n    \r\n    for (const config of configs) {\r\n      await this.addServer(config);\r\n    }\r\n  }\r\n\r\n  async shutdown(): Promise<void> {\r\n    console.log('Shutting down MCP Client Hub...');\r\n    \r\n    // Disconnect all servers\r\n    const disconnectPromises = Array.from(this.connections.keys()).map(\r\n      serverId => this.disconnectServer(serverId)\r\n    );\r\n    await Promise.all(disconnectPromises);\r\n    \r\n    // Cleanup\r\n    this.healthMonitor.destroy();\r\n    this.connections.clear();\r\n    this.configs.clear();\r\n    this.toolCache.clear();\r\n    this.conflictResolutions.clear();\r\n    \r\n    // Clear pending requests\r\n    for (const pending of this.pendingRequests.values()) {\r\n      clearTimeout(pending.timeout);\r\n      pending.reject(new Error('Hub shutting down'));\r\n    }\r\n    this.pendingRequests.clear();\r\n    \r\n    this.removeAllListeners();\r\n    this.isInitialized = false;\r\n    \r\n    console.log('MCP Client Hub shutdown complete');\r\n  }\r\n\r\n  // Private helper methods\r\n  private setupTransportHandlers(serverId: string, transport: BaseTransport): void {\r\n    transport.on('connect', () => {\r\n      const connection = this.connections.get(serverId);\r\n      if (connection) {\r\n        connection.connected = true;\r\n        this.healthMonitor.updateServerStatus(serverId, 'connected');\r\n        this.emit('server:connected', serverId);\r\n      }\r\n    });\r\n\r\n    transport.on('disconnect', () => {\r\n      const connection = this.connections.get(serverId);\r\n      if (connection) {\r\n        connection.connected = false;\r\n        this.healthMonitor.updateServerStatus(serverId, 'disconnected');\r\n        this.emit('server:disconnected', serverId, 'Transport disconnected');\r\n      }\r\n    });\r\n\r\n    transport.on('message', (message) => {\r\n      this.handleIncomingMessage(serverId, message);\r\n    });\r\n\r\n    transport.on('error', (error) => {\r\n      this.healthMonitor.updateServerStatus(serverId, 'error', error.message);\r\n      this.emit('server:error', serverId, error);\r\n    });\r\n  }\r\n\r\n  private async initializeMCPSession(serverId: string): Promise<void> {\r\n    const initRequest = {\r\n      jsonrpc: '2.0',\r\n      id: uuidv4(),\r\n      method: 'initialize',\r\n      params: {\r\n        protocolVersion: '2024-11-05',\r\n        capabilities: {\r\n          tools: true,\r\n          resources: true,\r\n          prompts: true\r\n        },\r\n        clientInfo: {\r\n          name: 'TanukiMCP Atlas',\r\n          version: '1.0.0'\r\n        }\r\n      }\r\n    };\r\n\r\n    const response = await this.sendRequestAndWaitForResponse(serverId, initRequest, 10000);\r\n    \r\n    // Update capabilities\r\n    this.healthMonitor.updateCapabilities(serverId, response.capabilities || {\r\n      tools: true,\r\n      resources: true,\r\n      prompts: true\r\n    });\r\n\r\n    // Sync tools\r\n    await this.syncServerTools(serverId);\r\n  }\r\n\r\n  private async syncServerTools(serverId: string): Promise<void> {\r\n    const connection = this.connections.get(serverId);\r\n    if (!connection) return;\r\n\r\n    try {\r\n      const toolsRequest = {\r\n        jsonrpc: '2.0',\r\n        id: uuidv4(),\r\n        method: 'tools/list'\r\n      };\r\n\r\n      const response = await this.sendRequestAndWaitForResponse(serverId, toolsRequest, 10000);\r\n      \r\n      const tools: EnhancedToolDefinition[] = (response.tools || []).map((tool: any) => ({\r\n        ...tool,\r\n        source: serverId,\r\n        reliability: 'medium',\r\n        latency: 'network',\r\n        category: this.categorizeToolName(tool.name),\r\n        tags: this.extractToolTags(tool),\r\n        usageCount: 0,\r\n        averageExecutionTime: 0,\r\n        successRate: 100\r\n      }));\r\n\r\n      connection.tools = tools;\r\n      connection.lastToolSync = new Date();\r\n      \r\n      this.toolCache.set(serverId, tools);\r\n      this.healthMonitor.updateToolCount(serverId, tools.length);\r\n      \r\n      console.log(`Synced ${tools.length} tools from ${connection.config.name}`);\r\n      \r\n    } catch (error) {\r\n      console.error(`Failed to sync tools from ${serverId}:`, error);\r\n    }\r\n  }\r\n\r\n  private async sendRequestAndWaitForResponse(serverId: string, request: any, timeoutMs: number): Promise<any> {\r\n    const connection = this.connections.get(serverId);\r\n    if (!connection || !connection.connected) {\r\n      throw new Error(`Server ${serverId} is not connected`);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        this.pendingRequests.delete(request.id);\r\n        reject(new Error(`Request timeout: ${request.method}`));\r\n      }, timeoutMs);\r\n\r\n      this.pendingRequests.set(request.id, { resolve, reject, timeout });\r\n      \r\n      connection.transport.send(request).catch(error => {\r\n        this.pendingRequests.delete(request.id);\r\n        clearTimeout(timeout);\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  private handleIncomingMessage(serverId: string, message: any): void {\r\n    if (message.id && this.pendingRequests.has(message.id)) {\r\n      const pending = this.pendingRequests.get(message.id)!;\r\n      this.pendingRequests.delete(message.id);\r\n      clearTimeout(pending.timeout);\r\n\r\n      if (message.error) {\r\n        pending.reject(new Error(message.error.message || 'MCP error'));\r\n      } else {\r\n        pending.resolve(message.result);\r\n      }\r\n    }\r\n  }\r\n\r\n  private findToolProvider(toolName: string): { serverId: string; tool: EnhancedToolDefinition } {\r\n    // Check for conflict resolution\r\n    const conflict = this.conflictResolutions.get(toolName);\r\n    if (conflict && conflict.selectedSource) {\r\n      const serverId = conflict.selectedSource;\r\n      const tools = this.toolCache.get(serverId) || [];\r\n      const tool = tools.find(t => t.name === toolName);\r\n      if (tool) {\r\n        return { serverId, tool };\r\n      }\r\n    }\r\n\r\n    // Search all sources\r\n    for (const [serverId, tools] of this.toolCache) {\r\n      const tool = tools.find(t => t.name === toolName);\r\n      if (tool) {\r\n        return { serverId, tool };\r\n      }\r\n    }\r\n\r\n    throw new Error(`Tool not found: ${toolName}`);\r\n  }\r\n\r\n  private async handleToolExecutionError(error: Error, toolCall: ToolCall, context: ExecutionContext): Promise<ToolResult> {\r\n    // Comprehensive error recovery logic would go here\r\n    // For now, just return the error\r\n    return {\r\n      content: [{\r\n        type: 'text',\r\n        text: `Tool execution failed: ${error.message}`\r\n      }],\r\n      isError: true\r\n    };\r\n  }\r\n\r\n  private formatToolResult(result: any): ToolResult {\r\n    if (result.content) {\r\n      return result;\r\n    }\r\n\r\n    // Convert simple result to standard format\r\n    return {\r\n      content: [{\r\n        type: 'text',\r\n        text: typeof result === 'string' ? result : JSON.stringify(result)\r\n      }]\r\n    };\r\n  }\r\n\r\n  private setupHealthMonitorListeners(): void {\r\n    this.healthMonitor.on('server:unhealthy', (serverId, health) => {\r\n      console.warn(`Server ${serverId} is unhealthy:`, health);\r\n      // Could trigger auto-recovery here\r\n    });\r\n\r\n    this.healthMonitor.on('server:recovered', (serverId, health) => {\r\n      console.log(`Server ${serverId} has recovered:`, health);\r\n    });\r\n  }\r\n\r\n  // Stub methods for integration points\r\n  private async getBuiltinTools(): Promise<EnhancedToolDefinition[]> {\r\n    // This would integrate with the built-in MCP server\r\n    return [];\r\n  }\r\n\r\n  private categorizeToolName(toolName: string): string {\r\n    // Simple categorization logic\r\n    if (toolName.includes('file') || toolName.includes('read') || toolName.includes('write')) {\r\n      return 'file-operations';\r\n    }\r\n    if (toolName.includes('search') || toolName.includes('find')) {\r\n      return 'search';\r\n    }\r\n    if (toolName.includes('create') || toolName.includes('generate')) {\r\n      return 'generation';\r\n    }\r\n    return 'general';\r\n  }\r\n\r\n  private extractToolTags(tool: any): string[] {\r\n    const tags = [];\r\n    if (tool.description) {\r\n      // Extract tags from description or other metadata\r\n      if (tool.description.includes('file')) tags.push('file');\r\n      if (tool.description.includes('search')) tags.push('search');\r\n      if (tool.description.includes('create')) tags.push('create');\r\n    }\r\n    return tags;\r\n  }\r\n\r\n  private updateToolMetrics(serverId: string, toolName: string, success: boolean): void {\r\n    // Update tool usage metrics\r\n    const tools = this.toolCache.get(serverId) || [];\r\n    const tool = tools.find(t => t.name === toolName);\r\n    if (tool) {\r\n      tool.usageCount++;\r\n      if (success) {\r\n        tool.successRate = (tool.successRate * (tool.usageCount - 1) + 100) / tool.usageCount;\r\n      } else {\r\n        tool.successRate = (tool.successRate * (tool.usageCount - 1)) / tool.usageCount;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Storage integration points (would integrate with main app database)\r\n  private async loadSavedConfigurations(): Promise<void> {\r\n    // Load from database\r\n  }\r\n\r\n  private async saveConfiguration(config: MCPServerConfig): Promise<void> {\r\n    // Save to database\r\n  }\r\n\r\n  private async removeStoredConfiguration(serverId: string): Promise<void> {\r\n    // Remove from database\r\n  }\r\n\r\n  private async autoConnectServers(): Promise<void> {\r\n    for (const config of this.configs.values()) {\r\n      if (config.autoRestart) {\r\n        try {\r\n          await this.connectServer(config.id);\r\n        } catch (error) {\r\n          console.warn(`Failed to auto-connect to ${config.name}:`, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n} ", "import { spawn, ChildProcess } from 'child_process';\r\nimport { BaseTransport } from './base-transport';\r\nimport { StdioTransportConfig } from '../types';\r\n\r\nexport class StdioTransport extends BaseTransport {\r\n  private childProcess?: ChildProcess;\r\n  private messageBuffer: string = '';\r\n\r\n  constructor(config: StdioTransportConfig) {\r\n    super(config);\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    if (this.connected || this.childProcess) {\r\n      await this.disconnect();\r\n    }\r\n\r\n    const config = this.config as StdioTransportConfig;\r\n    \r\n    try {\r\n      this.childProcess = spawn(config.command, config.args || [], {\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        env: { ...process.env, ...config.env },\r\n        cwd: config.cwd || process.cwd()\r\n      });\r\n\r\n      this.setupChildProcessHandlers();\r\n      \r\n      // Wait for the process to start\r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          reject(new Error('Connection timeout'));\r\n        }, 10000);\r\n\r\n        this.childProcess!.on('spawn', () => {\r\n          clearTimeout(timeout);\r\n          this.handleConnect();\r\n          resolve();\r\n        });\r\n\r\n        this.childProcess!.on('error', (error) => {\r\n          clearTimeout(timeout);\r\n          reject(error);\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to start MCP server: ${error}`);\r\n    }\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    if (this.childProcess) {\r\n      this.childProcess.kill('SIGTERM');\r\n      \r\n      // Wait for graceful shutdown, then force kill\r\n      setTimeout(() => {\r\n        if (this.childProcess && !this.childProcess.killed) {\r\n          this.childProcess.kill('SIGKILL');\r\n        }\r\n      }, 5000);\r\n\r\n      this.childProcess = undefined;\r\n    }\r\n    \r\n    this.handleDisconnect();\r\n  }\r\n\r\n  async send(message: any): Promise<void> {\r\n    if (!this.childProcess || !this.connected) {\r\n      throw new Error('Transport not connected');\r\n    }\r\n\r\n    const jsonMessage = JSON.stringify(message) + '\\n';\r\n    \r\n    return new Promise<void>((resolve, reject) => {\r\n      this.childProcess!.stdin!.write(jsonMessage, 'utf8', (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private setupChildProcessHandlers(): void {\r\n    if (!this.childProcess) return;\r\n\r\n    // Handle stdout messages\r\n    this.childProcess.stdout!.on('data', (data: Buffer) => {\r\n      this.messageBuffer += data.toString('utf8');\r\n      this.processMessages();\r\n    });\r\n\r\n    // Handle stderr for debugging\r\n    this.childProcess.stderr!.on('data', (data: Buffer) => {\r\n      console.warn(`MCP Server stderr: ${data.toString('utf8')}`);\r\n    });\r\n\r\n    // Handle process exit\r\n    this.childProcess.on('exit', (code, signal) => {\r\n      console.log(`MCP Server exited with code ${code}, signal ${signal}`);\r\n      this.handleDisconnect();\r\n      \r\n      // Auto-reconnect if configured\r\n      const config = this.config as StdioTransportConfig;\r\n      if (code !== 0 && !signal) {\r\n        this.scheduleReconnect();\r\n      }\r\n    });\r\n\r\n    // Handle process errors\r\n    this.childProcess.on('error', (error) => {\r\n      console.error('MCP Server process error:', error);\r\n      this.handleError(error);\r\n    });\r\n  }\r\n\r\n  private processMessages(): void {\r\n    const lines = this.messageBuffer.split('\\n');\r\n    this.messageBuffer = lines.pop() || ''; // Keep incomplete line in buffer\r\n\r\n    for (const line of lines) {\r\n      if (line.trim()) {\r\n        try {\r\n          const message = JSON.parse(line);\r\n          this.handleMessage(message);\r\n        } catch (error) {\r\n          console.warn('Failed to parse JSON message:', line, error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    this.disconnect();\r\n    super.destroy();\r\n  }\r\n} ", "import { EventEmitter } from 'events';\r\nimport { TransportConfig } from '../types';\r\n\r\nexport interface TransportEvents {\r\n  'connect': () => void;\r\n  'disconnect': () => void;\r\n  'message': (message: any) => void;\r\n  'error': (error: Error) => void;\r\n}\r\n\r\nexport abstract class BaseTransport extends EventEmitter {\r\n  protected config: TransportConfig;\r\n  protected connected: boolean = false;\r\n  protected reconnectTimer?: NodeJS.Timeout;\r\n  protected connectionId?: string;\r\n\r\n  constructor(config: TransportConfig) {\r\n    super();\r\n    this.config = config;\r\n  }\r\n\r\n  abstract connect(): Promise<void>;\r\n  abstract disconnect(): Promise<void>;\r\n  abstract send(message: any): Promise<void>;\r\n\r\n  isConnected(): boolean {\r\n    return this.connected;\r\n  }\r\n\r\n  getConfig(): TransportConfig {\r\n    return this.config;\r\n  }\r\n\r\n  protected handleConnect(): void {\r\n    this.connected = true;\r\n    this.emit('connect');\r\n  }\r\n\r\n  protected handleDisconnect(): void {\r\n    this.connected = false;\r\n    this.emit('disconnect');\r\n  }\r\n\r\n  protected handleMessage(message: any): void {\r\n    this.emit('message', message);\r\n  }\r\n\r\n  protected handleError(error: Error): void {\r\n    this.emit('error', error);\r\n  }\r\n\r\n  protected scheduleReconnect(delay: number = 5000): void {\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n    }\r\n\r\n    this.reconnectTimer = setTimeout(async () => {\r\n      try {\r\n        await this.connect();\r\n      } catch (error) {\r\n        this.handleError(error as Error);\r\n        this.scheduleReconnect(delay * 2); // Exponential backoff\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n    }\r\n    this.removeAllListeners();\r\n  }\r\n} ", "import { BaseTransport } from './base-transport';\r\nimport { SSETransportConfig } from '../types';\r\n\r\n// Define EventSource interface for Node.js environment\r\ninterface EventSource {\r\n  addEventListener(type: string, listener: (event: any) => void): void;\r\n  close(): void;\r\n}\r\n\r\ndeclare const EventSource: {\r\n  new (url: string): EventSource;\r\n};\r\n\r\nexport class SSETransport extends BaseTransport {\r\n  private eventSource?: EventSource;\r\n  private sessionId?: string;\r\n  private baseUrl: string;\r\n  private headers: Record<string, string>;\r\n\r\n  constructor(config: SSETransportConfig) {\r\n    super(config);\r\n    this.baseUrl = config.url;\r\n    this.headers = config.headers || {};\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    if (this.connected || this.eventSource) {\r\n      await this.disconnect();\r\n    }\r\n\r\n    const config = this.config as SSETransportConfig;\r\n    \r\n    try {\r\n      // First, establish a session with the server\r\n      const response = await fetch(`${this.baseUrl}/sse`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...this.headers\r\n        },\r\n        body: JSON.stringify({\r\n          method: 'initialize',\r\n          params: {\r\n            protocolVersion: '2024-11-05',\r\n            capabilities: {\r\n              tools: true,\r\n              resources: true,\r\n              prompts: true\r\n            },\r\n            clientInfo: {\r\n              name: 'TanukiMCP Atlas',\r\n              version: '1.0.0'\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const initResult = await response.json() as { sessionId: string };\r\n      this.sessionId = initResult.sessionId;\r\n\r\n      // Set up EventSource for receiving messages\r\n      const sseUrl = `${this.baseUrl}/sse/${this.sessionId}`;\r\n      this.eventSource = new EventSource(sseUrl);\r\n\r\n      this.setupEventSourceHandlers();\r\n\r\n      // Wait for connection confirmation\r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          reject(new Error('SSE connection timeout'));\r\n        }, config.timeout || 10000);\r\n\r\n        this.eventSource!.addEventListener('open', () => {\r\n          clearTimeout(timeout);\r\n          this.handleConnect();\r\n          resolve();\r\n        });\r\n\r\n        this.eventSource!.addEventListener('error', (event) => {\r\n          clearTimeout(timeout);\r\n          reject(new Error('SSE connection failed'));\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to connect to MCP server via SSE: ${error}`);\r\n    }\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    if (this.eventSource) {\r\n      this.eventSource.close();\r\n      this.eventSource = undefined;\r\n    }\r\n\r\n    if (this.sessionId) {\r\n      // Notify server of disconnection\r\n      try {\r\n        await fetch(`${this.baseUrl}/sse/${this.sessionId}`, {\r\n          method: 'DELETE',\r\n          headers: this.headers\r\n        });\r\n      } catch (error) {\r\n        console.warn('Failed to notify server of disconnection:', error);\r\n      }\r\n      this.sessionId = undefined;\r\n    }\r\n\r\n    this.handleDisconnect();\r\n  }\r\n\r\n  async send(message: any): Promise<void> {\r\n    if (!this.sessionId || !this.connected) {\r\n      throw new Error('Transport not connected');\r\n    }\r\n\r\n    const response = await fetch(`${this.baseUrl}/sse/${this.sessionId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...this.headers\r\n      },\r\n      body: JSON.stringify(message)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    // For SSE, we don't return the response here as it will come via EventSource\r\n  }\r\n\r\n  private setupEventSourceHandlers(): void {\r\n    if (!this.eventSource) return;\r\n\r\n    this.eventSource.addEventListener('message', (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        this.handleMessage(message);\r\n      } catch (error) {\r\n        console.warn('Failed to parse SSE message:', event.data, error);\r\n      }\r\n    });\r\n\r\n    this.eventSource.addEventListener('error', (event) => {\r\n      console.error('SSE connection error:', event);\r\n      this.handleError(new Error('SSE connection error'));\r\n      \r\n      // Auto-reconnect\r\n      this.scheduleReconnect();\r\n    });\r\n\r\n    // Handle custom event types\r\n    this.eventSource.addEventListener('notification', (event) => {\r\n      try {\r\n        const notification = JSON.parse(event.data);\r\n        this.handleMessage(notification);\r\n      } catch (error) {\r\n        console.warn('Failed to parse SSE notification:', event.data, error);\r\n      }\r\n    });\r\n\r\n    this.eventSource.addEventListener('progress', (event) => {\r\n      try {\r\n        const progress = JSON.parse(event.data);\r\n        this.handleMessage(progress);\r\n      } catch (error) {\r\n        console.warn('Failed to parse SSE progress:', event.data, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  destroy(): void {\r\n    this.disconnect();\r\n    super.destroy();\r\n  }\r\n} ", "import { BaseTransport } from './base-transport';\r\nimport { WebSocketTransportConfig } from '../types';\r\n\r\n// Define WebSocket interface for Node.js environment\r\ninterface WebSocket {\r\n  readyState: number;\r\n  CONNECTING: number;\r\n  OPEN: number;\r\n  CLOSING: number;\r\n  CLOSED: number;\r\n  send(data: string): void;\r\n  close(code?: number, reason?: string): void;\r\n  addEventListener(type: string, listener: (event: any) => void): void;\r\n  removeEventListener(type: string, listener: (event: any) => void): void;\r\n}\r\n\r\ndeclare const WebSocket: {\r\n  new (url: string, protocols?: string[]): WebSocket;\r\n  CONNECTING: number;\r\n  OPEN: number;\r\n  CLOSING: number;\r\n  CLOSED: number;\r\n};\r\n\r\nexport class WebSocketTransport extends BaseTransport {\r\n  private webSocket?: WebSocket;\r\n  private pingInterval?: NodeJS.Timeout;\r\n  private pongTimeout?: NodeJS.Timeout;\r\n\r\n  constructor(config: WebSocketTransportConfig) {\r\n    super(config);\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    if (this.connected || this.webSocket) {\r\n      await this.disconnect();\r\n    }\r\n\r\n    const config = this.config as WebSocketTransportConfig;\r\n    \r\n    try {\r\n      this.webSocket = new WebSocket(config.url, config.protocols);\r\n      \r\n      this.setupWebSocketHandlers();\r\n\r\n      // Wait for connection\r\n      await new Promise<void>((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          reject(new Error('WebSocket connection timeout'));\r\n        }, 10000);\r\n\r\n        this.webSocket!.addEventListener('open', () => {\r\n          clearTimeout(timeout);\r\n          this.handleConnect();\r\n          this.startHeartbeat();\r\n          resolve();\r\n        });\r\n\r\n        this.webSocket!.addEventListener('error', (event: any) => {\r\n          clearTimeout(timeout);\r\n          reject(new Error(`WebSocket connection failed: ${event.message || 'Unknown error'}`));\r\n        });\r\n      });\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to connect to MCP server via WebSocket: ${error}`);\r\n    }\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    this.stopHeartbeat();\r\n\r\n    if (this.webSocket) {\r\n      if (this.webSocket.readyState === WebSocket.OPEN) {\r\n        this.webSocket.close(1000, 'Normal closure');\r\n      }\r\n      this.webSocket = undefined;\r\n    }\r\n\r\n    this.handleDisconnect();\r\n  }\r\n\r\n  async send(message: any): Promise<void> {\r\n    if (!this.webSocket || this.webSocket.readyState !== WebSocket.OPEN) {\r\n      throw new Error('WebSocket not connected');\r\n    }\r\n\r\n    const jsonMessage = JSON.stringify(message);\r\n    this.webSocket.send(jsonMessage);\r\n  }\r\n\r\n  private setupWebSocketHandlers(): void {\r\n    if (!this.webSocket) return;\r\n\r\n    this.webSocket.addEventListener('message', (event: any) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        \r\n        // Handle heartbeat responses\r\n        if (message.method === 'pong') {\r\n          this.handlePong();\r\n          return;\r\n        }\r\n\r\n        this.handleMessage(message);\r\n      } catch (error) {\r\n        console.warn('Failed to parse WebSocket message:', event.data, error);\r\n      }\r\n    });\r\n\r\n    this.webSocket.addEventListener('close', (event: any) => {\r\n      console.log(`WebSocket closed: ${event.code} ${event.reason}`);\r\n      this.handleDisconnect();\r\n      \r\n      // Auto-reconnect on unexpected closure\r\n      if (event.code !== 1000 && event.code !== 1001) {\r\n        this.scheduleReconnect();\r\n      }\r\n    });\r\n\r\n    this.webSocket.addEventListener('error', (event: any) => {\r\n      console.error('WebSocket error:', event);\r\n      this.handleError(new Error(`WebSocket error: ${event.message || 'Unknown error'}`));\r\n    });\r\n  }\r\n\r\n  private startHeartbeat(): void {\r\n    this.stopHeartbeat();\r\n\r\n    // Send ping every 30 seconds\r\n    this.pingInterval = setInterval(() => {\r\n      if (this.webSocket?.readyState === WebSocket.OPEN) {\r\n        this.send({ method: 'ping', id: Date.now() });\r\n        \r\n        // Set timeout for pong response\r\n        this.pongTimeout = setTimeout(() => {\r\n          console.warn('WebSocket ping timeout - reconnecting');\r\n          this.scheduleReconnect();\r\n        }, 10000);\r\n      }\r\n    }, 30000);\r\n  }\r\n\r\n  private stopHeartbeat(): void {\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = undefined;\r\n    }\r\n    \r\n    if (this.pongTimeout) {\r\n      clearTimeout(this.pongTimeout);\r\n      this.pongTimeout = undefined;\r\n    }\r\n  }\r\n\r\n  private handlePong(): void {\r\n    if (this.pongTimeout) {\r\n      clearTimeout(this.pongTimeout);\r\n      this.pongTimeout = undefined;\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    this.stopHeartbeat();\r\n    this.disconnect();\r\n    super.destroy();\r\n  }\r\n} ", "import { BaseTransport } from './base-transport';\r\nimport { StdioTransport } from './stdio-transport';\r\nimport { SSETransport } from './sse-transport';\r\nimport { WebSocketTransport } from './websocket-transport';\r\nimport { TransportConfig, StdioTransportConfig, SSETransportConfig, WebSocketTransportConfig } from '../types';\r\n\r\nexport class TransportFactory {\r\n  static create(config: TransportConfig): BaseTransport {\r\n    switch (config.type) {\r\n      case 'stdio':\r\n        return new StdioTransport(config as StdioTransportConfig);\r\n      \r\n      case 'sse':\r\n        return new SSETransport(config as SSETransportConfig);\r\n      \r\n      case 'websocket':\r\n        return new WebSocketTransport(config as WebSocketTransportConfig);\r\n      \r\n      default:\r\n        throw new Error(`Unsupported transport type: ${(config as any).type}`);\r\n    }\r\n  }\r\n\r\n  static validateConfig(config: TransportConfig): void {\r\n    if (!config.type) {\r\n      throw new Error('Transport type is required');\r\n    }\r\n\r\n    switch (config.type) {\r\n      case 'stdio':\r\n        this.validateStdioConfig(config as StdioTransportConfig);\r\n        break;\r\n      \r\n      case 'sse':\r\n        this.validateSSEConfig(config as SSETransportConfig);\r\n        break;\r\n      \r\n      case 'websocket':\r\n        this.validateWebSocketConfig(config as WebSocketTransportConfig);\r\n        break;\r\n      \r\n      default:\r\n        throw new Error(`Unsupported transport type: ${(config as any).type}`);\r\n    }\r\n  }\r\n\r\n  private static validateStdioConfig(config: StdioTransportConfig): void {\r\n    if (!config.command) {\r\n      throw new Error('Stdio transport requires a command');\r\n    }\r\n\r\n    if (typeof config.command !== 'string') {\r\n      throw new Error('Stdio transport command must be a string');\r\n    }\r\n\r\n    if (config.args && !Array.isArray(config.args)) {\r\n      throw new Error('Stdio transport args must be an array');\r\n    }\r\n\r\n    if (config.env && typeof config.env !== 'object') {\r\n      throw new Error('Stdio transport env must be an object');\r\n    }\r\n  }\r\n\r\n  private static validateSSEConfig(config: SSETransportConfig): void {\r\n    if (!config.url) {\r\n      throw new Error('SSE transport requires a URL');\r\n    }\r\n\r\n    if (typeof config.url !== 'string') {\r\n      throw new Error('SSE transport URL must be a string');\r\n    }\r\n\r\n    try {\r\n      new URL(config.url);\r\n    } catch (error) {\r\n      throw new Error(`SSE transport URL is invalid: ${config.url}`);\r\n    }\r\n\r\n    if (config.headers && typeof config.headers !== 'object') {\r\n      throw new Error('SSE transport headers must be an object');\r\n    }\r\n\r\n    if (config.timeout && typeof config.timeout !== 'number') {\r\n      throw new Error('SSE transport timeout must be a number');\r\n    }\r\n  }\r\n\r\n  private static validateWebSocketConfig(config: WebSocketTransportConfig): void {\r\n    if (!config.url) {\r\n      throw new Error('WebSocket transport requires a URL');\r\n    }\r\n\r\n    if (typeof config.url !== 'string') {\r\n      throw new Error('WebSocket transport URL must be a string');\r\n    }\r\n\r\n    try {\r\n      const url = new URL(config.url);\r\n      if (!['ws:', 'wss:'].includes(url.protocol)) {\r\n        throw new Error('WebSocket URL must use ws:// or wss:// protocol');\r\n      }\r\n    } catch (error) {\r\n      throw new Error(`WebSocket transport URL is invalid: ${config.url}`);\r\n    }\r\n\r\n    if (config.protocols && !Array.isArray(config.protocols)) {\r\n      throw new Error('WebSocket transport protocols must be an array');\r\n    }\r\n\r\n    if (config.headers && typeof config.headers !== 'object') {\r\n      throw new Error('WebSocket transport headers must be an object');\r\n    }\r\n  }\r\n\r\n  static getSupportedTransports(): string[] {\r\n    return ['stdio', 'sse', 'websocket'];\r\n  }\r\n\r\n  static getTransportDescription(type: string): string {\r\n    switch (type) {\r\n      case 'stdio':\r\n        return 'Child process with stdin/stdout communication (local servers)';\r\n      \r\n      case 'sse':\r\n        return 'Server-Sent Events over HTTP (web-based servers)';\r\n      \r\n      case 'websocket':\r\n        return 'WebSocket bidirectional communication (real-time servers)';\r\n      \r\n      default:\r\n        return 'Unknown transport type';\r\n    }\r\n  }\r\n\r\n  static getDefaultConfig(type: string): Partial<TransportConfig> {\r\n    switch (type) {\r\n      case 'stdio':\r\n        return {\r\n          type: 'stdio',\r\n          command: '',\r\n          args: [],\r\n          env: {}\r\n        };\r\n      \r\n      case 'sse':\r\n        return {\r\n          type: 'sse',\r\n          url: '',\r\n          headers: {},\r\n          timeout: 30000\r\n        };\r\n      \r\n      case 'websocket':\r\n        return {\r\n          type: 'websocket',\r\n          url: '',\r\n          protocols: [],\r\n          headers: {}\r\n        };\r\n      \r\n      default:\r\n        throw new Error(`No default config for transport type: ${type}`);\r\n    }\r\n  }\r\n} ", "import { EventEmitter } from 'events';\r\nimport { ServerHealth, ServerStatus, HealthReport, MCPServerConfig } from '../types';\r\n\r\nexport interface HealthMonitorEvents {\r\n  'health:updated': (serverId: string, health: ServerHealth) => void;\r\n  'server:unhealthy': (serverId: string, health: ServerHealth) => void;\r\n  'server:recovered': (serverId: string, health: ServerHealth) => void;\r\n}\r\n\r\nexport class HealthMonitor extends EventEmitter {\r\n  private serverHealth: Map<string, ServerHealth> = new Map();\r\n  private healthCheckIntervals: Map<string, NodeJS.Timeout> = new Map();\r\n  private responseTimers: Map<string, { start: number; messageId: string }> = new Map();\r\n  \r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  startMonitoring(serverId: string, config: MCPServerConfig): void {\r\n    // Initialize health record\r\n    const health: ServerHealth = {\r\n      serverId,\r\n      status: 'connecting',\r\n      lastSeen: new Date(),\r\n      responseTime: 0,\r\n      errorCount: 0,\r\n      connectionAttempts: 0,\r\n      toolCount: 0,\r\n      uptime: 0\r\n    };\r\n    \r\n    this.serverHealth.set(serverId, health);\r\n\r\n    // Set up periodic health checks\r\n    const interval = setInterval(() => {\r\n      this.performHealthCheck(serverId);\r\n    }, config.healthCheckInterval);\r\n    \r\n    this.healthCheckIntervals.set(serverId, interval);\r\n  }\r\n\r\n  stopMonitoring(serverId: string): void {\r\n    const interval = this.healthCheckIntervals.get(serverId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.healthCheckIntervals.delete(serverId);\r\n    }\r\n    \r\n    this.serverHealth.delete(serverId);\r\n    this.responseTimers.delete(serverId);\r\n  }\r\n\r\n  updateServerStatus(serverId: string, status: ServerStatus, error?: string): void {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return;\r\n\r\n    const wasUnhealthy = this.isUnhealthy(health);\r\n    \r\n    health.status = status;\r\n    health.lastSeen = new Date();\r\n    \r\n    if (error) {\r\n      health.lastError = error;\r\n      health.errorCount++;\r\n    }\r\n    \r\n    if (status === 'connected') {\r\n      health.connectionAttempts = 0;\r\n      \r\n      // Calculate uptime\r\n      const now = Date.now();\r\n      health.uptime = now;\r\n    } else if (status === 'connecting') {\r\n      health.connectionAttempts++;\r\n    }\r\n\r\n    this.serverHealth.set(serverId, health);\r\n    this.emit('health:updated', serverId, health);\r\n\r\n    // Check for health state changes\r\n    const isNowUnhealthy = this.isUnhealthy(health);\r\n    if (!wasUnhealthy && isNowUnhealthy) {\r\n      this.emit('server:unhealthy', serverId, health);\r\n    } else if (wasUnhealthy && !isNowUnhealthy) {\r\n      this.emit('server:recovered', serverId, health);\r\n    }\r\n  }\r\n\r\n  recordRequestStart(serverId: string, messageId: string): void {\r\n    this.responseTimers.set(serverId, {\r\n      start: Date.now(),\r\n      messageId\r\n    });\r\n  }\r\n\r\n  recordRequestEnd(serverId: string, messageId: string, success: boolean): void {\r\n    const timer = this.responseTimers.get(serverId);\r\n    if (!timer || timer.messageId !== messageId) return;\r\n\r\n    const responseTime = Date.now() - timer.start;\r\n    this.responseTimers.delete(serverId);\r\n\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return;\r\n\r\n    // Update response time (rolling average)\r\n    if (health.responseTime === 0) {\r\n      health.responseTime = responseTime;\r\n    } else {\r\n      health.responseTime = (health.responseTime * 0.8) + (responseTime * 0.2);\r\n    }\r\n\r\n    if (!success) {\r\n      health.errorCount++;\r\n    }\r\n\r\n    health.lastSeen = new Date();\r\n    this.serverHealth.set(serverId, health);\r\n    this.emit('health:updated', serverId, health);\r\n  }\r\n\r\n  updateToolCount(serverId: string, count: number): void {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return;\r\n\r\n    health.toolCount = count;\r\n    this.serverHealth.set(serverId, health);\r\n    this.emit('health:updated', serverId, health);\r\n  }\r\n\r\n  updateCapabilities(serverId: string, capabilities: { tools: boolean; resources: boolean; prompts: boolean }): void {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return;\r\n\r\n    health.capabilities = capabilities;\r\n    this.serverHealth.set(serverId, health);\r\n    this.emit('health:updated', serverId, health);\r\n  }\r\n\r\n  getServerHealth(serverId: string): ServerHealth | null {\r\n    return this.serverHealth.get(serverId) || null;\r\n  }\r\n\r\n  getAllServerHealth(): Map<string, ServerHealth> {\r\n    return new Map(this.serverHealth);\r\n  }\r\n\r\n  generateHealthReport(): HealthReport {\r\n    const servers: Record<string, ServerHealth> = {};\r\n    let connectedServers = 0;\r\n    let totalTools = 0;\r\n    let externalTools = 0;\r\n\r\n    for (const [serverId, health] of this.serverHealth) {\r\n      servers[serverId] = health;\r\n      \r\n      if (health.status === 'connected') {\r\n        connectedServers++;\r\n      }\r\n      \r\n      totalTools += health.toolCount;\r\n      externalTools += health.toolCount;\r\n    }\r\n\r\n    return {\r\n      generated: new Date(),\r\n      servers,\r\n      totalServers: this.serverHealth.size,\r\n      connectedServers,\r\n      totalTools,\r\n      builtinTools: 0, // Will be updated by the main hub\r\n      externalTools\r\n    };\r\n  }\r\n\r\n  private async performHealthCheck(serverId: string): Promise<void> {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return;\r\n\r\n    // Simple ping check - could be enhanced with actual MCP ping\r\n    const now = new Date();\r\n    const timeSinceLastSeen = now.getTime() - health.lastSeen.getTime();\r\n    \r\n    // Consider server unhealthy if no activity for 2 minutes\r\n    if (timeSinceLastSeen > 120000 && health.status === 'connected') {\r\n      this.updateServerStatus(serverId, 'error', 'Health check timeout');\r\n    }\r\n  }\r\n\r\n  private isUnhealthy(health: ServerHealth): boolean {\r\n    return (\r\n      health.status === 'error' ||\r\n      health.status === 'disconnected' ||\r\n      health.errorCount > 10 ||\r\n      health.responseTime > 30000 // 30 seconds\r\n    );\r\n  }\r\n\r\n  // Utility methods for health analysis\r\n  getHealthScore(serverId: string): number {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return 0;\r\n\r\n    let score = 100;\r\n\r\n    // Deduct points for errors\r\n    score -= Math.min(health.errorCount * 2, 50);\r\n\r\n    // Deduct points for slow response times\r\n    if (health.responseTime > 1000) {\r\n      score -= Math.min((health.responseTime - 1000) / 100, 30);\r\n    }\r\n\r\n    // Deduct points for disconnected status\r\n    if (health.status !== 'connected') {\r\n      score -= 40;\r\n    }\r\n\r\n    // Deduct points for connection attempts\r\n    score -= Math.min(health.connectionAttempts * 5, 20);\r\n\r\n    return Math.max(score, 0);\r\n  }\r\n\r\n  getServerMetrics(serverId: string): {\r\n    healthScore: number;\r\n    availability: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n  } | null {\r\n    const health = this.serverHealth.get(serverId);\r\n    if (!health) return null;\r\n\r\n    const healthScore = this.getHealthScore(serverId);\r\n    \r\n    // Calculate availability based on uptime vs total time\r\n    const totalTime = Date.now() - (health.uptime || Date.now());\r\n    const availability = totalTime > 0 ? (health.uptime / totalTime) * 100 : 0;\r\n\r\n    // Error rate calculation would need more detailed tracking\r\n    const errorRate = health.errorCount > 0 ? (health.errorCount / (health.errorCount + 100)) * 100 : 0;\r\n\r\n    return {\r\n      healthScore,\r\n      availability,\r\n      averageResponseTime: health.responseTime,\r\n      errorRate\r\n    };\r\n  }\r\n\r\n  destroy(): void {\r\n    // Clear all intervals\r\n    for (const interval of this.healthCheckIntervals.values()) {\r\n      clearInterval(interval);\r\n    }\r\n    \r\n    this.healthCheckIntervals.clear();\r\n    this.serverHealth.clear();\r\n    this.responseTimers.clear();\r\n    this.removeAllListeners();\r\n  }\r\n} ", "/**\n * Adapter to bridge the actual OllamaService with the LLMService interface\n */\n\nexport interface OllamaServiceInterface {\n  checkHealth(): Promise<{ isConnected: boolean }>;\n  getModels(): Promise<Array<{ name: string }>>;\n  setModel(modelName: string): void;\n  getCurrentModel(): string;\n  setBaseUrl(url: string): void;\n  chat(messages: Array<{ role: string; content: string }>, options?: any): Promise<{ message: { content: string } }>;\n}\n\nexport class OllamaServiceAdapter implements OllamaServiceInterface {\n  private currentModel: string = 'llama3.1:latest';\n  private baseUrl: string = 'http://127.0.0.1:11434';\n\n  constructor(private ollamaService: any) {}\n\n  async checkHealth(): Promise<{ isConnected: boolean }> {\n    const isConnected = await this.ollamaService.checkOllamaHealth();\n    return { isConnected };\n  }\n\n  async getModels(): Promise<Array<{ name: string }>> {\n    const models = await this.ollamaService.listModels();\n    return models.map((model: any) => ({ name: model.name }));\n  }\n\n  setModel(modelName: string): void {\n    this.currentModel = modelName;\n  }\n\n  getCurrentModel(): string {\n    return this.currentModel;\n  }\n\n  setBaseUrl(url: string): void {\n    this.baseUrl = url;\n    // Note: The actual OllamaService doesn't have a setBaseUrl method\n    // This is a limitation of the current implementation\n  }\n\n  async chat(messages: Array<{ role: string; content: string }>, options?: any): Promise<{ message: { content: string } }> {\n    // Convert to the format expected by OllamaService.generate\n    const prompt = messages.map(m => `${m.role}: ${m.content}`).join('\\n');\n    \n    const request = {\n      model: this.currentModel,\n      prompt,\n      stream: false,\n      ...options\n    };\n\n    const response = await this.ollamaService.generate(request);\n    return {\n      message: {\n        content: response.response || response.content || ''\n      }\n    };\n  }\n}"],
  "mappings": "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",
  "names": ["import_electron", "import_path", "path", "import_electron", "import_better_sqlite3", "import_path", "import_electron", "crypto", "import_crypto", "crypto", "path", "Database", "sqlite", "db", "app", "text", "import_electron", "import_path", "path", "import_electron", "import_electron", "import_electron", "import_path", "path", "import_electron", "import_path", "import_electron", "llmService", "llmService", "llmService", "llmService", "import_events", "import_events", "path"]
}
