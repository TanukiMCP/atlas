name: Build and Release TanukiMCP Atlas

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: TanukiMCP Atlas ${{ steps.get_version.outputs.version }}
          body: |
            ## TanukiMCP Atlas Release
            
            Professional AI Agentic MCP Integrated IDE with local LLM integration.
            
            ### Downloads
            - Windows: .msi installer (recommended)
            - macOS: .dmg file
            - Linux: .AppImage
          draft: false
          prerelease: false

  # Build job for Windows
  build-windows:
    needs: create-release
    runs-on: windows-2025
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm run rebuild

      - name: Build application
        run: npm run build

      - name: Package application (unsigned)
        run: npm run dist:win
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/TanukiMCP Atlas Setup.msi
          asset_name: TanukiMCP-Atlas-Windows-Setup.msi
          asset_content_type: application/x-msi

      - name: Upload Windows NSIS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/TanukiMCP Atlas Setup.exe
          asset_name: TanukiMCP-Atlas-Windows-Setup.exe
          asset_content_type: application/x-msdownload

  # Build job for macOS
  build-macos:
    needs: create-release
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm run rebuild

      - name: Build application
        run: npm run build

      - name: Package application (unsigned)
        run: npm run dist:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/TanukiMCP Atlas.dmg
          asset_name: TanukiMCP-Atlas-macOS.dmg
          asset_content_type: application/x-apple-diskimage

  # Build job for Linux
  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Install dependencies
        run: |
          npm ci
          npm run rebuild

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run dist:linux

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/TanukiMCP Atlas.AppImage
          asset_name: TanukiMCP-Atlas-Linux.AppImage
          asset_content_type: application/x-executable